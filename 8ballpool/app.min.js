function initSplash() {
    gameState = "splash",
    resizeCanvas(),
    1 != audioType || muted || music.play(),
    initStartScreen()
}
function initStartScreen() {
    gameState = "start",
    userInput.removeHitArea("moreGames"),
    1 == audioType && (musicTween && musicTween.kill(),
    musicTween = TweenLite.to(music, 1, {
        volume: .5,
        ease: "Linear.easeNone"
    })),
    background = new Elements.Background(assetLib.getData("background"),canvas.width,canvas.height),
    userInput.addHitArea("mute", butEventHandler, null, "rect", {
        aRect: [420, 0, canvas.width, 55]
    }, !0);
    var t = {
        oImgData: assetLib.getData("uiButs"),
        aPos: [canvas.width / 2, 600],
        id: "play"
    }
      , a = {
        oImgData: assetLib.getData("moreGamesBut"),
        aPos: [355, 745],
        id: "none",
        scale: .3,
        noFloat: !0
    }
      , e = {
        oImgData: assetLib.getData("uiButs"),
        aPos: [120, 750],
        id: "credits",
        noFloat: !0
    };
    userInput.addHitArea("showTutorial", butEventHandler, null, "image", t),
    userInput.addHitArea("moreGames", butEventHandler, null, "image", a),
    userInput.addHitArea("credits", butEventHandler, null, "image", e);
    var i = new Array(t,a,e);
    panel = new Elements.Panel(assetLib.getData("panels"),assetLib.getData("scoreNumbers"),gameState,i,canvas.width,canvas.height),
    panel.startTween1(),
    previousTime = (new Date).getTime(),
    updateStartScreenEvent()
}
function initCreditsScreen() {
    return;
    gameState = "credits";
    var t = {
        oImgData: assetLib.getData("uiButs"),
        aPos: [120, 750],
        id: "back"
    };
    userInput.addHitArea("backFromCredits", butEventHandler, null, "image", t);
    var a = new Array(t);
    panel = new Elements.Panel(assetLib.getData("panels"),assetLib.getData("scoreNumbers"),gameState,a,canvas.width,canvas.height),
    panel.startTween2(),
    previousTime = (new Date).getTime(),
    updateCreditsScreenEvent()
}
function initTutorial() {
    gameState = "tutorial";
    var t = {
        oImgData: assetLib.getData("uiButs"),
        aPos: [345, 715],
        id: "play"
    };
    userInput.addHitArea("startGame", butEventHandler, null, "image", t);
    var a = new Array(t);
    panel = new Elements.Panel(assetLib.getData("panels"),assetLib.getData("scoreNumbers"),gameState,a,canvas.width,canvas.height),
    panel.startTween1(),
    previousTime = (new Date).getTime(),
    updateTutorialEvent()
}
function initGame() {
    gameState = "game",
    gameTouchState = 0,
    shotsSinceLastPot = 1,
    gameTimer = startTime,
    streak = 0,
    levelNum = 0,
    1 == audioType && (musicTween.kill(),
    musicTween = TweenLite.to(music, .2, {
        volume: 0,
        ease: "Linear.easeNone"
    })),
    userInput.addHitArea("pause", butEventHandler, null, "rect", {
        aRect: [0, 0, 55, 55]
    }, !0),
    userInput.addHitArea("gameTouch", butEventHandler, {
        isDraggable: !0,
        multiTouch: !0
    }, "rect", {
        aRect: [0, 0, canvas.width, canvas.height]
    }, !0),
    hud = new Elements.Hud(assetLib.getData("hud"),assetLib.getData("timeNumbers"),assetLib.getData("tableNumbers"),{
        racks: 1,
        score: 0,
        multiplier: 10,
        balls: 0,
        streak: streak
    }),
    hud.setTime(startTime);
    var t = new Array;
    aBalls = new Array,
    aHoles = new Array;
    for (var a = 0; a < aLevelData[levelNum].aData.length; a++)
        if ("cueBall" == aLevelData[levelNum].aData[a].type)
            cueBall = new Elements.Ball(assetLib.getData("ball"),assetLib.getData("scoreNumbers"),{
                id: "cueBall",
                type: "cueBall",
                x: aLevelData[levelNum].aData[a].p0.x,
                y: aLevelData[levelNum].aData[a].p0.y
            },ballCallback,canvas.width,canvas.height),
            aBalls.push(cueBall);
        else if ("hole" == aLevelData[levelNum].aData[a].type)
            aHoles.push({
                x: aLevelData[levelNum].aData[a].p0.x,
                y: aLevelData[levelNum].aData[a].p0.y
            });
        else if ("ball" == aLevelData[levelNum].aData[a].type) {
            var e = new Elements.Ball(assetLib.getData("ball"),assetLib.getData("scoreNumbers"),{
                id: "ball" + a,
                type: "ball",
                x: aLevelData[levelNum].aData[a].p0.x,
                y: aLevelData[levelNum].aData[a].p0.y
            },ballCallback,canvas.width,canvas.height);
            aBalls.push(e)
        } else
            "wall" == aLevelData[levelNum].aData[a].type && t.push({
                p0: aLevelData[levelNum].aData[a].p0,
                p1: aLevelData[levelNum].aData[a].p1,
                b: 1,
                f: 1
            });
    oPosData = {
        prevBallX: cueBall.oData.x,
        prevBallY: cueBall.oData.y,
        stageX: -(levelWidth - canvas.width) / 2,
        stageY: -(levelHeight - canvas.height) / 2,
        targStageX: -(levelWidth - canvas.width) / 2,
        targStageY: -(levelHeight - canvas.height) / 2,
        startDragX: 0,
        startDragY: 0,
        startStageX: 0,
        startStageY: 0
    },
    linePredictor = new Utils.LinePredictor(t,aBalls,cueBall),
    table = new Elements.Table(assetLib.getData("table"),canvas.width,canvas.height),
    arrow = new Elements.Arrow(assetLib.getData("arrow"),assetLib.getData("cue"),canvas.width,canvas.height),
    aimX = targAimX = cueBall.startX,
    aimY = targAimY = cueBall.startY + oPosData.stageY,
    isBreakOff = !0,
    oBonusData = {
        secType: 0,
        x: 0,
        y: 0,
        scale: 1,
        life: 0
    },
    physics2D = new Utils.Physics2D(t,aBalls),
    hideNewRackIntro(this),
    playSound("rack"),
    previousTime = (new Date).getTime(),
    updateGameEvent()
}

function initNewRack() {
    console.log('initNewRack'),
    levelNum = (levelNum + 1) % aLevelData.length,
    hud.oData.racks++,
    gameTimer += 15,
    aBalls = new Array;
    for (var t = 0; t < aLevelData[levelNum].aData.length; t++)
        if ("cueBall" == aLevelData[levelNum].aData[t].type)
            cueBall = new Elements.Ball(assetLib.getData("ball"),assetLib.getData("scoreNumbers"),{
                id: "cueBall",
                type: "cueBall",
                x: aLevelData[levelNum].aData[t].p0.x,
                y: aLevelData[levelNum].aData[t].p0.y
            },ballCallback,canvas.width,canvas.height),
            aBalls.push(cueBall);
        else if ("ball" == aLevelData[levelNum].aData[t].type) {
            var a = new Elements.Ball(assetLib.getData("ball"),assetLib.getData("scoreNumbers"),{
                id: "ball" + t,
                type: "ball",
                x: aLevelData[levelNum].aData[t].p0.x,
                y: aLevelData[levelNum].aData[t].p0.y
            },ballCallback,canvas.width,canvas.height);
            aBalls.push(a)
        }
    console.log(levelNum, aBalls.length),
    gameTouchState = 0,
    oPosData = {
        prevBallX: cueBall.oData.x,
        prevBallY: cueBall.oData.y,
        stageX: -(levelWidth - canvas.width) / 2,
        stageY: -(levelHeight - canvas.height) / 2,
        targStageX: -(levelWidth - canvas.width) / 2,
        targStageY: -(levelHeight - canvas.height) / 2,
        startDragX: 0,
        startDragY: 0,
        startStageX: 0,
        startStageY: 0
    },
    aimX = targAimX = cueBall.startX,
    aimY = targAimY = cueBall.startY + oPosData.stageY,
    isBreakOff = !0,
    oBonusData = {
        secType: 0,
        x: 0,
        y: 0,
        scale: 1,
        life: 0
    },
    arrow.renderFunc = arrow.renderAim,
    linePredictor.aBalls = aBalls,
    linePredictor.cueBall = cueBall,
    physics2D.aBalls = aBalls,
    showNewRackIntro(),
    playSound("rack"),
    _showad()
}

function showNewRackIntro() {
    newRackStart = !0,
    newRackY = -400,
    TweenLite.to(this, .5, {
        newRackY: 0,
        ease: "Back.easeOut",
        onComplete: hideNewRackIntro,
        onCompleteParams: [this]
    })
}
function hideNewRackIntro(t) {
    newRackStart = !0,
    newRackY = 0,
    TweenLite.to(t, .5, {
        delay: .5,
        newRackY: 800,
        ease: "Back.easeIn",
        onComplete: function() {
            newRackStart = !1
        }
    })
}
function butEventHandler(t, a) {
    switch (t) {
    case "langSelect":
        curLang = a.lang,
        ctx.clearRect(0, 0, canvas.width, canvas.height),
        userInput.removeHitArea("langSelect"),
        initLoadAssets();
        break;
    case "showTutorial":
        playSound("hit1"),
        userInput.removeHitArea("showTutorial"),
        userInput.removeHitArea("moreGames"),
        userInput.removeHitArea("credits"),
        initTutorial();
        break;
    case "credits":
        playSound("hit1"),
        userInput.removeHitArea("showTutorial"),
        userInput.removeHitArea("moreGames"),
        userInput.removeHitArea("credits"),
        initCreditsScreen();
        break;
    case "startGame":
        playSound("hit1"),
        userInput.removeHitArea("startGame"),
        initGame();
        break;
    case "backFromCredits":
        playSound("hit1"),
        userInput.removeHitArea("backFromCredits"),
        initStartScreen();
        break;
    case "moreGames":
    case "moreGamesFromPause":
        if (playSound("hit1"),
        null == window.famobi.__("more_games_url"))
            break;
        document.location.href = window.famobi.__("more_games_url");
        break;
    case "gameTouch":
        if (gameTouchState >= 3)
            return;
        if (a.isBeingDragged && !a.hasLeft)
            2 == gameTouchState && (targAimX = a.x,
            targAimY = a.y),
            arrow.alpha = 1;
        else if (a.isDown)
            TweenLite.killTweensOf(oPosData),
            toggleHudButs(!1),
            a.x < cueBall.x + 40 && a.x > cueBall.x - 40 && a.y < cueBall.y + 40 && a.y > cueBall.y - 40 && (gameTouchState = 2,
            aimX = targAimX = a.x,
            aimY = targAimY = a.y,
            cueBall.changeState("aiming")),
            arrow.alpha = a.hasLeft ? .5 : 1;
        else {
            if (toggleHudButs(!0),
            2 == gameTouchState && arrow.scaleX > .05)
                return gameTouchState = 3,
                arrow.takeShot(cueBall),
                void playSound(arrow.scaleX < .5 ? "hit1" : arrow.scaleX < .8 ? "hit2" : "hit3");
            gameTouchState = 0,
            "waiting" != cueBall.state && cueBall.changeState("waiting")
        }
        break;
    case "quitFromEndLevel":
        playSound("hit1"),
        userInput.removeHitArea("quitFromEndLevel"),
        userInput.removeHitArea("nextGame"),
        userInput.removeHitArea("moreGames"),
        initStartScreen();
        break;
    case "nextGame":
        playSound("hit1"),
        userInput.removeHitArea("quitFromEndLevel"),
        userInput.removeHitArea("nextGame"),
        userInput.removeHitArea("moreGames"),
        initGame();
        break;
    case "mute":
        playSound("hit1"),
        toggleMute();
        break;
    case "pause":
    case "resumeFromPause":
        playSound("hit1"),
        toggleManualPause();
        break;
    case "quitFromPause":
        playSound("hit1"),
        toggleManualPause(),
        userInput.removeHitArea("pause"),
        userInput.removeHitArea("gameTouch"),
        userInput.removeHitArea("quitFromPause"),
        userInput.removeHitArea("resumeFromPause"),
        userInput.removeHitArea("moreGamesFromPause"),
        initStartScreen()
    }
}
function updateScore(t) {
    hud.oData.score += t
}

function initGameEnd() {
    console.log('initGameEnd'),
    gameState = "gameEnd",
    1 == audioType && (musicTween.kill(),
    musicTween = TweenLite.to(music, 2, {
        volume: .5,
        ease: "Linear.easeNone"
    })),
    playSound("gameEnd"),
    userInput.removeHitArea("pause"),
    userInput.removeHitArea("gameTouch");
    var t = {
        oImgData: assetLib.getData("uiButs"),
        aPos: [345, 715],
        id: "play"
    }
      , a = {
        oImgData: assetLib.getData("uiButs"),
        aPos: [120, 745],
        id: "quit"
    };
    userInput.addHitArea("quitFromEndLevel", butEventHandler, null, "image", a),
    userInput.addHitArea("nextGame", butEventHandler, null, "image", t);
    var e = new Array(t,a);
    panel = new Elements.Panel(assetLib.getData("panels"),assetLib.getData("scoreNumbers"),gameState,e,canvas.width,canvas.height),
    panel.oScoreData = hud.oData,
    panel.startTweenEndLevel();
    try {
        window.famobi.submitHighscore("", hud.oData.score)
    } catch (i) {}
    previousTime = (new Date).getTime(),
    updateGameEndEvent(),
    _showad()
}
function isNearHole(t, a) {
    var e = t.trackX - a.x
      , i = t.trackY - a.y
      , s = e * e + i * i;
    return 750 > s ? ("cueBall" != t.oData.type ? (curPotScore = 10 * hud.oData.multiplier,
    hud.oData.score += curPotScore,
    ++streak > hud.oData.streak && (hud.oData.streak = streak),
    hud.oData.multiplier += 1,
    gameTimer += 5,
    shotsSinceLastPot = 0,
    hud.oData.balls++) : (hud.oData.multiplier = 10,
    gameTimer -= 10),
    !0) : !1
}
function toggleHudButs(t) {
    t ? (userInput.addHitArea("mute", butEventHandler, null, "rect", {
        aRect: [420, 0, canvas.width, 55]
    }, !0),
    userInput.addHitArea("pause", butEventHandler, null, "rect", {
        aRect: [0, 0, 55, 55]
    }, !0),
    userInput.addHitArea("gameTouch", butEventHandler, {
        isDraggable: !0,
        multiTouch: !0
    }, "rect", {
        aRect: [0, 0, canvas.width, canvas.height]
    }, !0)) : (userInput.removeHitArea("mute"),
    userInput.removeHitArea("pause"))
}
function ballCallback(t, a) {
    switch ("undefined" == typeof a && (a = null),
    t) {
    case "moveEnded":
        for (var e = !0, i = 0; i < aBalls.length; i++)
            if ("moving" == aBalls[i].state) {
                e = !1;
                break
            }
        if (e) {
            for (var s = !0, i = 0; i < aBalls.length; i++)
                if ("waiting" == aBalls[i].state && "cueBall" != aBalls[i].oData.type || 1 == aBalls.length) {
                    s = !1;
                    break
                }
            if (s)
                return;
            for (var i = 0; i < aBalls.length; i++)
                "waiting" == aBalls[i].state && "cueBall" == aBalls[i].oData.type && aBalls[i].changeState("indicating");
            aimX = targAimX = cueBall.x,
            aimY = targAimY = cueBall.y,
            arrow.renderFunc = arrow.renderAim,
            gameTouchState = 0,
            playSound("highlight"),
            oPosData.prevBallX = cueBall.trackX,
            oPosData.prevBallY = cueBall.trackY,
            shotsSinceLastPot > 0 && (hud.oData.multiplier = 10,
            streak = 0),
            setRandomBonus(),
            shotsSinceLastPot++
        }
        break;
    case "holeEnded":
        for (var i = 0; i < aBalls.length; i++)
            if (aBalls[i].removeMe) {
                if (!("cueBall" == aBalls[i].oData.type && aBalls.length > 1)) {
                    aBalls.splice(i, 1);
                    break
                }
                for (var o = !1, r = 0, n = aBalls[i].startX, h = aBalls[i].startY; !o; ) {
                    for (var l = 0; l < aBalls.length; l++) {
                        if (n > aBalls[l].trackX - aBalls[l].radius && n < aBalls[l].trackX + aBalls[l].radius && h > aBalls[l].trackY - aBalls[l].radius && h < aBalls[l].trackY + aBalls[l].radius) {
                            n = aBalls[i].startX + 160 * Math.random() - 80,
                            h = aBalls[i].startY + 160 * Math.random() - 80,
                            o = !1;
                            break
                        }
                        o = !0
                    }
                    ++r >= 200 && (o = !0)
                }
                aBalls[i].changeState("reset", {
                    x: n,
                    y: h
                }),
                aBalls[i].changeState("indicating"),
                aimX = targAimX = cueBall.x,
                aimY = targAimY = cueBall.y
            }
        1 == aBalls.length && initNewRack()
    }
}
function setRandomBonus() {
    if (0 == oBonusData.secType) {
        if (5 * Math.random() < 1) {
            oBonusData.secType = Math.ceil(3 * Math.random()),
            oBonusData.scale = 0,
            oBonusData.life = Math.ceil(3 * Math.random()) + 1;
            for (var t = !1, a = 0, e = 160 * Math.random() + 160, i = 480 * Math.random() + 160; !t; ) {
                if (e > cueBall.x - 70 && e < cueBall.x + 70 && i > cueBall.y - 70 && i < cueBall.x + 70) {
                    e = 160 * Math.random() + 160,
                    i = 480 * Math.random() + 160,
                    t = !1;
                    break
                }
                t = !0,
                ++a >= 200 && (t = !0)
            }
            oBonusData.x = e,
            oBonusData.y = i,
            TweenLite.to(oBonusData, 1, {
                scale: 1,
                ease: "Elastic.easeOut"
            })
        }
    } else
        --oBonusData.life <= 0 && TweenLite.to(oBonusData, .5, {
            scale: 0,
            ease: "Quad.easeIn",
            onComplete: function() {
                oBonusData.secType = 0
            }
        })
}
function updateGameEvent() {
    if (!manualPause && !rotatePause && "game" == gameState) {
        var t = getDelta();
        if (2 == gameTouchState ? (aimX = targAimX,
        aimY = targAimY) : oPosData.targStageY = 0,
        table.update(oPosData.stageX, oPosData.stageY, t),
        table.render(ctx),
        3 == gameTouchState && physics2D.update(t),
        gameTimer -= t,
        hud.setTime(gameTimer),
        0 > gameTimer && initGameEnd(),
        oBonusData.secType > 0) {
            var a = oBonusData.secType - 1
              , e = assetLib.getData("bonus")
              , i = a * e.oData.spriteWidth % e.img.width
              , s = Math.floor(a / (e.img.width / e.oData.spriteWidth)) * e.oData.spriteHeight;
            ctx.drawImage(e.img, i, s, e.oData.spriteWidth, e.oData.spriteHeight, oBonusData.x - e.oData.spriteWidth / 2 * oBonusData.scale, oBonusData.y - e.oData.spriteHeight / 2 * oBonusData.scale, e.oData.spriteWidth * oBonusData.scale, e.oData.spriteHeight * oBonusData.scale),
            oBonusData.secType < 4 && cueBall.x > oBonusData.x - 35 && cueBall.x < oBonusData.x + 35 && cueBall.y > oBonusData.y - 35 && cueBall.y < oBonusData.y + 35 && (gameTimer += 5 * oBonusData.secType,
            oBonusData.secType = 4,
            oBonusData.scale = 3,
            TweenLite.to(oBonusData, .3, {
                scale: 0,
                ease: "Cubic.easeOut",
                onComplete: function() {
                    oBonusData.secType = 0
                }
            }),
            playSound("score"))
        }
        for (var o = 0; o < aBalls.length; o++) {
            for (var r = 0; r < aHoles.length; r++)
                if ("moving" == aBalls[o].state && isNearHole(aBalls[o], aHoles[r])) {
                    playSound("pot" + Math.ceil(3 * Math.random())),
                    aBalls[o].changeState("holed", {
                        x: aHoles[r].x,
                        y: aHoles[r].y,
                        score: curPotScore
                    });
                    break
                }
            aBalls[o].update(oPosData.stageX, oPosData.stageY, t),
            renderSprite(aBalls[o])
        }
        if (3 != gameTouchState && arrow.update(cueBall.x, cueBall.y, aimX, aimY, linePredictor.checkLine(cueBall.x, cueBall.y, aimX, aimY, oPosData.stageY), t),
        arrow.render(ctx),
        newRackStart) {
            var e = assetLib.getData("panels")
              , a = 4;
            levelNum > 0 && (a = 5);
            var i = a * e.oData.spriteWidth % e.img.width
              , s = Math.floor(a / (e.img.width / e.oData.spriteWidth)) * e.oData.spriteHeight;
            ctx.drawImage(e.img, i, s, e.oData.spriteWidth, e.oData.spriteHeight, 0, 0 + newRackY, e.oData.spriteWidth, e.oData.spriteHeight)
        }
        hud.update(oPosData.stageX, oPosData.stageY, t),
        hud.render(ctx),
        renderMuteBut(),
        requestAnimFrame(updateGameEvent)
    }
}
function updateCreditsScreenEvent() {
    if (!rotatePause && "credits" == gameState) {
        var t = getDelta();
        panel.update(t),
        panel.render(ctx),
        renderMuteBut(),
        requestAnimFrame(updateCreditsScreenEvent)
    }
}
function updateGameEndEvent() {
    if (!rotatePause && "gameEnd" == gameState) {
        var t = getDelta();
        background.updateScroll(t),
        background.renderScroll(ctx),
        panel.update(t),
        panel.render(ctx),
        renderMuteBut(),
        requestAnimFrame(updateGameEndEvent)
    }
}
function updateSplashScreenEvent() {
    if (!rotatePause && "splash" == gameState) {
        var t = getDelta();
        if (splashTimer += t,
        splashTimer > 2.5)
            return 1 != audioType || muted || music.play(),
            void initStartScreen();
        splash.render(ctx, t),
        requestAnimFrame(updateSplashScreenEvent)
    }
}
function updateStartScreenEvent() {
    if (!rotatePause && "start" == gameState) {
        var t = getDelta();
        background.updateScroll(t),
        background.renderScroll(ctx),
        panel.update(t),
        panel.render(ctx),
        renderMuteBut(),
        requestAnimFrame(updateStartScreenEvent)
    }
}
function updateTutorialEvent() {
    if (!rotatePause && "tutorial" == gameState) {
        var t = getDelta();
        background.updateScroll(t),
        background.renderScroll(ctx),
        panel.update(t),
        panel.render(ctx),
        renderMuteBut(),
        requestAnimFrame(updateTutorialEvent)
    }
}
function getDelta() {
    var t = (new Date).getTime()
      , a = (t - previousTime) / 1e3;
    return previousTime = t,
    a > .5 && (a = 0),
    a
}
function renderSprite(t) {
    ctx.save(),
    ctx.translate(t.x, t.y),
    ctx.rotate(t.rotation),
    ctx.globalAlpha = t.alpha,
    ctx.scale(t.scaleX, t.scaleY),
    t.render(ctx),
    ctx.restore()
}
function checkSpriteCollision(t, a) {
    var e = t.x
      , i = t.y
      , s = a.x
      , o = a.y
      , r = (e - s) * (e - s) + (i - o) * (i - o)
      , n = t.radius * a.radius;
    return n > r ? !0 : !1
}
function getScaleImageToMax(t, a) {
    var e;
    return e = t.isSpriteSheet ? a[0] / t.oData.spriteWidth < a[1] / t.oData.spriteHeight ? Math.min(a[0] / t.oData.spriteWidth, 1) : Math.min(a[1] / t.oData.spriteHeight, 1) : a[0] / t.img.width < a[1] / t.img.height ? Math.min(a[0] / t.img.width, 1) : Math.min(a[1] / t.img.height, 1)
}
function getCentreFromTopLeft(t, a, e) {
    var i = new Array;
    return i.push(t[0] + a.oData.spriteWidth / 2 * e),
    i.push(t[1] + a.oData.spriteHeight / 2 * e),
    i
}
function loadPreAssets() {
    aLangs.length > 1 ? (preAssetLib = new Utils.AssetLoader(curLang,[{
        id: "langSelect",
        file: "images/langSelect.jpg"
    }, {
        id: "preloadImage",
        file: "images/preloadImage.jpg"
    }],ctx,canvas.width,canvas.height,!1),
    preAssetLib.onReady(initLangSelect)) : (curLang = aLangs[0],
    preAssetLib = new Utils.AssetLoader(curLang,[{
        id: "preloadImage",
        file: "images/preloadImage.jpg"
    }],ctx,canvas.width,canvas.height,!1),
    preAssetLib.onReady(initLoadAssets))
}
function initLangSelect() {
    var t = preAssetLib.getData("langSelect");
    ctx.drawImage(t.img, canvas.width / 2 - t.img.width / 2, canvas.height / 2 - t.img.height / 2);
    for (var a = 140, e = 0; e < aLangs.length; e++) {
        var i = canvas.width / 2 - a * aLangs.length / 2 + e * a
          , s = canvas.height / 2 - a / 2;
        userInput.addHitArea("langSelect", butEventHandler, {
            lang: aLangs[e]
        }, "rect", {
            aRect: [i, s, i + a, s + 140]
        })
    }
}
function initLoadAssets() {
    var t = preAssetLib.getData("preloadImage");
    ctx.drawImage(t.img, 0, 0),
    loadAssets()
}
function loadAssets() {
    assetLib = new Utils.AssetLoader(curLang,[{
        id: "rotateDeviceMessage",
        file: "images/rotateDeviceMessage.jpg"
    }, {
        id: "background",
        file: "images/background.jpg"
    }, {
        id: "hud",
        file: "images/hud.png"
    }, {
        id: "uiButs",
        file: window.famobi.__("uiButs.png"),
        oAtlasData: {
            play: {
                x: 0,
                y: 0,
                width: 269,
                height: 161
            },
            credits: {
                x: 225,
                y: 163,
                width: 0,
                height: 0
            },
            quit: {
                x: 0,
                y: 273,
                width: 223,
                height: 108
            },
            moreGames: {
                x: 0,
                y: 163,
                width: 223,
                height: 108
            },
            back: {
                x: 225,
                y: 273,
                width: 172,
                height: 102
            }
        }
    }, {
        id: "panels",
        file: window.famobi.__("panels_480x800.png")
    }, {
        id: "tableNumbers",
        file: "images/tableNumbers_14x22.png"
    }, {
        id: "timeNumbers",
        file: "images/timeNumbers_15x22.png"
    }, {
        id: "scoreNumbers",
        file: "images/scoreNumbers_40x51.png"
    }, {
        id: "muteBut",
        file: "images/mute_59x61.png"
    }, {
        id: "bonus",
        file: window.famobi.__("bonus_72x76.png")
    }, {
        id: "moreGamesBut",
        file: window.famobi.__("more_games_image")
    }, {
        id: "ball",
        file: "images/balls_118x118.png",
        oAnims: {
            cueBallWaiting: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19],
            cueBallMoving: [19],
            ball0Waiting: [20],
            ball1Waiting: [21],
            ball2Waiting: [22],
            ball3Waiting: [23],
            ball4Waiting: [24],
            ball5Waiting: [25],
            ball6Waiting: [26],
            ball7Waiting: [27],
            ball8Waiting: [28],
            ball0Moving: [20],
            ball1Moving: [21],
            ball2Moving: [22],
            ball3Moving: [23],
            ball4Moving: [24],
            ball5Moving: [25],
            ball6Moving: [26],
            ball7Moving: [27],
            ball8Moving: [28],
            explode: [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
        }
    }, {
        id: "table",
        file: window.famobi.__("table.jpg")
    }, {
        id: "cue",
        file: "images/cue.png"
    }, {
        id: "arrow",
        file: "images/arrow_200x27.png"
    }],ctx,canvas.width,canvas.height),
    assetLib.onReady(initSplash)
}
function resizeCanvas() {
    var t = window.innerWidth
      , a = window.innerHeight;
    t > 480 && (t -= 1,
    a -= 1),
    window.innerWidth > window.innerHeight && isMobile ? ("loading" != gameState && rotatePauseOn(),
    t / canvas.width < a / canvas.height ? (canvas.style.width = t + "px",
    canvas.style.height = t / canvas.width * canvas.height + "px",
    canvasX = 0,
    canvasY = (a - t / canvas.width * canvas.height) / 2,
    canvasScaleX = canvasScaleY = canvas.width / t,
    div.style.marginTop = canvasY + "px",
    div.style.marginLeft = canvasX + "px") : (canvas.style.width = a / canvas.height * canvas.width + "px",
    canvas.style.height = a + "px",
    canvasX = (t - a / canvas.height * canvas.width) / 2,
    canvasY = 0,
    canvasScaleX = canvasScaleY = canvas.height / a,
    div.style.marginTop = canvasY + "px",
    div.style.marginLeft = canvasX + "px")) : isMobile ? (rotatePause && rotatePauseOff(),
    t / canvas.width < a / canvas.height ? (canvas.style.width = t + "px",
    canvas.style.height = t / canvas.width * canvas.height + "px",
    canvasX = 0,
    canvasY = (a - t / canvas.width * canvas.height) / 2,
    canvasScaleX = canvasScaleY = canvas.width / t,
    div.style.marginTop = canvasY + "px",
    div.style.marginLeft = canvasX + "px") : (canvas.style.width = a / canvas.height * canvas.width + "px",
    canvas.style.height = a + "px",
    canvasX = (t - a / canvas.height * canvas.width) / 2,
    canvasY = 0,
    canvasScaleX = canvasScaleY = canvas.height / a,
    div.style.marginTop = canvasY + "px",
    div.style.marginLeft = canvasX + "px")) : (rotatePause && rotatePauseOff(),
    t / canvas.width < a / canvas.height ? (canvas.style.width = t + "px",
    canvas.style.height = t / canvas.width * canvas.height + "px",
    canvasX = 0,
    canvasY = (a - t / canvas.width * canvas.height) / 2,
    canvasScaleX = canvasScaleY = canvas.width / t,
    div.style.marginTop = canvasY + "px",
    div.style.marginLeft = canvasX + "px") : (canvas.style.width = a / canvas.height * canvas.width + "px",
    canvas.style.height = a + "px",
    canvasX = (t - a / canvas.height * canvas.width) / 2,
    canvasY = 0,
    canvasScaleX = canvasScaleY = canvas.height / a,
    div.style.marginTop = canvasY + "px",
    div.style.marginLeft = canvasX + "px")),
    userInput.setCanvas(canvasX, canvasY, canvasScaleX, canvasScaleY)
}
function playSound(t, a) {
    "undefined" == typeof a && (a = 1),
    1 == audioType && (sound.volume(a),
    sound.play(t))
}
function toggleMute() {
    muted = !muted,
    1 == audioType ? muted ? Howler.mute() : Howler.unmute() : 2 == audioType && (muted ? music.pause() : music.play()),
    renderMuteBut()
}
function renderMuteBut() {
    if (0 != audioType) {
        var t = assetLib.getData("muteBut")
          , a = 0;
        muted && (a = 1);
        var e = a * t.oData.spriteWidth % t.img.width
          , i = Math.floor(a / (t.img.width / t.oData.spriteWidth)) * t.oData.spriteHeight;
        ctx.drawImage(t.img, e, i, t.oData.spriteWidth, t.oData.spriteHeight, 422, 3, t.oData.spriteWidth, t.oData.spriteHeight)
    }
}
function toggleManualPause() {
    if (manualPause)
        manualPause = !1,
        userInput.removeHitArea("quitFromPause"),
        userInput.removeHitArea("resumeFromPause"),
        userInput.removeHitArea("moreGamesFromPause"),
        pauseCoreOff();
    else {
        manualPause = !0,
        pauseCoreOn();
        var t = {
            oImgData: assetLib.getData("uiButs"),
            aPos: [canvas.width / 2, canvas.height / 2],
            id: "play"
        }
          , a = {
            oImgData: assetLib.getData("moreGamesBut"),
            aPos: [355, 550],
            id: "none",
            scale: .3,
            noFloat: !0
        }
          , e = {
            oImgData: assetLib.getData("uiButs"),
            aPos: [120, 550],
            id: "quit"
        }
          , i = new Array(e,t,a);
        userInput.addHitArea("quitFromPause", butEventHandler, null, "image", e),
        userInput.addHitArea("moreGamesFromPause", butEventHandler, null, "image", a),
        userInput.addHitArea("resumeFromPause", butEventHandler, null, "image", t),
        panel = new Elements.Panel(assetLib.getData("panels"),assetLib.getData("scoreNumbers"),"pause",i,canvas.width,canvas.height),
        panel.render(ctx),
        renderMuteBut(),
        userInput.addHitArea("pause", butEventHandler, null, "rect", {
            aRect: [0, 0, 55, 55]
        }, !0)
    }
}
function rotatePauseOn() {
    rotatePause = !0,
    ctx.drawImage(assetLib.getImg("rotateDeviceMessage"), 0, 0),
    userInput.pauseIsOn = !0,
    pauseCoreOn()
}
function rotatePauseOff() {
    rotatePause = !1,
    userInput.removeHitArea("quitFromPause"),
    userInput.removeHitArea("resumeFromPause"),
    userInput.removeHitArea("moreGamesFromPause"),
    pauseCoreOff()
}
function pauseCoreOn() {
    switch (1 == audioType ? Howler.mute() : 2 == audioType && music.pause(),
    gameState) {
    case "start":
        break;
    case "help":
        break;
    case "game":
        userInput.removeHitArea("gameTouch");
        break;
    case "end":
    }
}
function pauseCoreOff() {
    switch (1 == audioType ? muted || Howler.unmute() : 2 == audioType && (muted || music.play()),
    previousTime = (new Date).getTime(),
    userInput.pauseIsOn = !1,
    gameState) {
    case "splash":
        updateSplashScreenEvent();
        break;
    case "start":
        initStartScreen();
        break;
    case "tutorial":
        initTutorial();
        break;
    case "credits":
        initCreditsScreen();
        break;
    case "game":
        manualPause = !1,
        userInput.addHitArea("gameTouch", butEventHandler, {
            isDraggable: !0,
            multiTouch: !0
        }, "rect", {
            aRect: [0, 0, canvas.width, canvas.height]
        }, !0),
        updateGameEvent();
        break;
    case "gameEnd":
        initGameEnd()
    }
}
var Utils;
!function(t) {
    var a = function() {
        function t(t, a, e, i, s, o) {
            "undefined" == typeof o && (o = !0),
            this.oAssetData = {},
            this.assetsLoaded = 0,
            this.totalAssets = a.length,
            this.ctx = e,
            this.canvasWidth = i,
            this.canvasHeight = s,
            this.showBar = o,
            this.topLeftX = this.canvasWidth / 2 - i / 4,
            this.topLeftY = 425,
            this.showBar && (ctx.strokeStyle = "#333646",
            ctx.lineWidth = 2,
            ctx.fillStyle = "#F5A343",
            ctx.moveTo(this.topLeftX, this.topLeftY),
            ctx.lineTo(this.topLeftX + i / 2, this.topLeftY + 0),
            ctx.lineTo(this.topLeftX + i / 2, this.topLeftY + 20),
            ctx.lineTo(this.topLeftX + 0, this.topLeftY + 20),
            ctx.lineTo(this.topLeftX + 0, this.topLeftY + 0),
            ctx.stroke());
            for (var r = 0; r < a.length; r++)
                this.loadImage(a[r])
        }
        return t.prototype.loadImage = function(t) {
            var a = this
              , e = new Image;
            e.onload = function() {
                a.oAssetData[t.id] = {},
                a.oAssetData[t.id].img = e,
                a.oAssetData[t.id].oData = {};
                var i = a.getSpriteSize(t.file);
                0 != i[0] ? (a.oAssetData[t.id].oData.spriteWidth = i[0],
                a.oAssetData[t.id].oData.spriteHeight = i[1]) : (a.oAssetData[t.id].oData.spriteWidth = a.oAssetData[t.id].img.width,
                a.oAssetData[t.id].oData.spriteHeight = a.oAssetData[t.id].img.height),
                t.oAnims && (a.oAssetData[t.id].oData.oAnims = t.oAnims),
                a.oAssetData[t.id].oData.oAtlasData = t.oAtlasData ? t.oAtlasData : {
                    none: {
                        x: 0,
                        y: 0,
                        width: a.oAssetData[t.id].oData.spriteWidth,
                        height: a.oAssetData[t.id].oData.spriteHeight
                    }
                },
                ++a.assetsLoaded,
                a.showBar && ctx.fillRect(a.topLeftX + 2, a.topLeftY + 2, (a.canvasWidth / 2 - 4) / a.totalAssets * a.assetsLoaded, 16),
                a.checkLoadComplete()
            }
            ,
            e.src = t.file
        }
        ,
        t.prototype.getSpriteSize = function(t) {
            for (var a = new Array, e = "", i = "", s = 0, o = t.lastIndexOf("."), r = !0; r; )
                o--,
                0 == s && this.isNumber(t.charAt(o)) ? e = t.charAt(o) + e : 0 == s && e.length > 0 && "x" == t.charAt(o) ? (o--,
                s = 1,
                i = t.charAt(o) + i) : 1 == s && this.isNumber(t.charAt(o)) ? i = t.charAt(o) + i : 1 == s && i.length > 0 && "_" == t.charAt(o) ? (r = !1,
                a = [parseInt(i), parseInt(e)]) : (r = !1,
                a = [0, 0]);
            return a
        }
        ,
        t.prototype.isNumber = function(t) {
            return !isNaN(parseFloat(t)) && isFinite(t)
        }
        ,
        t.prototype.checkLoadComplete = function() {
            this.assetsLoaded == this.totalAssets && this.loadedCallback()
        }
        ,
        t.prototype.onReady = function(t) {
            this.loadedCallback = t
        }
        ,
        t.prototype.getImg = function(t) {
            return this.oAssetData[t].img
        }
        ,
        t.prototype.getData = function(t) {
            return this.oAssetData[t]
        }
        ,
        t
    }();
    t.AssetLoader = a
}(Utils || (Utils = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t, a, e, i) {
            this.x = 0,
            this.y = 0,
            this.rotation = 0,
            this.radius = 10,
            this.removeMe = !1,
            this.frameInc = 0,
            this.animType = "loop",
            this.offsetX = 0,
            this.offsetY = 0,
            this.scaleX = 1,
            this.scaleY = 1,
            this.oImgData = t,
            this.oAnims = this.oImgData.oData.oAnims,
            this.fps = a,
            this.radius = e,
            this.animId = i
        }
        return t.prototype.updateAnimation = function(t) {
            this.frameInc += this.fps * t
        }
        ,
        t.prototype.resetAnim = function() {
            this.frameInc = 0
        }
        ,
        t.prototype.setFrame = function(t) {
            this.fixedFrame = t
        }
        ,
        t.prototype.setAnimType = function(t, a, e) {
            switch ("undefined" == typeof e && (e = !0),
            this.animId = a,
            this.animType = t,
            e && this.resetAnim(),
            t) {
            case "loop":
                break;
            case "once":
                this.maxIdx = this.oAnims[this.animId].length - 1
            }
        }
        ,
        t.prototype.render = function(t) {
            if (null != this.animId) {
                var a = this.oAnims[this.animId].length
                  , e = Math.floor(this.frameInc)
                  , i = this.oAnims[this.animId][e % a]
                  , s = i * this.oImgData.oData.spriteWidth % this.oImgData.img.width
                  , o = Math.floor(i / (this.oImgData.img.width / this.oImgData.oData.spriteWidth)) * this.oImgData.oData.spriteHeight;
                if ("once" == this.animType && e > this.maxIdx) {
                    this.fixedFrame = this.oAnims[this.animId][a - 1],
                    this.animId = null,
                    this.animEndedFunc();
                    var s = this.fixedFrame * this.oImgData.oData.spriteWidth % this.oImgData.img.width
                      , o = Math.floor(this.fixedFrame / (this.oImgData.img.width / this.oImgData.oData.spriteWidth)) * this.oImgData.oData.spriteHeight
                }
            } else
                var s = this.fixedFrame * this.oImgData.oData.spriteWidth % this.oImgData.img.width
                  , o = Math.floor(this.fixedFrame / (this.oImgData.img.width / this.oImgData.oData.spriteWidth)) * this.oImgData.oData.spriteHeight;
            t.drawImage(this.oImgData.img, s, o, this.oImgData.oData.spriteWidth, this.oImgData.oData.spriteHeight, -this.oImgData.oData.spriteWidth / 2 + this.offsetX, -this.oImgData.oData.spriteHeight / 2 + this.offsetY, this.oImgData.oData.spriteWidth, this.oImgData.oData.spriteHeight)
        }
        ,
        t
    }();
    t.AnimSprite = a
}(Utils || (Utils = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t, a, e) {
            "undefined" == typeof e && (e = 0),
            this.x = 0,
            this.y = 0,
            this.rotation = 0,
            this.radius = 10,
            this.removeMe = !1,
            this.offsetX = 0,
            this.offsetY = 0,
            this.scaleX = 1,
            this.scaleY = 1,
            this.oImgData = t,
            this.radius = a,
            this.setFrame(e)
        }
        return t.prototype.setFrame = function(t) {
            this.frameNum = t
        }
        ,
        t.prototype.render = function(t) {
            var a = this.frameNum * this.oImgData.oData.spriteWidth % this.oImgData.img.width
              , e = Math.floor(this.frameNum / (this.oImgData.img.width / this.oImgData.oData.spriteWidth)) * this.oImgData.oData.spriteHeight;
            t.drawImage(this.oImgData.img, a, e, this.oImgData.oData.spriteWidth, this.oImgData.oData.spriteHeight, -this.oImgData.oData.spriteWidth / 2 + this.offsetX, -this.oImgData.oData.spriteHeight / 2 + this.offsetY, this.oImgData.oData.spriteWidth, this.oImgData.oData.spriteHeight)
        }
        ,
        t
    }();
    t.BasicSprite = a
}(Utils || (Utils = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t, a) {
            var e = this;
            this.canvasX = 0,
            this.canvasY = 0,
            this.canvasScaleX = 1,
            this.canvasScaleY = 1,
            this.prevHitTime = 0,
            this.pauseIsOn = !1,
            this.isDown = !1,
            this.isDetectingKeys = !1,
            this.isBugBrowser = a,
            t.addEventListener("touchstart", function(t) {
                for (var a = 0; a < t.changedTouches.length; a++)
                    e.hitDown(t, t.changedTouches[a].pageX, t.changedTouches[a].pageY, t.changedTouches[a].identifier)
            }, !1),
            t.addEventListener("touchend", function(t) {
                for (var a = 0; a < t.changedTouches.length; a++)
                    e.hitUp(t, t.changedTouches[a].pageX, t.changedTouches[a].pageY, t.changedTouches[a].identifier)
            }, !1),
            t.addEventListener("touchmove", function(t) {
                for (var a = 0; a < e.aHitAreas.length; a++)
                    e.move(t, t.changedTouches[a].pageX, t.changedTouches[a].pageY, t.changedTouches[a].identifier, !0)
            }, !1),
            t.addEventListener("mousedown", function(t) {
                e.isDown = !0,
                e.hitDown(t, t.pageX, t.pageY, 1)
            }, !1),
            t.addEventListener("mouseup", function(t) {
                e.isDown = !1,
                e.hitUp(t, t.pageX, t.pageY, 1)
            }, !1),
            t.addEventListener("mousemove", function(t) {
                e.move(t, t.pageX, t.pageY, 1, e.isDown)
            }, !1),
            this.aHitAreas = new Array,
            this.aKeys = new Array
        }
        return t.prototype.setCanvas = function(t, a, e, i) {
            this.canvasX = t,
            this.canvasY = a,
            this.canvasScaleX = e,
            this.canvasScaleY = i
        }
        ,
        t.prototype.hitDown = function(t, a, e, i) {
            if (!this.pauseIsOn) {
                var s = (new Date).getTime();
                if (!(s - this.prevHitTime < 500 && isBugBrowser)) {
                    this.prevHitTime = s,
                    t.preventDefault(),
                    t.stopPropagation(),
                    a = (a - this.canvasX) * this.canvasScaleX,
                    e = (e - this.canvasY) * this.canvasScaleY;
                    for (var o = 0; o < this.aHitAreas.length; o++)
                        if (this.aHitAreas[o].rect && a > this.aHitAreas[o].area[0] && e > this.aHitAreas[o].area[1] && a < this.aHitAreas[o].area[2] && e < this.aHitAreas[o].area[3]) {
                            this.aHitAreas[o].aTouchIdentifiers.push(i),
                            this.aHitAreas[o].oData.hasLeft = !1,
                            this.aHitAreas[o].oData.isDown || (this.aHitAreas[o].oData.isDown = !0,
                            this.aHitAreas[o].oData.x = a,
                            this.aHitAreas[o].oData.y = e,
                            this.aHitAreas[o].callback(this.aHitAreas[o].id, this.aHitAreas[o].oData));
                            break
                        }
                }
            }
        }
        ,
        t.prototype.hitUp = function(t, a, e, i) {
            if (!this.pauseIsOn) {
                t.preventDefault(),
                t.stopPropagation(),
                a = (a - this.canvasX) * this.canvasScaleX,
                e = (e - this.canvasY) * this.canvasScaleY;
                for (var s = 0; s < this.aHitAreas.length; s++)
                    if (this.aHitAreas[s].rect && a > this.aHitAreas[s].area[0] && e > this.aHitAreas[s].area[1] && a < this.aHitAreas[s].area[2] && e < this.aHitAreas[s].area[3]) {
                        for (var o = 0; o < this.aHitAreas[s].aTouchIdentifiers.length; o++)
                            this.aHitAreas[s].aTouchIdentifiers[o] == i && (this.aHitAreas[s].aTouchIdentifiers.splice(o, 1),
                            o -= 1);
                        0 == this.aHitAreas[s].aTouchIdentifiers.length && (this.aHitAreas[s].oData.isDown = !1,
                        this.aHitAreas[s].oData.multiTouch && this.aHitAreas[s].callback(this.aHitAreas[s].id, this.aHitAreas[s].oData));
                        break
                    }
            }
        }
        ,
        t.prototype.move = function(t, a, e, i, s) {
            if (!this.pauseIsOn && s) {
                a = (a - this.canvasX) * this.canvasScaleX,
                e = (e - this.canvasY) * this.canvasScaleY;
                for (var o = 0; o < this.aHitAreas.length; o++)
                    if (this.aHitAreas[o].rect)
                        if (a > this.aHitAreas[o].area[0] && e > this.aHitAreas[o].area[1] && a < this.aHitAreas[o].area[2] && e < this.aHitAreas[o].area[3])
                            this.aHitAreas[o].oData.hasLeft = !1,
                            this.aHitAreas[o].oData.isDown || (this.aHitAreas[o].oData.isDown = !0,
                            this.aHitAreas[o].oData.x = a,
                            this.aHitAreas[o].oData.y = e,
                            this.aHitAreas[o].aTouchIdentifiers.push(i),
                            this.aHitAreas[o].oData.multiTouch && this.aHitAreas[o].callback(this.aHitAreas[o].id, this.aHitAreas[o].oData)),
                            this.aHitAreas[o].oData.isDraggable && (this.aHitAreas[o].oData.isBeingDragged = !0,
                            this.aHitAreas[o].oData.x = a,
                            this.aHitAreas[o].oData.y = e,
                            this.aHitAreas[o].callback(this.aHitAreas[o].id, this.aHitAreas[o].oData),
                            this.aHitAreas[o].oData.isBeingDragged = !1);
                        else if (this.aHitAreas[o].oData.isDown && !this.aHitAreas[o].oData.hasLeft) {
                            for (var r = 0; r < this.aHitAreas[o].aTouchIdentifiers.length; r++)
                                this.aHitAreas[o].aTouchIdentifiers[r] == i && (this.aHitAreas[o].aTouchIdentifiers.splice(r, 1),
                                r -= 1);
                            0 == this.aHitAreas[o].aTouchIdentifiers.length && (this.aHitAreas[o].oData.hasLeft = !0,
                            this.aHitAreas[o].oData.multiTouch && this.aHitAreas[o].callback(this.aHitAreas[o].id, this.aHitAreas[o].oData))
                        }
            }
        }
        ,
        t.prototype.keyDown = function(t) {
            for (var a = 0; a < this.aKeys.length; a++)
                t.keyCode == this.aKeys[a].keyCode && (this.aKeys[a].oData.isDown = !0,
                this.aKeys[a].callback(this.aKeys[a].id, this.aKeys[a].oData))
        }
        ,
        t.prototype.keyUp = function(t) {
            for (var a = 0; a < this.aKeys.length; a++)
                t.keyCode == this.aKeys[a].keyCode && (this.aKeys[a].oData.isDown = !1,
                this.aKeys[a].callback(this.aKeys[a].id, this.aKeys[a].oData))
        }
        ,
        t.prototype.addKey = function(t, a, e, i) {
            var s = this;
            this.isDetectingKeys || (window.addEventListener("keydown", function(t) {
                s.keyDown(t)
            }, !1),
            window.addEventListener("keyup", function(t) {
                s.keyUp(t)
            }, !1),
            this.isDetectingKeys = !0),
            null == e && (e = new Object),
            this.aKeys.push({
                id: t,
                callback: a,
                oData: e,
                keyCode: i
            })
        }
        ,
        t.prototype.removeKey = function(t) {
            for (var a = 0; a < this.aKeys.length; a++)
                this.aKeys[a].id == t && (this.aKeys.splice(a, 1),
                a -= 1)
        }
        ,
        t.prototype.addHitArea = function(t, a, e, i, s, o) {
            "undefined" == typeof o && (o = !1),
            null == e && (e = new Object),
            o && this.removeHitArea(t),
            s.scale || (s.scale = 1);
            var r = new Array;
            switch (i) {
            case "image":
                var n;
                n = new Array(s.aPos[0] - s.oImgData.oData.oAtlasData[s.id].width / 2 * s.scale,s.aPos[1] - s.oImgData.oData.oAtlasData[s.id].height / 2 * s.scale,s.aPos[0] + s.oImgData.oData.oAtlasData[s.id].width / 2 * s.scale,s.aPos[1] + s.oImgData.oData.oAtlasData[s.id].height / 2 * s.scale),
                this.aHitAreas.push({
                    id: t,
                    aTouchIdentifiers: r,
                    callback: a,
                    oData: e,
                    rect: !0,
                    area: n
                });
                break;
            case "rect":
                this.aHitAreas.push({
                    id: t,
                    aTouchIdentifiers: r,
                    callback: a,
                    oData: e,
                    rect: !0,
                    area: s.aRect
                })
            }
        }
        ,
        t.prototype.removeHitArea = function(t) {
            for (var a = 0; a < this.aHitAreas.length; a++)
                this.aHitAreas[a].id == t && (this.aHitAreas.splice(a, 1),
                a -= 1)
        }
        ,
        t
    }();
    t.UserInput = a
}(Utils || (Utils = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t) {
            this.updateFreq = 10,
            this.updateInc = 0,
            this.frameAverage = 0,
            this.display = 1,
            this.log = "",
            this.render = function(t) {
                this.frameAverage += this.delta / this.updateFreq,
                ++this.updateInc >= this.updateFreq && (this.updateInc = 0,
                this.display = this.frameAverage,
                this.frameAverage = 0),
                t.textAlign = "left",
                ctx.font = "10px Helvetica",
                t.fillStyle = "#333333",
                t.beginPath(),
                t.rect(0, this.canvasHeight - 15, 40, 15),
                t.closePath(),
                t.fill(),
                t.fillStyle = "#ffffff",
                t.fillText(Math.round(1e3 / (1e3 * this.display)) + " fps " + this.log, 5, this.canvasHeight - 5)
            }
            ,
            this.canvasHeight = t
        }
        return t.prototype.update = function(t) {
            this.delta = t
        }
        ,
        t
    }();
    t.FpsMeter = a
}(Utils || (Utils = {}));
var Elements;
!function(t) {
    var a = function() {
        function t(t, a, e) {
            this.x = 0,
            this.y = 0,
            this.targY = 0,
            this.incY = 0,
            this.posY = 0,
            this.oImgData = t,
            this.canvasWidth = a,
            this.canvasHeight = e
        }
        return t.prototype.updateScroll = function(t) {
            this.incY += 5 * t,
            this.posY -= 8 * this.posY * t
        }
        ,
        t.prototype.renderScroll = function(t) {
            var a = 40;
            t.drawImage(this.oImgData.img, 0, 0);
            for (var e = 0; a > e; e++)
                t.drawImage(this.oImgData.img, e * (this.canvasWidth / a), 0, this.canvasWidth / a, this.canvasHeight, e * (this.canvasWidth / a), 2 * Math.sin(this.incY + e / 5) - this.posY, this.canvasWidth / a, this.canvasHeight)
        }
        ,
        t.prototype.render = function(t) {
            t.drawImage(this.oImgData.img, 0, 0)
        }
        ,
        t
    }();
    t.Background = a
}(Elements || (Elements = {}));
var Elements;
!function(t) {
    var a = function() {
        function t(t, a, e) {
            this.inc = 0,
            this.oSplashScreenImgData = t,
            this.canvasWidth = a,
            this.canvasHeight = e,
            this.posY = -this.canvasHeight,
            TweenLite.to(this, .5, {
                posY: 0
            })
        }
        return t.prototype.render = function(t, a) {
            this.inc += 5 * a,
            t.drawImage(this.oSplashScreenImgData.img, 0, 0 - this.posY)
        }
        ,
        t
    }();
    t.Splash = a
}(Elements || (Elements = {}));
var Elements;
!function(t) {
    var a = function() {
        function t(t, a, e, i, s, o) {
            this.timer = .3,
            this.endTime = 0,
            this.posY = 0,
            this.numberSpace = 28,
            this.incY = 0,
            this.oPanelsImgData = t,
            this.oNumbersImgData = a,
            this.panelType = e,
            this.aButs = i,
            this.canvasWidth = s,
            this.canvasHeight = o
        }
        return t.prototype.update = function(t) {
            this.incY += 5 * t
        }
        ,
        t.prototype.startTween1 = function() {
            this.posY = 800,
            TweenLite.to(this, .8, {
                posY: 0,
                ease: "Back.easeOut"
            })
        }
        ,
        t.prototype.startTween2 = function() {
            this.posY = 800,
            TweenLite.to(this, .5, {
                posY: 0,
                ease: "Quad.easeOut"
            })
        }
        ,
        t.prototype.startTweenEndLevel = function() {
            this.aStarPos = new Array;
            for (var t = 0; t < this.oScoreData.stars; t++)
                this.aStarPos.push({
                    posY: -400,
                    scaleY: 2
                }),
                TweenLite.to(this.aStarPos[t], 1.5, {
                    posY: 0,
                    scaleY: 1,
                    ease: "Bounce.easeOut",
                    delay: .3 * t
                });
            this.posY = 800,
            TweenLite.to(this, .8, {
                posY: 0,
                ease: "Back.easeOut"
            })
        }
        ,
        t.prototype.render = function(t, a) {
            switch ("undefined" == typeof a && (a = !0),
            a || this.addButs(t),
            this.panelType) {
            case "start":
                var e = 0
                  , i = e * this.oPanelsImgData.oData.spriteWidth % this.oPanelsImgData.img.width
                  , s = Math.floor(e / (this.oPanelsImgData.img.width / this.oPanelsImgData.oData.spriteWidth)) * this.oPanelsImgData.oData.spriteHeight;
                t.drawImage(this.oPanelsImgData.img, i, s, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight, 0, 0 + this.posY, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight);
                break;
            case "credits":
                var e = 3
                  , i = e * this.oPanelsImgData.oData.spriteWidth % this.oPanelsImgData.img.width
                  , s = Math.floor(e / (this.oPanelsImgData.img.width / this.oPanelsImgData.oData.spriteWidth)) * this.oPanelsImgData.oData.spriteHeight;
                t.drawImage(this.oPanelsImgData.img, i, s, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight, 0, 0 + this.posY, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight);
                break;
            case "gameEnd":
                var e = 2
                  , i = e * this.oPanelsImgData.oData.spriteWidth % this.oPanelsImgData.img.width
                  , s = Math.floor(e / (this.oPanelsImgData.img.width / this.oPanelsImgData.oData.spriteWidth)) * this.oPanelsImgData.oData.spriteHeight;
                t.drawImage(this.oPanelsImgData.img, i, s, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight, 0, 0 + this.posY, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight);
                for (var o = this.oScoreData.score, r = 0; r < o.toString().length; r++) {
                    e = parseFloat(o.toString().charAt(r));
                    var i = e * this.oNumbersImgData.oData.spriteWidth % this.oNumbersImgData.img.width
                      , s = Math.floor(e / (this.oNumbersImgData.img.width / this.oNumbersImgData.oData.spriteWidth)) * this.oNumbersImgData.oData.spriteHeight;
                    t.drawImage(this.oNumbersImgData.img, i, s, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight, 300 + r * this.numberSpace, 285 + this.posY, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight)
                }
                for (var o = this.oScoreData.racks, r = 0; r < o.toString().length; r++) {
                    e = parseFloat(o.toString().charAt(r));
                    var i = e * this.oNumbersImgData.oData.spriteWidth % this.oNumbersImgData.img.width
                      , s = Math.floor(e / (this.oNumbersImgData.img.width / this.oNumbersImgData.oData.spriteWidth)) * this.oNumbersImgData.oData.spriteHeight;
                    t.drawImage(this.oNumbersImgData.img, i, s, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight, 307 + r * this.numberSpace / 2, 439 + this.posY, this.oNumbersImgData.oData.spriteWidth / 2, this.oNumbersImgData.oData.spriteHeight / 2)
                }
                for (var o = this.oScoreData.balls, r = 0; r < o.toString().length; r++) {
                    e = parseFloat(o.toString().charAt(r));
                    var i = e * this.oNumbersImgData.oData.spriteWidth % this.oNumbersImgData.img.width
                      , s = Math.floor(e / (this.oNumbersImgData.img.width / this.oNumbersImgData.oData.spriteWidth)) * this.oNumbersImgData.oData.spriteHeight;
                    t.drawImage(this.oNumbersImgData.img, i, s, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight, 307 + r * this.numberSpace / 2, 486 + this.posY, this.oNumbersImgData.oData.spriteWidth / 2, this.oNumbersImgData.oData.spriteHeight / 2)
                }
                for (var o = this.oScoreData.streak, r = 0; r < o.toString().length; r++) {
                    e = parseFloat(o.toString().charAt(r));
                    var i = e * this.oNumbersImgData.oData.spriteWidth % this.oNumbersImgData.img.width
                      , s = Math.floor(e / (this.oNumbersImgData.img.width / this.oNumbersImgData.oData.spriteWidth)) * this.oNumbersImgData.oData.spriteHeight;
                    t.drawImage(this.oNumbersImgData.img, i, s, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight, 307 + r * this.numberSpace / 2, 535 + this.posY, this.oNumbersImgData.oData.spriteWidth / 2, this.oNumbersImgData.oData.spriteHeight / 2)
                }
                break;
            case "tutorial":
                var e = 1
                  , i = e * this.oPanelsImgData.oData.spriteWidth % this.oPanelsImgData.img.width
                  , s = Math.floor(e / (this.oPanelsImgData.img.width / this.oPanelsImgData.oData.spriteWidth)) * this.oPanelsImgData.oData.spriteHeight;
                t.drawImage(this.oPanelsImgData.img, i, s, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight, 0, 0 + this.posY, this.oPanelsImgData.oData.spriteWidth, this.oPanelsImgData.oData.spriteHeight);
                break;
            case "pause":
                t.fillStyle = "rgba(0, 0, 0, 0.75)",
                t.fillRect(0, 0, this.canvasWidth, this.canvasHeight)
            }
            a && this.addButs(t)
        }
        ,
        t.prototype.addButs = function(t) {
            for (var a = 0; a < this.aButs.length; a++) {
                var e = this.posY
                  , i = 0;
                this.aButs[a].noFloat || (i = 3 * Math.sin(this.incY + 45 * a)),
                this.aButs[a].scale || (this.aButs[a].scale = 1);
                var s = this.aButs[a].oImgData.oData.oAtlasData[this.aButs[a].id].x
                  , o = this.aButs[a].oImgData.oData.oAtlasData[this.aButs[a].id].y
                  , r = this.aButs[a].oImgData.oData.oAtlasData[this.aButs[a].id].width
                  , n = this.aButs[a].oImgData.oData.oAtlasData[this.aButs[a].id].height;
                t.drawImage(this.aButs[a].oImgData.img, s, o, r, n, this.aButs[a].aPos[0] - r / 2 * this.aButs[a].scale + e, this.aButs[a].aPos[1] - n / 2 * this.aButs[a].scale - i, r * this.aButs[a].scale, n * this.aButs[a].scale)
            }
        }
        ,
        t
    }();
    t.Panel = a
}(Elements || (Elements = {}));
var Elements;
!function(t) {
    var a = function() {
        function t(t, a, e, i) {
            this.x = 0,
            this.y = 0,
            this.letterSpace = 13,
            this.prevSecs = 0,
            this.oHudImgData = t,
            this.oTimeNumbersImgData = a,
            this.oTableNumbersImgData = e,
            this.oData = i,
            this.oData.aTime = new Array
        }
        return t.prototype.update = function(t, a) {
            this.x = t,
            this.y = a
        }
        ,
        t.prototype.render = function(t) {
            t.drawImage(this.oHudImgData.img, 0, 0);
            for (var a = 0; a < this.oData.aTime.length; a++) {
                var e = this.oData.aTime[a]
                  , i = e * this.oTimeNumbersImgData.oData.spriteWidth % this.oTimeNumbersImgData.img.width
                  , s = Math.floor(e / (this.oTimeNumbersImgData.img.width / this.oTimeNumbersImgData.oData.spriteWidth)) * this.oTimeNumbersImgData.oData.spriteHeight;
                t.drawImage(this.oTimeNumbersImgData.img, i, s, this.oTimeNumbersImgData.oData.spriteWidth, this.oTimeNumbersImgData.oData.spriteHeight, 245 + a * this.letterSpace, 5 + this.y, this.oTimeNumbersImgData.oData.spriteWidth, this.oTimeNumbersImgData.oData.spriteHeight)
            }
            for (var a = 0; a < this.oData.racks.toString().length; a++) {
                var e = parseFloat(this.oData.racks.toString().charAt(a))
                  , i = e * this.oTableNumbersImgData.oData.spriteWidth % this.oTableNumbersImgData.img.width
                  , s = Math.floor(e / (this.oTableNumbersImgData.img.width / this.oTableNumbersImgData.oData.spriteWidth)) * this.oTableNumbersImgData.oData.spriteHeight;
                t.drawImage(this.oTableNumbersImgData.img, i, s, this.oTableNumbersImgData.oData.spriteWidth, this.oTableNumbersImgData.oData.spriteHeight, 245 + a * this.letterSpace, 61 + this.y, this.oTableNumbersImgData.oData.spriteWidth, this.oTableNumbersImgData.oData.spriteHeight)
            }
            for (var o = Math.floor(this.oData.multiplier), a = 0; a <= o.toString().length; a++) {
                e = parseFloat(o.toString().charAt(a));
                var i = e * this.oTableNumbersImgData.oData.spriteWidth % this.oTableNumbersImgData.img.width
                  , s = Math.floor(e / (this.oTableNumbersImgData.img.width / this.oTableNumbersImgData.oData.spriteWidth)) * this.oTableNumbersImgData.oData.spriteHeight;
                t.drawImage(this.oTableNumbersImgData.img, i, s, this.oTableNumbersImgData.oData.spriteWidth, this.oTableNumbersImgData.oData.spriteHeight, 273 + a * (this.letterSpace + 6), 712 + this.y, this.oTableNumbersImgData.oData.spriteWidth, this.oTableNumbersImgData.oData.spriteHeight)
            }
            for (var a = 0; a < this.oData.score.toString().length; a++) {
                var e = parseFloat(this.oData.score.toString().charAt(a))
                  , i = e * this.oTableNumbersImgData.oData.spriteWidth % this.oTableNumbersImgData.img.width
                  , s = Math.floor(e / (this.oTableNumbersImgData.img.width / this.oTableNumbersImgData.oData.spriteWidth)) * this.oTableNumbersImgData.oData.spriteHeight;
                t.drawImage(this.oTableNumbersImgData.img, i, s, this.oTableNumbersImgData.oData.spriteWidth, this.oTableNumbersImgData.oData.spriteHeight, 245 + a * this.letterSpace, 769 + this.y, this.oTableNumbersImgData.oData.spriteWidth, this.oTableNumbersImgData.oData.spriteHeight)
            }
        }
        ,
        t.prototype.setTime = function(t) {
            var a = Math.floor(t / 60)
              , e = Math.floor((t - 60 * a) / 10)
              , i = Math.floor(t - 60 * a - 10 * e);
            this.oData.aTime = [a, 10, e, i],
            10 > t && i < this.prevSecs && playSound("bell"),
            this.prevSecs = i
        }
        ,
        t
    }();
    t.Hud = a
}(Elements || (Elements = {}));
var Elements;
!function(t) {
    var a = function() {
        function t(t, a, e) {
            this.radian = Math.PI / 180,
            this.oLevelImgData = t,
            this.canvasWidth = a,
            this.canvasHeight = e
        }
        return t.prototype.update = function(t, a) {
            this.x = t,
            this.y = a
        }
        ,
        t.prototype.render = function(t) {
            t.drawImage(this.oLevelImgData.img, -this.x, -this.y, this.canvasWidth, this.canvasHeight, 0, 0, this.canvasWidth, this.canvasHeight)
        }
        ,
        t
    }();
    t.Table = a
}(Elements || (Elements = {}));
var __extends = this.__extends || function(t, a) {
    function e() {
        this.constructor = t
    }
    e.prototype = a.prototype,
    t.prototype = new e
}
, Elements;
!function(t) {
    var a = function(t) {
        function a(a, e, i, s, o, r) {
            t.call(this, a, 24, 26, i.id + "Waiting"),
            this.radian = Math.PI / 180,
            this.angle = 0,
            this.inc = 0,
            this.ballRadius = 14,
            this.vx = 0,
            this.vy = 0,
            this.m = 1,
            this.f = 1,
            this.b = 1,
            this.oNumbersImgData = e,
            this.oData = i,
            this.ballCallback = s,
            this.trackX = this.startX = this.oData.x,
            this.trackY = this.startY = this.oData.y,
            this.p0 = {
                x: this.trackX,
                y: this.trackY
            },
            this.p1 = {
                x: this.trackX,
                y: this.trackY
            },
            this.canvasWidth = o,
            this.canvasHeight = r,
            this.renderFunc = this.renderBall,
            this.changeState("waiting")
        }
        return __extends(a, t),
        a.prototype.changeState = function(t, a) {
            switch ("undefined" == typeof a && (a = null),
            t) {
            case "reset":
                this.fps = 24,
                this.state = "reset",
                this.updateFunc = this.updateWaiting,
                this.renderFunc = this.renderBall,
                this.removeMe = !1,
                this.trackX = a.x,
                this.trackY = a.y,
                this.x = this.trackX,
                this.y = this.trackY,
                this.p0 = {
                    x: this.trackX,
                    y: this.trackY
                },
                this.p1 = {
                    x: this.trackX,
                    y: this.trackY
                },
                this.scaleX = this.scaleY = 1;
                break;
            case "waiting":
                this.state = "waiting",
                this.updateFunc = this.updateWaiting;
                break;
            case "indicating":
                this.state = "indicating",
                this.setAnimType("loop", this.oData.id + "Waiting");
                break;
            case "aiming":
                this.state = "aiming",
                this.updateFunc = this.updateWaiting,
                this.setAnimType("loop", this.oData.id + "Moving");
                break;
            case "moving":
                this.state = "moving",
                this.vx = a.power / 10 * Math.cos(a.angle),
                this.vy = a.power / 10 * Math.sin(a.angle),
                this.vz = 1,
                this.dec = 1,
                this.setAnimType("loop", this.oData.id + "Moving"),
                this.p0 = {
                    x: this.trackX,
                    y: this.trackY
                },
                this.p1 = {
                    x: this.trackX,
                    y: this.trackY
                },
                this.updateFunc = this.updateMoving;
                break;
            case "rebound":
                this.state = "moving",
                this.vz = 1,
                this.dec = 1,
                this.setAnimType("loop", this.oData.id + "Moving"),
                this.p0 = {
                    x: this.trackX,
                    y: this.trackY
                },
                this.p1 = {
                    x: this.trackX,
                    y: this.trackY
                },
                this.updateFunc = this.updateMoving;
                break;
            case "holed":
                this.state = "holed",
                this.oData.score = a.score,
                this.trackX = a.x,
                this.trackY = a.y,
                this.scaleX = this.scaleY = 2,
                this.fps = 18,
                this.setAnimType("once", "explode"),
                this.animEndedFunc = function() {
                    this.ballHoled()
                }
                ,
                this.updateFunc = this.updateWaiting,
                this.renderFunc = this.renderHoling;
                break;
            case "scoring1":
                this.state = "holed",
                this.scaleX = this.scaleY = 1,
                this.scoreX = this.x,
                this.scoreY = this.y - this.oNumbersImgData.oData.spriteHeight / 2,
                this.x = this.y = 0,
                this.scoreScale = .5,
                this.tween = TweenLite.to(this, 1, {
                    scoreY: this.scoreY - 5,
                    scoreScale: 1,
                    ease: "Back.easeOut",
                    onComplete: this.scoreEnded1,
                    onCompleteParams: [this]
                }),
                this.updateFunc = this.updateScoring,
                this.renderFunc = this.renderScoring,
                playSound("score", .5);
                break;
            case "scoring2":
                this.state = "holed",
                this.scoreScale = 1,
                this.tween = TweenLite.to(this, .5, {
                    scoreX: this.canvasWidth + 100,
                    scoreScale: 2,
                    ease: "Back.easeIn",
                    onComplete: this.scoreEnded2,
                    onCompleteParams: [this]
                })
            }
        }
        ,
        a.prototype.moveEnded = function(t) {
            t.changeState("waiting"),
            t.ballCallback("moveEnded")
        }
        ,
        a.prototype.ballHoled = function(t) {
            "undefined" == typeof t && (t = this),
            "cueBall" != t.oData.type ? t.changeState("scoring1") : t.scoreEnded2(t),
            t.ballCallback("moveEnded")
        }
        ,
        a.prototype.scoreEnded1 = function(t) {
            t.changeState("scoring2")
        }
        ,
        a.prototype.scoreEnded2 = function(t) {
            t.removeMe = !0,
            t.ballCallback("holeEnded")
        }
        ,
        a.prototype.update = function(t, a, e) {
            this.updateFunc(t, a, e)
        }
        ,
        a.prototype.updateMoving = function(a, e, i) {
            t.prototype.updateAnimation.call(this, i),
            this.vx *= .98,
            this.vy *= .98,
            Math.abs(this.vx) < .05 && Math.abs(this.vy) < .05 && this.moveEnded(this),
            this.x = this.trackX + a,
            this.y = this.trackY + e
        }
        ,
        a.prototype.updateScoring = function() {}
        ,
        a.prototype.updateWaiting = function(a, e, i) {
            t.prototype.updateAnimation.call(this, i),
            this.x = this.trackX + a,
            this.y = this.trackY + e
        }
        ,
        a.prototype.render = function(t) {
            this.renderFunc(t)
        }
        ,
        a.prototype.renderBall = function(a) {
            t.prototype.render.call(this, a)
        }
        ,
        a.prototype.renderHoling = function(a) {
            t.prototype.render.call(this, a)
        }
        ,
        a.prototype.renderScoring = function(t) {
            for (var a = this.oData.score, e = 0; e < a.toString().length; e++) {
                var i = parseFloat(a.toString().charAt(e));
                isNaN(i) && (i = 10);
                var s = i * this.oNumbersImgData.oData.spriteWidth % this.oNumbersImgData.img.width
                  , o = Math.floor(i / (this.oNumbersImgData.img.width / this.oNumbersImgData.oData.spriteWidth)) * this.oNumbersImgData.oData.spriteHeight;
                t.drawImage(this.oNumbersImgData.img, s, o, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight, this.scoreX + 28 * e - 28 * a.toString().length / 2 - 10, this.scoreY, this.oNumbersImgData.oData.spriteWidth * this.scoreScale, this.oNumbersImgData.oData.spriteHeight / this.scoreScale)
            }
        }
        ,
        a
    }(Utils.AnimSprite);
    t.Ball = a
}(Elements || (Elements = {}));
var Elements;
!function(t) {
    var a = function() {
        function t(t, a, e, i) {
            this.x = 0,
            this.y = 0,
            this.scaleX = 0,
            this.scaleY = 1,
            this.alpha = 1,
            this.maxLength = 100,
            this.oArrowImgData = t,
            this.oCueImgData = a,
            this.canvasWidth = e,
            this.canvasHeight = i,
            this.renderFunc = this.renderAim
        }
        return t.prototype.takeShot = function(t) {
            this.renderFunc = this.renderShot,
            this.shotHyp = this.hyp,
            this.shotRot = this.rotation,
            this.tween = TweenLite.to(this, .15, {
                shotHyp: 0,
                ease: "Quad.easeIn",
                onComplete: this.shotEnded,
                onCompleteParams: [this, t]
            })
        }
        ,
        t.prototype.shotEnded = function(t, a) {
            isBreakOff && (t.hyp *= 1.5,
            isBreakOff = !1),
            a.changeState("moving", {
                power: t.hyp,
                angle: t.shotRot
            })
        }
        ,
        t.prototype.update = function(t, a, e, i, s) {
            this.oLineData = s,
            this.x = t,
            this.y = a,
            this.lengthX = this.x - e,
            this.lengthY = this.y - i,
            this.hyp = Math.min(s.hyp, this.maxLength),
            this.scaleX = Math.min(this.hyp / this.maxLength, 1),
            this.rotation = s.aimRot
        }
        ,
        t.prototype.render = function(t) {
            this.renderFunc(t)
        }
        ,
        t.prototype.renderAim = function(t) {
            if (!(this.scaleX < .1)) {
                if (this.oLineData.targBall) {
                    t.save(),
                    t.globalAlpha = this.alpha - (1 - this.scaleX),
                    t.translate(this.oLineData.targBall.x, this.oLineData.targBall.y),
                    t.rotate(this.oLineData.targBallRot);
                    var a = 2 * this.oArrowImgData.oData.spriteWidth % this.oArrowImgData.img.width
                      , e = Math.floor(2 / (this.oArrowImgData.img.width / this.oArrowImgData.oData.spriteWidth)) * this.oArrowImgData.oData.spriteHeight;
                    t.drawImage(this.oArrowImgData.img, a, e, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight, -this.oArrowImgData.oData.spriteWidth / 2, -this.oArrowImgData.oData.spriteHeight / 2, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight),
                    t.restore(),
                    t.save(),
                    t.globalAlpha = this.alpha - (1 - this.scaleX),
                    t.translate(this.oLineData.bounceX, this.oLineData.bounceY),
                    t.rotate(this.oLineData.bounceRot);
                    var a = 0 * this.oArrowImgData.oData.spriteWidth % this.oArrowImgData.img.width
                      , e = Math.floor(0 / (this.oArrowImgData.img.width / this.oArrowImgData.oData.spriteWidth)) * this.oArrowImgData.oData.spriteHeight;
                    t.drawImage(this.oArrowImgData.img, a, e, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight, -this.oArrowImgData.oData.spriteWidth / 2, -this.oArrowImgData.oData.spriteHeight / 2, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight),
                    t.restore()
                } else {
                    t.save(),
                    t.globalAlpha = this.alpha - (1 - this.scaleX),
                    t.translate(this.oLineData.bounceX, this.oLineData.bounceY),
                    t.rotate(this.oLineData.bounceRot);
                    var a = 3 * this.oArrowImgData.oData.spriteWidth % this.oArrowImgData.img.width
                      , e = Math.floor(3 / (this.oArrowImgData.img.width / this.oArrowImgData.oData.spriteWidth)) * this.oArrowImgData.oData.spriteHeight;
                    t.drawImage(this.oArrowImgData.img, a, e, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight, -this.oArrowImgData.oData.spriteWidth / 2, -this.oArrowImgData.oData.spriteHeight / 2, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight),
                    t.restore()
                }
                var i = this.x - this.oLineData.bounceX
                  , s = this.y - this.oLineData.bounceY
                  , o = Math.sqrt(i * i + s * s);
                t.save(),
                t.globalAlpha = this.alpha - (1 - this.scaleX),
                t.translate(this.x, this.y),
                t.rotate(this.rotation);
                var a = 1 * this.oArrowImgData.oData.spriteWidth % this.oArrowImgData.img.width
                  , e = Math.floor(1 / (this.oArrowImgData.img.width / this.oArrowImgData.oData.spriteWidth)) * this.oArrowImgData.oData.spriteHeight;
                t.drawImage(this.oArrowImgData.img, a, e, this.oArrowImgData.oData.spriteWidth, this.oArrowImgData.oData.spriteHeight, 0, -this.oArrowImgData.oData.spriteHeight / 2, Math.max(o - 13, 1), this.oArrowImgData.oData.spriteHeight),
                t.restore(),
                t.save(),
                t.globalAlpha = this.alpha,
                t.translate(this.x, this.y),
                t.rotate(this.rotation),
                t.drawImage(this.oCueImgData.img, 0, 0, this.oCueImgData.oData.spriteWidth, this.oCueImgData.oData.spriteHeight, -this.hyp - this.oCueImgData.oData.spriteWidth - 5, -this.oCueImgData.oData.spriteHeight / 2, this.oCueImgData.oData.spriteWidth, this.oCueImgData.oData.spriteHeight),
                t.restore()
            }
        }
        ,
        t.prototype.renderShot = function(t) {
            0 != this.shotHyp && (t.save(),
            t.translate(this.x, this.y),
            t.rotate(this.rotation),
            t.drawImage(this.oCueImgData.img, 0, 0, this.oCueImgData.oData.spriteWidth, this.oCueImgData.oData.spriteHeight, -this.shotHyp - this.oCueImgData.oData.spriteWidth - 5, -this.oCueImgData.oData.spriteHeight / 2, this.oCueImgData.oData.spriteWidth, this.oCueImgData.oData.spriteHeight),
            t.restore())
        }
        ,
        t
    }();
    t.Arrow = a
}(Elements || (Elements = {}));
var Elements;
!function(t) {
    var a = function(t) {
        function a(a, e, i, s, o) {
            t.call(this, a, 22, 20, "running"),
            this.canHit = !0,
            this.oNumbersImgData = e,
            this.ballCallback = i,
            this.canvasWidth = s,
            this.canvasHeight = o,
            this.reset(),
            this.frameInc = Math.ceil(100 * Math.random()),
            this.animEndedFunc = this.showScore
        }
        return __extends(a, t),
        a.prototype.reset = function() {
            this.trackX = 550 * Math.random() + 130,
            this.trackY = 247 * Math.random() + 120,
            this.scaleX = this.scaleY = 0,
            this.setAnimType("loop", "running"),
            TweenLite.to(this, .5, {
                scaleX: 1,
                scaleY: 1,
                ease: "Quad.easeOut"
            }),
            this.removeMe = !1,
            this.canHit = !0,
            this.setPos()
        }
        ,
        a.prototype.setPos = function(t) {
            "undefined" == typeof t && (t = this);
            var a = 550 * Math.random() + 130
              , e = 247 * Math.random() + 120;
            t.tween = TweenLite.to(t, 2 * Math.random() + 2, {
                trackX: a,
                trackY: e,
                ease: "Quad.easeInOut",
                onComplete: t.setPos,
                onCompleteParams: [t]
            }),
            t.rotation = Math.atan2(e - t.trackY, a - t.trackX),
            this.updateFunc = this.updateMoving,
            this.renderFunc = this.renderMoving
        }
        ,
        a.prototype.hit = function() {
            this.tween.kill(),
            this.canHit = !1,
            this.setAnimType("once", "explode"),
            this.ballCallback("hitRoach", {
                roach: this
            })
        }
        ,
        a.prototype.showScore = function() {
            this.scoreScale = .5,
            this.y -= 75,
            this.tween = TweenLite.to(this, 1, {
                y: this.y - 5,
                scoreScale: 1,
                ease: "Back.easeOut",
                onComplete: this.scoreEnded1,
                onCompleteParams: [this]
            }),
            this.rotation = 0,
            this.updateFunc = this.updateScoring,
            this.renderFunc = this.renderScoring
        }
        ,
        a.prototype.scoreEnded1 = function(t) {
            "undefined" == typeof t && (t = this),
            t.scoreScale = 1,
            t.tween = TweenLite.to(t, .5, {
                x: t.canvasWidth + 100,
                scoreScale: 2,
                ease: "Back.easeIn",
                onComplete: t.scoreEnded2,
                onCompleteParams: [t]
            })
        }
        ,
        a.prototype.scoreEnded2 = function(t) {
            t.removeMe = !0
        }
        ,
        a.prototype.update = function(t, a, e) {
            this.updateFunc(t, a, e)
        }
        ,
        a.prototype.updateMoving = function(a, e, i) {
            t.prototype.updateAnimation.call(this, i),
            this.x = this.trackX + a,
            this.y = this.trackY + e
        }
        ,
        a.prototype.updateScoring = function() {}
        ,
        a.prototype.render = function(t) {
            this.renderFunc(t)
        }
        ,
        a.prototype.renderMoving = function(a) {
            t.prototype.render.call(this, a)
        }
        ,
        a.prototype.renderScoring = function(t) {
            for (var a = this.roachScore, e = 0; e < a.toString().length; e++) {
                var i = parseFloat(a.toString().charAt(e))
                  , s = i * this.oNumbersImgData.oData.spriteWidth % this.oNumbersImgData.img.width
                  , o = Math.floor(i / (this.oNumbersImgData.img.width / this.oNumbersImgData.oData.spriteWidth)) * this.oNumbersImgData.oData.spriteHeight;
                t.drawImage(this.oNumbersImgData.img, s, o, this.oNumbersImgData.oData.spriteWidth, this.oNumbersImgData.oData.spriteHeight, 0 + 30 * e - 30 * a.toString().length / 2 - 10, 0, this.oNumbersImgData.oData.spriteWidth * this.scoreScale, this.oNumbersImgData.oData.spriteHeight / this.scoreScale)
            }
        }
        ,
        a
    }(Utils.AnimSprite);
    t.Roach = a
}(Elements || (Elements = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t, a) {
            this.aLines = new Array,
            this.aBalls = new Array,
            this.aLines = t,
            this.aBalls = a;
            for (var e = 0; e < this.aLines.length; e++)
                this.updateVector(this.aLines[e], null, !0)
        }
        return t.prototype.drawAll = function(t) {
            for (var a = 0; a < this.aBalls.length; a++)
                if ("moving" == this.aBalls[a].state) {
                    var e = this.aBalls[a];
                    e.trackX = e.p1.x,
                    e.trackY = e.p1.y,
                    e.p0 = e.p1,
                    this.updateVector(e, t)
                }
        }
        ,
        t.prototype.update = function(t) {
            var a;
            for (a = 0; a < this.aBalls.length; a++) {
                var e = this.aBalls[a];
                if ("moving" == e.state) {
                    this.updateVector(e, t);
                    for (var i = 0; i < this.aLines.length; i++) {
                        this.fi = this.findIntersection(e, this.aLines[i]),
                        this.updateVector(this.fi, t, !1);
                        var s = e.radius - this.fi.len;
                        if (s >= 0) {
                            playSound("bumper" + Math.ceil(2 * Math.random())),
                            e.p1.x += this.fi.dx * s,
                            e.p1.y += this.fi.dy * s;
                            var o = {
                                dx: this.fi.lx,
                                dy: this.fi.ly,
                                lx: this.fi.dx,
                                ly: this.fi.dy,
                                b: 1,
                                f: 1
                            }
                              , r = this.bounce(e, o);
                            e.vx = r.vx,
                            e.vy = r.vy
                        }
                    }
                    for (var n = 0; n < this.aBalls.length; n++)
                        if (a != n && "holed" != this.aBalls[n].state) {
                            var h = this.aBalls[n];
                            this.vc = {},
                            this.vc.p0 = e.p0,
                            this.vc.p1 = h.p0,
                            this.updateVector(this.vc, t, !0);
                            var l = e.ballRadius + h.ballRadius
                              , p = l - this.vc.len;
                            if (p >= 0) {
                                e.p1.x -= this.vc.dx * p,
                                e.p1.y -= this.vc.dy * p;
                                var c = this.bounceBalls(e, h, this.vc);
                                e.vx = c.vx1,
                                e.vy = c.vy1,
                                h.vx = c.vx2,
                                h.vy = c.vy2,
                                e.changeState("rebound"),
                                h.changeState("rebound"),
                                playSound("ballHit" + Math.ceil(3 * Math.random()))
                            } else if (p >= -50) {
                                this.v3 = new Object,
                                this.v3.p0 = e.p0,
                                this.v3.p1 = {
                                    x: 0,
                                    y: 0
                                },
                                this.v3.vx = e.vx - h.vx,
                                this.v3.vy = e.vy - h.vy,
                                this.updateVector(this.v3, t);
                                var u = this.projectVector(this.vc, this.v3.dx, this.v3.dy);
                                this.vn = {};
                                var m = {
                                    x: e.p0.x + u.vx,
                                    y: e.p0.y + u.vy
                                };
                                this.vn.p0 = m,
                                this.vn.p1 = h.p0,
                                this.updateVector(this.vn, t, !0);
                                var g = l - this.vn.len;
                                if (g > 0) {
                                    var d = Math.sqrt(l * l - this.vn.len * this.vn.len);
                                    if (this.p3 = {
                                        x: this.vn.p0.x - d * this.v3.dx,
                                        y: this.vn.p0.y - d * this.v3.dy
                                    },
                                    this.v4 = {
                                        p0: e.p0,
                                        p1: this.p3
                                    },
                                    this.updateVector(this.v4, t, !0),
                                    this.v4.len <= this.v3.len && this.dotP(this.v4, e) > 0) {
                                        var y = this.v4.len / this.v3.len;
                                        e.p1 = {
                                            x: e.p0.x + y * e.vx,
                                            y: e.p0.y + y * e.vy
                                        },
                                        h.p1 = {
                                            x: h.p0.x + y * h.vx,
                                            y: h.p0.y + y * h.vy
                                        },
                                        this.vc = {
                                            p0: e.p1,
                                            p1: h.p1
                                        },
                                        this.updateVector(this.vc, t, !0),
                                        c = this.bounceBalls(e, h, this.vc),
                                        e.vx = c.vx1,
                                        e.vy = c.vy1,
                                        h.vx = c.vx2,
                                        h.vy = c.vy2,
                                        this.makeVector(h),
                                        this.makeVector(e),
                                        e.changeState("rebound"),
                                        h.changeState("rebound"),
                                        playSound("ballHit" + Math.ceil(3 * Math.random()))
                                    }
                                }
                            }
                        }
                }
            }
            this.drawAll(t)
        }
        ,
        t.prototype.updateVector = function(t, a, e) {
            "undefined" == typeof e && (e = !1),
            a = .0167,
            1 == e ? (t.vx = t.p1.x - t.p0.x,
            t.vy = t.p1.y - t.p0.y) : (t.p1.x = t.p0.x + 60 * t.vx * a,
            t.p1.y = t.p0.y + 60 * t.vy * a),
            this.makeVector(t)
        }
        ,
        t.prototype.makeVector = function(t) {
            t.len = Math.sqrt(t.vx * t.vx + t.vy * t.vy),
            t.len > 0 ? (t.dx = t.vx / t.len,
            t.dy = t.vy / t.len) : (t.dx = 0,
            t.dy = 0),
            t.rx = -t.dy,
            t.ry = t.dx,
            t.lx = t.dy,
            t.ly = -t.dx
        }
        ,
        t.prototype.dotP = function(t, a) {
            var e = t.vx * a.vx + t.vy * a.vy;
            return e
        }
        ,
        t.prototype.projectVector = function(t, a, e) {
            var i = t.vx * a + t.vy * e
              , s = {};
            return s.vx = i * a,
            s.vy = i * e,
            s
        }
        ,
        t.prototype.bounceBalls = function(t, a, e) {
            var i = this.projectVector(t, e.dx, e.dy)
              , s = this.projectVector(t, e.lx, e.ly)
              , o = this.projectVector(a, e.dx, e.dy)
              , r = this.projectVector(a, e.lx, e.ly)
              , n = t.m * i.vx + a.m * o.vx
              , h = i.vx - o.vx
              , l = (n + h * t.m) / (t.m + a.m)
              , p = l - h;
            n = t.m * i.vy + a.m * o.vy,
            h = i.vy - o.vy;
            var c = (n + h * t.m) / (t.m + a.m)
              , u = c - h
              , m = {};
            return m.vx1 = s.vx + p,
            m.vy1 = s.vy + u,
            m.vx2 = r.vx + l,
            m.vy2 = r.vy + c,
            m
        }
        ,
        t.prototype.bounce = function(t, a) {
            var e = this.projectVector(t, a.dx, a.dy)
              , i = this.projectVector(t, a.lx, a.ly)
              , s = {};
            return i.len = Math.sqrt(i.vx * i.vx + i.vy * i.vy),
            i.vx = a.lx * i.len,
            i.vy = a.ly * i.len,
            s.vx = t.f * a.f * e.vx + t.b * a.b * i.vx,
            s.vy = t.f * a.f * e.vy + t.b * a.b * i.vy,
            s
        }
        ,
        t.prototype.findIntersection = function(t, a) {
            var e = {}
              , i = {};
            i.vx = t.p1.x - a.p0.x,
            i.vy = t.p1.y - a.p0.y;
            var s = i.vx * a.dx + i.vy * a.dy;
            if (0 > s)
                e = i;
            else {
                var o = {};
                o.vx = t.p1.x - a.p1.x,
                o.vy = t.p1.y - a.p1.y,
                s = o.vx * a.dx + o.vy * a.dy,
                e = s > 0 ? o : this.projectVector(i, a.lx, a.ly)
            }
            return e.p0 = {
                x: 0,
                y: 0
            },
            e.p1 = {
                x: 0,
                y: 0
            },
            e
        }
        ,
        t
    }();
    t.Physics2D = a
}(Utils || (Utils = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t, a, e) {
            this.aLines = new Array,
            this.aBalls = new Array,
            this.oLineData = {
                targBall: null,
                targBallRot: 0,
                bounceX: 0,
                bounceY: 0,
                bounceRot: 0,
                hyp: 0,
                aimRot: 0
            },
            this.aLines = t,
            this.aBalls = a,
            this.cueBall = e
        }
        return t.prototype.checkLine = function(t, a, e, i, s) {
            var o = this.cueBall.x - e
              , r = this.cueBall.y - i
              , n = Math.abs(o / r);
            this.oLineData.hyp = Math.sqrt(o * o + r * r),
            this.oLineData.aimRot = Math.atan2(r, o),
            Math.abs(o) > Math.abs(r) ? (o = o > 0 ? 1 : -1,
            r = r > 0 ? 1 / n : -1 / n) : (r = r > 0 ? 1 : -1,
            o = o > 0 ? 1 * n : -1 * n),
            this.checkPosX = this.cueBall.x,
            this.checkPosY = this.cueBall.y,
            this.oLineData.targBall = null;
            for (var h = 0; 700 > h; h++) {
                this.oLineData.targBall = null;
                for (var l = 0; l < this.aBalls.length; l++)
                    if (this.aBalls[l] != this.cueBall) {
                        var p = this.checkPosX - this.aBalls[l].x
                          , c = this.checkPosY - this.aBalls[l].y
                          , u = p * p + c * c;
                        784 > u && (this.oLineData.targBall = this.aBalls[l],
                        this.oLineData.bounceX = this.checkPosX,
                        this.oLineData.bounceY = this.checkPosY,
                        this.oLineData.targBallRot = Math.atan2(-c, -p),
                        this.oLineData.targBallRot - this.oLineData.aimRot > Math.PI ? this.oLineData.targBallRot -= 2 * Math.PI : this.oLineData.targBallRot - this.oLineData.aimRot < -Math.PI && (this.oLineData.targBallRot += 2 * Math.PI),
                        this.oLineData.bounceRot = this.oLineData.targBallRot > this.oLineData.aimRot ? this.oLineData.targBallRot - Math.PI / 2 : this.oLineData.targBallRot + Math.PI / 2)
                    }
                if (null != this.oLineData.targBall)
                    break;
                if (this.checkPosX > 375 || this.checkPosX < 105 || this.checkPosY < 109 + s || this.checkPosY > 691 + s) {
                    this.oLineData.bounceX = this.checkPosX,
                    this.oLineData.bounceY = this.checkPosY;
                    break
                }
                this.checkPosX += o,
                this.checkPosY += r
            }
            return this.oLineData
        }
        ,
        t
    }();
    t.LinePredictor = a
}(Utils || (Utils = {}));
var Utils;
!function(t) {
    var a = function() {
        function t(t, a) {
            this.saveDataId = t,
            this.totalLevels = a,
            this.clearData(),
            this.setInitialData()
        }
        return t.prototype.clearData = function() {
            this.aLevelStore = new Array,
            this.aLevelStore.push(0),
            this.aLevelStore.push(0);
            for (var t = 0; t < this.totalLevels - 1; t++)
                this.aLevelStore.push(0 == (t + 2) % 4 ? 5 : 1),
                this.aLevelStore.push(0)
        }
        ,
        t.prototype.setInitialData = function() {
            if ("undefined" != typeof Storage)
                if (null != localStorage.getItem(this.saveDataId)) {
                    this.aLevelStore = localStorage.getItem(this.saveDataId).split(",");
                    for (var t in this.aLevelStore)
                        this.aLevelStore[t] = parseInt(this.aLevelStore[t])
                } else
                    this.saveData()
        }
        ,
        t.prototype.saveData = function() {
            if ("undefined" != typeof Storage) {
                for (var t = "", a = 0; a < this.aLevelStore.length; a++)
                    t += this.aLevelStore[a],
                    a < this.aLevelStore.length - 1 && (t += ",");
                localStorage.setItem(this.saveDataId, t)
            }
        }
        ,
        t
    }();
    t.SaveDataHandler = a
}(Utils || (Utils = {}));
var requestAnimFrame = function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(t) {
        window.setTimeout(t, 1e3 / 60, (new Date).getTime())
    }
}(), previousTime, canvas = document.getElementById("canvas"), ctx = canvas.getContext("2d");
canvas.width = 480,
canvas.height = 800;
var canvasX, canvasY, canvasScaleX, canvasScaleY, div = document.getElementById("viewporter"), sound, music, audioType = 0, muted = !1, splash, splashTimer = 0, assetLib, preAssetLib, rotatePause = !1, manualPause = !1, isMobile = !1, gameState = "loading", aLangs = new Array("EN"), curLang = "", isBugBrowser = !1, isIE10 = !1;
navigator.userAgent.match(/MSIE\s([\d]+)/) && (isIE10 = !0);
var deviceAgent = navigator.userAgent.toLowerCase();
(deviceAgent.match(/(iphone|ipod|ipad)/) || deviceAgent.match(/(android)/) || deviceAgent.match(/(iemobile)/) || deviceAgent.match(/iphone/i) || deviceAgent.match(/ipad/i) || deviceAgent.match(/ipod/i) || deviceAgent.match(/blackberry/i) || deviceAgent.match(/bada/i)) && (isMobile = !0,
deviceAgent.match(/(android)/) && !/Chrome/.test(navigator.userAgent) && (isBugBrowser = !0));
var userInput = new Utils.UserInput(canvas,isBugBrowser);
resizeCanvas(),
window.onresize = function() {
    setTimeout(function() {
        resizeCanvas()
    }, 1)
}
,
document.addEventListener("visibilitychange", function() {
    document.hidden ? Howler.mute() : muted || Howler.unmute()
}, !1),
window.addEventListener("load", function() {
    setTimeout(function() {
        resizeCanvas()
    }, 0),
    window.addEventListener("orientationchange", function() {
        resizeCanvas()
    }, !1)
}),
isIE10 || "undefined" == typeof window.AudioContext && "undefined" == typeof window.webkitAudioContext && -1 != navigator.userAgent.indexOf("Android") && -1 === navigator.userAgent.indexOf("IEMobile") ? audioType = 0 : (audioType = 1,
sound = new Howl({
    urls: ["audio/sound.ogg", "audio/sound.m4a"],
    sprite: {
        ballHit1: [0, 300],
        ballHit2: [500, 300],
        ballHit3: [1e3, 300],
        bumper1: [1500, 400],
        bumper2: [2e3, 400],
        hit3: [2500, 600],
        hit1: [3500, 600],
        pot1: [4500, 1e3],
        pot2: [6e3, 1e3],
        pot3: [7500, 1e3],
        score: [9e3, 1e3],
        gameEnd: [10500, 1500],
        hit2: [12500, 500],
        bell: [13500, 600],
        rack: [14500, 1e3],
        highlight: [16e3, 400]
    }
}),
music = new Howl({
    urls: ["audio/music.ogg", "audio/music.m4a"],
    volume: .5,
    loop: !0
}));
var panel, hud, background, table, cueBall, arrow, physics2D, gameTouchState, oPosData = {
    prevBallX: 0,
    prevBallY: 0,
    stageX: 0,
    stageY: 0,
    targStageX: 0,
    targStageY: 0,
    startDragX: 0,
    startDragY: 0,
    startStageX: 0,
    startStageY: 0
}, shotsSinceLastPot, startTime = 120, levelWidth = 480, levelHeight = 800, levelNum, aimX, aimY, targAimX, targAimY, aHolePos = new Array, buffer = 0, aBalls, aHoles, musicTween, gameTimer, curPotScore, streak, newRackStart, newRackY, isBreakOff, linePredictor, oBonusData = {
    secType: 0,
    x: 0,
    y: 0,
    scale: 1,
    life: 0
}, aLevelData = new Array({
    aData: [{
        type: "ball",
        p0: {
            x: 261,
            y: 206
        },
        p1: {
            x: 261,
            y: 206
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 185
        },
        p1: {
            x: 240,
            y: 185
        }
    }, {
        type: "ball",
        p0: {
            x: 261,
            y: 249
        },
        p1: {
            x: 261,
            y: 249
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 270
        },
        p1: {
            x: 240,
            y: 270
        }
    }, {
        type: "ball",
        p0: {
            x: 218,
            y: 249
        },
        p1: {
            x: 218,
            y: 249
        }
    }, {
        type: "ball",
        p0: {
            x: 218,
            y: 206
        },
        p1: {
            x: 218,
            y: 206
        }
    }, {
        type: "ball",
        p0: {
            x: 197,
            y: 228
        },
        p1: {
            x: 197,
            y: 228
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 228
        },
        p1: {
            x: 240,
            y: 228
        }
    }, {
        type: "ball",
        p0: {
            x: 282,
            y: 228
        },
        p1: {
            x: 282,
            y: 228
        }
    }, {
        type: "cueBall",
        p0: {
            x: 240,
            y: 591
        },
        p1: {
            x: 240,
            y: 591
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 106
        },
        p1: {
            x: 384,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 400,
            y: 400
        },
        p1: {
            x: 400,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 693
        },
        p1: {
            x: 384,
            y: 693
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 106
        },
        p1: {
            x: 97,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 80,
            y: 400
        },
        p1: {
            x: 80,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 693
        },
        p1: {
            x: 97,
            y: 693
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 90
        },
        p1: {
            x: 354,
            y: 90
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 710
        },
        p1: {
            x: 354,
            y: 710
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 365
        },
        p1: {
            x: 400,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 663
        },
        p1: {
            x: 400,
            y: 435
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 365
        },
        p1: {
            x: 80,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 663
        },
        p1: {
            x: 80,
            y: 435
        }
    }]
},{
    aData: [{
        type: "ball",
        p0: {
            x: 219,
            y: 269
        },
        p1: {
            x: 219,
            y: 269
        }
    }, {
        type: "ball",
        p0: {
            x: 262,
            y: 227
        },
        p1: {
            x: 262,
            y: 227
        }
    }, {
        type: "ball",
        p0: {
            x: 283,
            y: 206
        },
        p1: {
            x: 283,
            y: 206
        }
    }, {
        type: "ball",
        p0: {
            x: 198,
            y: 290
        },
        p1: {
            x: 198,
            y: 290
        }
    }, {
        type: "ball",
        p0: {
            x: 262,
            y: 269
        },
        p1: {
            x: 262,
            y: 269
        }
    }, {
        type: "ball",
        p0: {
            x: 241,
            y: 248
        },
        p1: {
            x: 241,
            y: 248
        }
    }, {
        type: "ball",
        p0: {
            x: 219,
            y: 227
        },
        p1: {
            x: 219,
            y: 227
        }
    }, {
        type: "ball",
        p0: {
            x: 198,
            y: 206
        },
        p1: {
            x: 198,
            y: 206
        }
    }, {
        type: "ball",
        p0: {
            x: 283,
            y: 290
        },
        p1: {
            x: 283,
            y: 290
        }
    }, {
        type: "cueBall",
        p0: {
            x: 241,
            y: 592
        },
        p1: {
            x: 241,
            y: 592
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 106
        },
        p1: {
            x: 384,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 400,
            y: 400
        },
        p1: {
            x: 400,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 693
        },
        p1: {
            x: 384,
            y: 693
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 106
        },
        p1: {
            x: 97,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 80,
            y: 400
        },
        p1: {
            x: 80,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 693
        },
        p1: {
            x: 97,
            y: 693
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 90
        },
        p1: {
            x: 354,
            y: 90
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 710
        },
        p1: {
            x: 354,
            y: 710
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 365
        },
        p1: {
            x: 400,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 663
        },
        p1: {
            x: 400,
            y: 435
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 365
        },
        p1: {
            x: 80,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 663
        },
        p1: {
            x: 80,
            y: 435
        }
    }]
},{
    aData: [{
        type: "ball",
        p0: {
            x: 291,
            y: 228
        },
        p1: {
            x: 291,
            y: 228
        }
    }, {
        type: "ball",
        p0: {
            x: 315,
            y: 198
        },
        p1: {
            x: 315,
            y: 198
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 258
        },
        p1: {
            x: 240,
            y: 258
        }
    }, {
        type: "ball",
        p0: {
            x: 210,
            y: 258
        },
        p1: {
            x: 210,
            y: 258
        }
    }, {
        type: "ball",
        p0: {
            x: 188,
            y: 228
        },
        p1: {
            x: 188,
            y: 228
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 173
        },
        p1: {
            x: 240,
            y: 173
        }
    }, {
        type: "ball",
        p0: {
            x: 165,
            y: 198
        },
        p1: {
            x: 165,
            y: 198
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 218
        },
        p1: {
            x: 240,
            y: 218
        }
    }, {
        type: "ball",
        p0: {
            x: 270,
            y: 258
        },
        p1: {
            x: 270,
            y: 258
        }
    }, {
        type: "cueBall",
        p0: {
            x: 240,
            y: 591
        },
        p1: {
            x: 240,
            y: 591
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 106
        },
        p1: {
            x: 384,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 400,
            y: 400
        },
        p1: {
            x: 400,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 693
        },
        p1: {
            x: 384,
            y: 693
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 106
        },
        p1: {
            x: 97,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 80,
            y: 400
        },
        p1: {
            x: 80,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 693
        },
        p1: {
            x: 97,
            y: 693
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 90
        },
        p1: {
            x: 354,
            y: 90
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 710
        },
        p1: {
            x: 354,
            y: 710
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 365
        },
        p1: {
            x: 400,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 663
        },
        p1: {
            x: 400,
            y: 435
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 365
        },
        p1: {
            x: 80,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 663
        },
        p1: {
            x: 80,
            y: 435
        }
    }]
},{
    aData: [{
        type: "ball",
        p0: {
            x: 285,
            y: 229
        },
        p1: {
            x: 285,
            y: 229
        }
    }, {
        type: "ball",
        p0: {
            x: 270,
            y: 199
        },
        p1: {
            x: 270,
            y: 199
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 274
        },
        p1: {
            x: 240,
            y: 274
        }
    }, {
        type: "ball",
        p0: {
            x: 210,
            y: 259
        },
        p1: {
            x: 210,
            y: 259
        }
    }, {
        type: "ball",
        p0: {
            x: 195,
            y: 229
        },
        p1: {
            x: 195,
            y: 229
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 184
        },
        p1: {
            x: 240,
            y: 184
        }
    }, {
        type: "ball",
        p0: {
            x: 210,
            y: 199
        },
        p1: {
            x: 210,
            y: 199
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 229
        },
        p1: {
            x: 240,
            y: 229
        }
    }, {
        type: "ball",
        p0: {
            x: 270,
            y: 259
        },
        p1: {
            x: 270,
            y: 259
        }
    }, {
        type: "cueBall",
        p0: {
            x: 240,
            y: 591
        },
        p1: {
            x: 240,
            y: 591
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 106
        },
        p1: {
            x: 384,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 400,
            y: 400
        },
        p1: {
            x: 400,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 693
        },
        p1: {
            x: 384,
            y: 693
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 106
        },
        p1: {
            x: 97,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 80,
            y: 400
        },
        p1: {
            x: 80,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 693
        },
        p1: {
            x: 97,
            y: 693
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 90
        },
        p1: {
            x: 354,
            y: 90
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 710
        },
        p1: {
            x: 354,
            y: 710
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 365
        },
        p1: {
            x: 400,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 663
        },
        p1: {
            x: 400,
            y: 435
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 365
        },
        p1: {
            x: 80,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 663
        },
        p1: {
            x: 80,
            y: 435
        }
    }]
},{
    aData: [{
        type: "ball",
        p0: {
            x: 225,
            y: 245
        },
        p1: {
            x: 225,
            y: 245
        }
    }, {
        type: "ball",
        p0: {
            x: 256,
            y: 245
        },
        p1: {
            x: 256,
            y: 245
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 219
        },
        p1: {
            x: 240,
            y: 219
        }
    }, {
        type: "ball",
        p0: {
            x: 210,
            y: 219
        },
        p1: {
            x: 210,
            y: 219
        }
    }, {
        type: "ball",
        p0: {
            x: 271,
            y: 219
        },
        p1: {
            x: 271,
            y: 219
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 400
        },
        p1: {
            x: 240,
            y: 400
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 333
        },
        p1: {
            x: 240,
            y: 333
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 160
        },
        p1: {
            x: 240,
            y: 160
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 272
        },
        p1: {
            x: 240,
            y: 272
        }
    }, {
        type: "cueBall",
        p0: {
            x: 240,
            y: 591
        },
        p1: {
            x: 240,
            y: 591
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 106
        },
        p1: {
            x: 384,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 400,
            y: 400
        },
        p1: {
            x: 400,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 693
        },
        p1: {
            x: 384,
            y: 693
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 106
        },
        p1: {
            x: 97,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 80,
            y: 400
        },
        p1: {
            x: 80,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 693
        },
        p1: {
            x: 97,
            y: 693
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 90
        },
        p1: {
            x: 354,
            y: 90
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 710
        },
        p1: {
            x: 354,
            y: 710
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 365
        },
        p1: {
            x: 400,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 663
        },
        p1: {
            x: 400,
            y: 435
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 365
        },
        p1: {
            x: 80,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 663
        },
        p1: {
            x: 80,
            y: 435
        }
    }]
},{
    aData: [{
        type: "ball",
        p0: {
            x: 210,
            y: 200
        },
        p1: {
            x: 210,
            y: 200
        }
    }, {
        type: "ball",
        p0: {
            x: 270,
            y: 200
        },
        p1: {
            x: 270,
            y: 200
        }
    }, {
        type: "ball",
        p0: {
            x: 300,
            y: 210
        },
        p1: {
            x: 300,
            y: 210
        }
    }, {
        type: "ball",
        p0: {
            x: 180,
            y: 210
        },
        p1: {
            x: 180,
            y: 210
        }
    }, {
        type: "ball",
        p0: {
            x: 150,
            y: 220
        },
        p1: {
            x: 150,
            y: 220
        }
    }, {
        type: "ball",
        p0: {
            x: 330,
            y: 220
        },
        p1: {
            x: 330,
            y: 220
        }
    }, {
        type: "ball",
        p0: {
            x: 120,
            y: 230
        },
        p1: {
            x: 120,
            y: 230
        }
    }, {
        type: "ball",
        p0: {
            x: 360,
            y: 230
        },
        p1: {
            x: 360,
            y: 230
        }
    }, {
        type: "ball",
        p0: {
            x: 240,
            y: 190
        },
        p1: {
            x: 240,
            y: 190
        }
    }, {
        type: "cueBall",
        p0: {
            x: 240,
            y: 591
        },
        p1: {
            x: 240,
            y: 591
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 106
        },
        p1: {
            x: 384,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 400,
            y: 400
        },
        p1: {
            x: 400,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 384,
            y: 693
        },
        p1: {
            x: 384,
            y: 693
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 106
        },
        p1: {
            x: 97,
            y: 106
        }
    }, {
        type: "hole",
        p0: {
            x: 80,
            y: 400
        },
        p1: {
            x: 80,
            y: 400
        }
    }, {
        type: "hole",
        p0: {
            x: 97,
            y: 693
        },
        p1: {
            x: 97,
            y: 693
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 90
        },
        p1: {
            x: 354,
            y: 90
        }
    }, {
        type: "wall",
        p0: {
            x: 127,
            y: 710
        },
        p1: {
            x: 354,
            y: 710
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 365
        },
        p1: {
            x: 400,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 401,
            y: 663
        },
        p1: {
            x: 400,
            y: 435
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 365
        },
        p1: {
            x: 80,
            y: 137
        }
    }, {
        type: "wall",
        p0: {
            x: 81,
            y: 663
        },
        p1: {
            x: 80,
            y: 435
        }
    }]
});
loadPreAssets();
