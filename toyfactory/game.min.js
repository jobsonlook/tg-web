var __extends = (this && this.__extends) || (function() {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }instanceof Array && function(d, b) {
        d.__proto__ = b;
    }
    ) || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
    }
    ;
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype,
        new __());
    }
    ;
}
)();
/// <reference path="references.ts" />
var SoundManager = (function() {
    function SoundManager() {
        this.soundEnabled = true;
        this.initiliazed = false;
        this.focus = true;
        this.hidden = false;
        this.wasSoundEnabled = true;
        this.wasPauseCall = false;
        //  dirty hack
        this.wasMusicPlay = false;
    }
    SoundManager.prototype.onLostFocus = function() {
        this.focus = false;
        this.calcSoundEnabled(this.soundEnabled);
    }
    ;
    SoundManager.prototype.onFocus = function() {
        this.focus = true;
        this.calcSoundEnabled(this.soundEnabled);
    }
    ;
    SoundManager.prototype.init = function() {
        try {
            if (!this.initiliazed) {
                if (!createjs.Sound.initializeDefaultPlugins()) {
                    return;
                }
                this.initiliazed = true;
            }
        } catch (e) {}
    }
    ;
    SoundManager.prototype.isSoundEnabled = function() {
        return this.soundEnabled;
    }
    ;
    SoundManager.prototype.calcSoundEnabled = function(enabled) {
        this.soundEnabled = enabled;
        var is_mute = !enabled || !this.focus;
        //try
        //{
        //    if (is_mute)
        //    {
        //        if (this.musicInstance)
        //        {
        //            this.musicInstance.stop();
        //            this.musicInstance = null;
        //        }
        //    }
        //    else
        //    {
        //        this.playMusic();
        //    }
        //}
        //catch (e)
        //{
        //}
        try {
            if (createjs.Sound.getMute() == is_mute) {
                return;
            }
            createjs.Sound.setMute(is_mute);
            if (is_mute) {
                if (this.musicInstance) {
                    this.musicInstance.stop();
                    this.musicInstance = null;
                }
            } else {
                this.playMusic();
            }
        } catch (e) {}
    }
    ;
    SoundManager.prototype.play = function(name, volume) {
        try {
            if (!volume) {
                volume = 1;
            }
            if (this.initiliazed && this.soundEnabled) {
                return createjs.Sound.play(name, createjs.Sound.INTERRUPT_NONE, 0, 0, 0, volume);
            }
        } catch (e) {}
        return null;
    }
    ;
    SoundManager.prototype.playMusic = function() {
        try {
            if (this.initiliazed && this.soundEnabled) {
                if (this.musicInstance) {
                    this.musicInstance.stop();
                    this.musicInstance = null;
                }
                //if (!this.wasMusicPlay)
                {
                    //this.wasMusicPlay = true;
                    this.musicInstance = createjs.Sound.play(SoundManager.SOUND_MUSIC, createjs.Sound.INTERRUPT_NONE, 0, 0, -1, 0.2);
                    if (this.musicInstance.playState == "playFailed") {
                        //this.wasMusicPlay = false;
                        return null;
                    }
                }
            }
        } catch (e) {}
        return null;
    }
    ;
    SoundManager.prototype.playMusicFirstTime = function() {
        if (!this.wasMusicPlay) {
            this.wasMusicPlay = true;
            this.playMusic();
        }
    }
    ;
    SoundManager.prototype.update = function() {//this.soundsOnFrame.length = 0;
    //if (this.initiliazed)
    //{
    //    if (document.hidden || document["webkitHidden"] || document.visibilityState == "hidden" || document["msHidden"])
    //    {
    //        this.hidden = true;
    //    }
    //    else
    //    {
    //        this.hidden = false;
    //    }
    //    this.setSoundEnabled(this.soundEnabled);
    //}
    }
    ;
    SoundManager.prototype.onPause = function() {
        this.wasPauseCall = true;
        this.wasSoundEnabled = this.isSoundEnabled();
        if (this.isSoundEnabled()) {
            this.calcSoundEnabled(false);
        }
    }
    ;
    SoundManager.prototype.onResume = function() {
        if (this.wasPauseCall) {
            if (this.wasSoundEnabled) {
                this.calcSoundEnabled(true);
            }
            this.wasPauseCall = false;
        }
    }
    ;
    return SoundManager;
}());
SoundManager.g_instance = new SoundManager();
SoundManager.SOUND_MUSIC = "music";
SoundManager.SOUND_CLICK = "click";
SoundManager.SOUND_MATCH = "match";
SoundManager.SOUND_DROP_1 = "drop_1";
SoundManager.SOUND_DROP_2 = "drop_2";
SoundManager.SOUND_DROP_3 = "drop_3";
SoundManager.SOUND_LINE = "line";
SoundManager.SOUND_WIN = "win";
SoundManager.SOUND_LOSE = "fail";
SoundManager.SOUND_BOMB = "bomb";
SoundManager.SOUND_POPUP = "popup_window";
SoundManager.SOUND_FREEDOM_1 = "freedom_1";
SoundManager.SOUND_FREEDOM_2 = "freedom_2";
SoundManager.SOUND_CLOSE = "transition_close";
SoundManager.SOUND_OPEN = "transition_open";
SoundManager.SOUND_PLUS = "plus";
SoundManager.ALL = [SoundManager.SOUND_MUSIC, SoundManager.SOUND_CLICK, SoundManager.SOUND_MATCH, SoundManager.SOUND_DROP_1, SoundManager.SOUND_DROP_2, SoundManager.SOUND_DROP_3, SoundManager.SOUND_LINE, SoundManager.SOUND_WIN, SoundManager.SOUND_LOSE, SoundManager.SOUND_BOMB, SoundManager.SOUND_POPUP, SoundManager.SOUND_FREEDOM_1, SoundManager.SOUND_FREEDOM_2, SoundManager.SOUND_CLOSE, SoundManager.SOUND_OPEN, SoundManager.SOUND_PLUS];
/// <reference path="references.ts" />
var StateManager = (function() {
    function StateManager(manifest, sound_manifest, athlases, localizable_images) {
        var _this = this;
        this.statesConstainer = new createjs.Container();
        this.mouseDown = false;
        this.timeDevider = 1;
        this.liveTime = 0;
        this.isLoading = true;
        this.adsCD = firstAd;
        this.lastTime = 0;
        this.lastMouseUpHandlerTime = -1;
        this.lastMouseDownHandlerTime = -1;
        this.lastMouseMoveHandlerTime = -1;
        this.oneTimeResize = false;
        StateManager.g_instance = this;
        this.states = Array();
        //  create stage and point it to the canvas:
        this.canvas = document.getElementById("canvas");
        //  check to see if we are running in a browser with touch support
        this.stage = new createjs.Stage(this.canvas);
        this.stage.autoClear = false;
        var badAndroidDevice = navigator.userAgent.indexOf("Android") > -1 && !(navigator.userAgent.indexOf("Chrome") > -1);
        if (badAndroidDevice && createjs.Touch.isSupported()) {
            this.stage.enableDOMEvents(false);
        }
        //  enable touch interactions if supported on the current device:
        createjs.Touch.enable(this.stage);
        createjs.MotionGuidePlugin.install();
        //  enabled mouse over / out events
        this.stage.enableMouseOver(5);
        createjs.Ticker.timingMode = createjs.Ticker.RAF;
        createjs.Ticker.setFPS(60);
        createjs.Ticker.addEventListener("tick", function(e) {
            return _this.update(e);
        });
        if (Constants.DEBUG_MODE) {
            document.onkeydown = function(e) {
                return _this.onKeyDown(e);
            }
            ;
        }
        this.pushState(new PreloaderState(manifest,sound_manifest,athlases,localizable_images));
        this.stage.addChild(this.statesConstainer);
        createjs.MotionGuidePlugin.install();
        Constants.PIXEL_RATIO = (window.devicePixelRatio ? window.devicePixelRatio : 1);
        if (Constants.g_isPC) {
            window.onresize = (function(e) {
                return _this.onResize(e);
            }
            );
            this.onResize(null);
        } else {
            if (viewporter.ACTIVE) {
                window.addEventListener('viewportready', function() {
                    return _this.onPause();
                });
                window.addEventListener('viewportchange', function() {
                    return _this.onPause();
                });
            } else {
                window.addEventListener("orientationchange", function() {
                    return _this.onPause();
                });
            }
            //if (viewporter.ACTIVE)
            //{
            //    window.addEventListener('viewportready',() => this.onOrientationChanged());
            //    window.addEventListener('viewportchange',() => this.onOrientationChanged());
            //}
            //else
            //{
            //    window.addEventListener("orientationchange",() => this.onOrientationChanged());
            //}
            this.onOrientationChanged();
        }
        this.stage.addEventListener(Constants.MOUSE_MOVE, (function(e) {
            return _this.handleMouse(e);
        }
        ));
        this.stage.addEventListener(Constants.MOUSE_DOWN, (function(e) {
            return _this.handleMouse(e);
        }
        ));
        this.stage.addEventListener(Constants.MOUSE_UP, (function(e) {
            return _this.handleMouse(e);
        }
        ));
        onOpenTab = function() {
            StateManager.g_instance.onPause();
        }
        ;
        onCloseTab = function() {
            StateManager.g_instance.onResume();
        }
        ;
        if (Visibility.isSupported()) {
            Visibility.change(function(e, state) {
                if (state == "hidden") {
                    StateManager.g_instance.onLostFocus(null);
                } else if (state == "visible") {
                    StateManager.g_instance.onFocus(null);
                }
            });
        }
    }
    StateManager.prototype.isFirefoxBrowser = function() {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
            return true;
        }
        return false;
    }
    ;
    StateManager.prototype.isLandscape = function() {
        return viewporter.isLandscape();
    }
    ;
    StateManager.prototype.onOrientationChanged = function() {
        this.resizeTo();
    }
    ;
    StateManager.prototype.onResize = function(e) {
        this.resizeTo();
    }
    ;
    StateManager.prototype.getTopState = function() {
        return this.states[this.states.length - 1];
    }
    ;
    //  Jelly Madness style
    StateManager.prototype.resizeTo = function() {
        //  if portrait
        var myWidth = 0
          , myHeight = 0;
        if (typeof (window.innerWidth) == 'number') {
            //Non-IE
            myWidth = window.innerWidth;
            myHeight = window.innerHeight;
        } else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
            //IE 6+ in 'standards compliant mode'
            myWidth = document.documentElement.clientWidth;
            myHeight = document.documentElement.clientHeight;
        } else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
            //IE 4 compatible
            myWidth = document.body.clientWidth;
            myHeight = document.body.clientHeight;
        }
        //  if portrait
        if (myWidth < myHeight) {
            Constants.SCREEN_SCALE = myWidth / Constants.ASSETS_WIDTH * Constants.PIXEL_RATIO;
        } else {
            Constants.SCREEN_SCALE = Math.min(myWidth / Constants.ASSETS_WIDTH, myHeight / Constants.ASSETS_HEIGHT) * Constants.PIXEL_RATIO;
        }
        //  canvas h = screen h anyway
        Constants.SCREEN_HEIGHT = myHeight / Constants.SCREEN_SCALE * Constants.PIXEL_RATIO;
        this.canvas.width = Constants.ASSETS_WIDTH * Constants.SCREEN_SCALE;
        this.canvas.height = myHeight * Constants.PIXEL_RATIO;
        this.canvas.style.width = this.canvas.width / Constants.PIXEL_RATIO + "px";
        this.canvas.style.height = this.canvas.height / Constants.PIXEL_RATIO + "px";
        this.statesConstainer.scaleX = this.statesConstainer.scaleY = Constants.SCREEN_SCALE;
        this.canvas.style.marginLeft = (myWidth - Constants.ASSETS_WIDTH * Constants.SCREEN_SCALE / Constants.PIXEL_RATIO) / 2 + "px";
        this.canvas.style.marginTop = "0px";
    }
    ;
    StateManager.prototype.allAssetsLoaded = function() {
        var _this = this;
        this.isLoading = false;
        if (window.onpagehide) {
            window.onpagehide = (function(e) {
                return _this.onLostFocus(e);
            }
            );
        }
        if (window.onblur) {
            window.onblur = (function(e) {
                return _this.onLostFocus(e);
            }
            );
        }
        if (window.onpageshow) {
            window.onpageshow = (function(e) {
                return _this.onFocus(e);
            }
            );
        }
        if (window.onfocus) {
            window.onfocus = (function(e) {
                return _this.onFocus(e);
            }
            );
        }
        GameData.getInstance().load();
        this.changeState(new MainMenuState());
    }
    ;
    StateManager.prototype.restartAdsCD = function() {
        this.adsCD = adFreq;
    }
    ;
    StateManager.prototype.update = function(event) {
        var tm = createjs.Ticker.getTime();
        var delta = (tm - this.lastTime);
        this.lastTime = tm;
        if (delta > 500) {
            delta = 500;
        }
        var dt = delta * 0.001 / this.timeDevider;
        this.liveTime += dt;
        if (this.adsCD > 0) {
            this.adsCD -= dt;
        }
        SoundManager.g_instance.update();
        if (this.states.length != 0) {
            var top_state = this.states[this.states.length - 1];
            if (!top_state.isInitiliazed()) {
                top_state.init();
            }
            top_state.update(dt);
        }
        //
        for (var i = 0; i < this.states.length; i++) {
            this.states[i].alignByCenter(false);
        }
        for (var i = 0; i < this.states.length; i++) {
            this.states[i].forceUpdate(dt);
        }
        this.stage.update(event);
    }
    ;
    StateManager.prototype.changeState = function(game_state) {
        while (this.states.length != 0) {
            this.popState();
        }
        this.pushState(game_state);
    }
    ;
    StateManager.prototype.pushState = function(game_state) {
        this.states.push(game_state);
        this.statesConstainer.addChild(game_state);
    }
    ;
    StateManager.prototype.popState = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].cleanup();
            this.statesConstainer.removeChild(this.states[this.states.length - 1]);
            this.states.pop();
            if (this.states.length != 0) {
                this.states[this.states.length - 1].resume();
            }
        }
    }
    ;
    StateManager.prototype.onLostFocus = function(e) {
        SoundManager.g_instance.onLostFocus();
    }
    ;
    StateManager.prototype.onFocus = function(e) {
        SoundManager.g_instance.onFocus();
    }
    ;
    StateManager.prototype.handleMouse = function(event) {
        if (this.states.length == 0) {
            return;
        }
        event.preventDefault();
        var top_state = this.states[this.states.length - 1];
        switch (event.type) {
        case Constants.MOUSE_DOWN:
            {
                SoundManager.g_instance.init();
                if (!this.isLoading) {
                    SoundManager.g_instance.playMusicFirstTime();
                }
                if (this.liveTime == this.lastMouseDownHandlerTime) {
                    return;
                }
                this.lastMouseDownHandlerTime = this.liveTime;
                this.mouseDown = true;
                top_state.onMouseDown(event.stageX / Constants.SCREEN_SCALE, event.stageY / Constants.SCREEN_SCALE);
            }
            break;
        case Constants.MOUSE_UP:
            {
                if (this.liveTime == this.lastMouseUpHandlerTime) {
                    return;
                }
                this.lastMouseUpHandlerTime = this.liveTime;
                this.mouseDown = false;
                top_state.onMouseUp(event.stageX / Constants.SCREEN_SCALE, event.stageY / Constants.SCREEN_SCALE);
            }
            break;
        case Constants.MOUSE_MOVE:
            {
                if (this.liveTime == this.lastMouseMoveHandlerTime) {
                    return;
                }
                this.lastMouseMoveHandlerTime = this.liveTime;
                if (this.mouseDown) {
                    top_state.onMouseMove(event.stageX / Constants.SCREEN_SCALE, event.stageY / Constants.SCREEN_SCALE);
                }
            }
            break;
        }
    }
    ;
    StateManager.prototype.onKeyDown = function(event) {
        switch (event.keyCode) {
            //  key a
        case 65:
            {
                this.timeDevider = 5;
            }
            break;
        case 66:
            {
                this.timeDevider = 0.2;
            }
            break;
        case 68:
            {
                this.timeDevider = 10;
            }
            break;
        }
        this.stage.update();
    }
    ;
    StateManager.prototype.onPause = function() {
        var _this = this;
        if (!this.oneTimeResize && !this.isLandscape()) {
            this.oneTimeResize = true;
            createjs.Tween.get(this).wait(500).call(function() {
                _this.resizeTo();
            });
        }
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onPause();
        }
    }
    ;
    StateManager.prototype.onResume = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onResume();
        }
    }
    ;
    StateManager.prototype.onRestart = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onRestart();
        }
    }
    ;
    StateManager.prototype.getStatesCount = function() {
        return this.states.length;
    }
    ;
    StateManager.prototype.isMouseDownNow = function() {
        return this.mouseDown;
    }
    ;
    return StateManager;
}());
/// <reference path="references.ts" />
var GameState = (function(_super) {
    __extends(GameState, _super);
    function GameState() {
        var _this = _super.call(this) || this;
        _this.liveTime = 0.0;
        _this.gameObjects = new Array();
        _this.gui = new Array();
        _this.newGameObjects = new Array();
        _this.initiliazed = false;
        _this.consoleH = 200;
        _this.haveFill = false;
        return _this;
    }
    GameState.prototype.getShader = function() {
        return this.shaderShape;
    }
    ;
    GameState.prototype.addShader = function(color) {
        //  shading
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        //  shading
        this.shaderShape = new createjs.Shape();
        this.shaderShape.graphics.beginFill("#000000");
        this.shaderShape.graphics.drawRect(0, -diff, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT + diff);
        this.shaderShape.graphics.endFill();
        this.addChild(this.shaderShape);
        this.shaderShape.alpha = 0;
        createjs.Tween.get(this.shaderShape, {
            loop: false
        }).wait(300).to({
            alpha: 0.75
        }, 800, createjs.Ease.linear);
    }
    ;
    GameState.prototype.consolePrint = function(text) {
        var label = new createjs.Text(text,"bold 35px Verdana","#000000");
        this.addChild(label);
        label.x = 50;
        label.y = this.consoleH;
        this.consoleH += 40;
    }
    ;
    GameState.prototype.isInitiliazed = function() {
        return this.initiliazed;
    }
    ;
    GameState.prototype.onMouseDown = function(x, y) {
        DNGUIObject.wasHandlerThisFrame = false;
        for (var i = 0; i < this.gui.length; i++) {
            this.gui[i].onMouseDown(x, y);
        }
    }
    ;
    GameState.prototype.onMouseMove = function(x, y) {
        DNGUIObject.wasHandlerThisFrame = false;
        for (var i = 0; i < this.gui.length; i++) {
            this.gui[i].onMouseMove(x, y);
        }
    }
    ;
    GameState.prototype.onMouseUp = function(x, y) {
        DNGUIObject.wasHandlerThisFrame = false;
        for (var i = 0; i < this.gui.length; i++) {
            this.gui[i].onMouseUp(x, y);
        }
    }
    ;
    GameState.prototype.addGuiObject = function(gui_object) {
        this.gui.push(gui_object);
        this.addGameObject(gui_object);
    }
    ;
    GameState.prototype.update = function(dt) {
        this.liveTime += dt;
        this.newGameObjects = new Array();
        for (var i = 0; i < this.gameObjects.length; i++) {
            var obj = this.gameObjects[i];
            obj.update(dt);
            if (obj.isDead()) {
                obj.onDead();
            } else {
                this.newGameObjects.push(obj);
            }
        }
        this.gameObjects = this.newGameObjects;
    }
    ;
    GameState.prototype.forceUpdate = function(dt) {
        for (var i = 0; i < this.gameObjects.length; i++) {
            this.gameObjects[i].forceUpdate(dt);
        }
    }
    ;
    GameState.prototype.addGameObject = function(obj) {
        this.gameObjects.push(obj);
    }
    ;
    GameState.prototype.addGameObjectAt = function(obj, layer) {
        this.gameObjects.push(obj);
        if (layer) {
            layer.addChild(obj);
        }
    }
    ;
    GameState.prototype.addGameObjectAtPos = function(obj, layer, x, y) {
        this.gameObjects.push(obj);
        if (layer) {
            layer.addChild(obj);
            obj.x = x;
            obj.y = y;
        }
    }
    ;
    GameState.prototype.cleanup = function() {}
    ;
    GameState.prototype.resume = function() {}
    ;
    GameState.prototype.init = function() {
        this.initiliazed = true;
    }
    ;
    GameState.prototype.onOrientationChanged = function(landscape) {
        if (true) {
            if (landscape) {
                StateManager.g_instance.onPause();
            }
        }
    }
    ;
    GameState.prototype.alignByCenter = function(need_fill) {
        if (!Constants.g_isPC) {
            this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        } else {
            return;
        }
        if (need_fill) {
            if (Constants.ASSETS_HEIGHT < Constants.SCREEN_HEIGHT && !this.haveFill) {
                this.haveFill = true;
                //var fill_down: createjs.DisplayObject = DNAssetsManager.g_instance.getImage(Images.FILL_BOTTOM);
                //this.addChild(fill_down);
                //var fill_up: createjs.DisplayObject = DNAssetsManager.g_instance.getImage(Images.FILL_BOTTOM);
                //this.addChild(fill_up);
                //fill_up.scaleY = -1;
                var fill_h = 206;
                var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
                //if (diff > fill_h)
                //{
                //    fill_down.scaleY = (diff / fill_h);
                //    fill_up.scaleY = -(diff / fill_h);
                //    fill_down.y = Constants.ASSETS_HEIGHT;
                //}
                //else
                //{
                //    fill_down.y = Constants.ASSETS_HEIGHT;
                //}
            }
        }
    }
    ;
    GameState.prototype.checkParam = function(element, param) {
        if (!param) {
            console.log("wrong param", element);
        }
    }
    ;
    GameState.prototype.findGUIObject = function(name) {
        for (var i = 0; i < this.gui.length; i++) {
            if (this.gui[i].name == name) {
                return this.gui[i];
            }
        }
        return null;
    }
    ;
    GameState.prototype.onPause = function() {}
    ;
    GameState.prototype.onResume = function() {}
    ;
    GameState.prototype.onRestart = function() {}
    ;
    GameState.prototype.onKeyUp = function(key_code) {}
    ;
    GameState.prototype.onKeyDown = function(key_code) {}
    ;
    return GameState;
}(createjs.Container));
/// <reference path="references.ts" />
var Constants = (function() {
    function Constants() {}
    return Constants;
}());
Constants.HINT_DELAY = 5.0;
Constants.TRANSITION_TIME = 800;
Constants.LOAD_COMPLETE = "LOAD_COMPLETE";
//  Messages... Why lib does not contain them???
Constants.MOUSE_DOWN = "stagemousedown";
Constants.MOUSE_UP = "stagemouseup";
Constants.MOUSE_MOVE = "stagemousemove";
//   hz
Constants.COLOR_YELLOW = "#000000";
Constants.CELL_WIDTH = 54;
Constants.CELL_HEIGHT = 74;
Constants.FIELD_OFFSET_X = 83;
Constants.FIELD_OFFSET_Y = 68;
//  gameplay const
Constants.MATCH_TIME = 0.25;
Constants.GRAVITY_ACC = 2500;
// pixels per second
Constants.ASSETS_WIDTH = 700;
Constants.ASSETS_HEIGHT = 800;
Constants.PIXEL_RATIO = 1;
Constants.SCREEN_HEIGHT = 800;
Constants.SCREEN_SCALE = 1;
Constants.DPI = -1;
Constants.g_isPC = true;
Constants.DEBUG_MODE = false;
Constants.CONVEYOR_SPEED = 1;
Constants.IMAGE_BUTTON_SOUND_ON = "button_sound_on";
Constants.IMAGE_BUTTON_SOUND_OFF = "button_sound_off";
Constants.IMAGE_BUTTON_PLAY = "button_play";
Constants.IMAGE_BUTTON_MORE = "more_games";
Constants.IMAGE_BUTTON_EXIT = "button_exit";
Constants.IMAGE_BUTTON_PAUSE = "button_pause";
Constants.IMAGE_BUTTON_RESTART = "button_restart";
Constants.IMAGE_BUTTON_CREDITS = "button_credits";
Constants.IMAGE_BACK = "back";
Constants.IMAGE_TITLE = "title";
Constants.IMAGE_TITLE_MAIN_MENU_BACK = "main_menu_back";
Constants.IMAGE_ROTATE = "rotate";
Constants.IMAGE_FILL = "fill";
Constants.IMAGE_CONVEYOR = "conveyor";
Constants.IMAGE_PAUSE_WINDOW = "pause_window";
Constants.DOWN = "_down";
Constants.IMAGE_TRANSITION_DOWN = "transition_down";
Constants.IMAGE_TRANSITION_UP = "transition_up";
Constants.IMAGE_SELECT_LEVEL_BACK = "select_level_back";
Constants.IMAGE_POINTS_CONTROL_SMALL = "points_control_small";
Constants.IMAGE_POINTS_CONTROL_BIG = "points_control_big";
Constants.IMAGE_LEVEL_LOCKED = "level_locked";
Constants.IMAGE_LEVEL_BUTTON = "level_button";
Constants.IMAGE_BOMB = "bomb";
Constants.IMAGE_LINE = "line";
Constants.IMAGE_RING = "ring";
Constants.IMAGE_COMPLETE_WINDOW = "complete_window";
Constants.IMAGE_ADDITIONAL = "additional";
Constants.IMAGE_PLUS = "plus";
Constants.IMAGE_LINE_LEFT = "line_left";
Constants.IMAGE_LINE_RIGHT = "line_right";
Constants.IMAGE_LEVEL_COMPLETED_1 = "level_complete_1";
Constants.IMAGE_LEVEL_COMPLETED_2 = "level_complete_2";
Constants.IMAGE_LEVEL_FAILED_1 = "level_failed_1";
Constants.IMAGE_LEVEL_FAILED_2 = "level_failed_2";
Constants.IMAGE_HEADER_COMPLETE = "header_complete";
Constants.IMAGE_HEADER_FAILED = "header_failed";
Constants.IMAGE_STARS = "stars";
Constants.IMAGE_STARS_EMPTY = "stars_empty";
/// <reference path="references.ts" />
var LevelDef = (function() {
    function LevelDef() {}
    return LevelDef;
}());
var GameData = (function() {
    function GameData() {
        this.COMPLETED_STR = "toy_factory_levelsCompleted";
        this.SCORE_STR = "toy_factory_scorePerLevel";
        this.SCORE_STARS = "toy_factory_starsPerLevel";
        this.GRATZ_SHOWED = "toy_factory_gratzShowed";
        this.isGratzShowed = false;
        this.totalScore = 0;
        this.levelsCompleted = 0;
        this.starsPerLevel = new Array();
        this.scorePerLevel = new Array();
        //  9 - monster
        //  8 - bomb
        //  7 - line
        //  0 - hole
        //  1-5 chip
        //
        this.chips_def = [[8, 2, 3, 4], [9, 10, 11], [5, 6, 7, 8], //4
        [0, 1, 11], //5
        [2, 4, 10], //6
        [7, 8, 3], //7
        [0, 1, 9], //8
        [2, 4, 8, 3, 11], //9
        [5, 6, 7, 10], //10
        [4, 9, 1], //11
        [0, 2, 11, 8], //12
        [7, 10, 9, 3, 4], //13
        [0, 1, 6, 8], //14
        [11, 10, 9, 6], //15
        [3, 2, 9], //16
        [0, 1, 3, 7], //17
        [11, 3, 4, 9], //18
        [2, 5, 3, 8, 10], //19
        [3, 2, 4, 6, 0], //20
        [0, 1, 8, 9, 11], //21
        [10, 7, 4, 3, 2], //22
        [6, 1, 9, 3], //28
        [3, 2, 4, 6], //29
        [0, 1, 8, 9], //30
        [10, 7, 4, 3], //31
        [6, 1, 9, 3], //32
        [11, 10, 5, 2], //33
        [3, 4, 1, 6], //34
        [9, 10, 8, 5, 11], //35
        [11, 1, 0, 6], //36
        [10, 9, 8, 6], //23
        [11, 10, 5, 2, 0], //24
        [3, 4, 1, 6], //25
        [9, 10, 8, 5], //26
        [11, 1, 0, 6], //27
        [10, 9, 8, 6], ];
        this.levels = [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0]], [[0, 0, 0, 9, 9, 9, 9, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 3, 3, 3, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 3, 3, 3, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 3, 3, 3, 2, 2, 2]], [[0, 0, 9, 0, 0, 0, 0, 9, 0, 0], [0, 0, 2, 2, 0, 0, 2, 3, 0, 0], [0, 0, 1, 1, 0, 0, 2, 3, 0, 0], [0, 0, 2, 1, 0, 0, 2, 3, 0, 0], [0, 0, 3, 4, 0, 0, 4, 4, 0, 0], [0, 0, 3, 4, 0, 0, 4, 1, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0], [0, 0, 4, 1, 1, 1, 2, 1, 0, 0], [0, 0, 1, 1, 1, 1, 2, 1, 0, 0], ], [[0, 0, 9, 0, 0, 0, 0, 9, 0, 0], [0, 3, 1, 1, 1, 0, 3, 2, 0, 0], [0, 1, 3, 2, 1, 0, 3, 2, 0, 0], [0, 2, 2, 2, 2, 0, 3, 3, 0, 0], [0, 3, 3, 3, 3, 0, 1, 1, 3, 0], [1, 1, 3, 2, 2, 0, 1, 1, 2, 0], [2, 2, 1, 2, 2, 0, 1, 2, 2, 0], [1, 1, 2, 1, 1, 1, 1, 3, 1, 2], [2, 2, 3, 3, 2, 1, 3, 1, 1, 2], ], [[9, 0, 0, 0, 0, 0, 0, 0, 0, 9], [1, 1, 1, 2, 2, 3, 3, 2, 3, 1], [1, 2, 1, 3, 2, 3, 3, 1, 1, 3], [1, 1, 1, 1, 2, 1, 2, 2, 3, 1], [3, 3, 3, 2, 2, 2, 3, 3, 3, 1], [1, 1, 1, 2, 1, 1, 3, 2, 1, 1], [1, 3, 1, 1, 2, 2, 1, 3, 2, 2], [1, 1, 1, 2, 1, 3, 3, 2, 2, 1], [3, 2, 3, 1, 3, 3, 1, 3, 1, 2]], [[0, 0, 0, 0, 9, 9, 0, 0, 0, 0], [2, 1, 1, 3, 2, 2, 3, 1, 1, 1], [2, 1, 1, 2, 3, 3, 2, 2, 2, 1], [2, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 3, 3, 3, 2, 3, 2, 2, 2], [1, 1, 3, 3, 1, 1, 1, 1, 1, 1], [2, 2, 3, 3, 3, 3, 3, 2, 2, 2], [1, 1, 1, 1, 2, 2, 1, 1, 1, 1], [2, 2, 2, 3, 3, 3, 3, 2, 2, 2]], [[0, 0, 0, 9, 0, 0, 9, 0, 0, 9], [1, 2, 1, 2, 1, 3, 3, 2, 3, 1], [1, 2, 2, 3, 2, 2, 3, 3, 2, 3], [1, 1, 3, 1, 2, 1, 2, 2, 3, 1], [3, 1, 3, 2, 2, 2, 3, 3, 2, 1], [1, 2, 3, 2, 1, 1, 3, 2, 1, 1], [3, 2, 1, 1, 2, 2, 1, 3, 3, 2], [1, 2, 1, 2, 1, 3, 3, 2, 1, 1], [3, 2, 3, 1, 3, 3, 1, 3, 2, 2]], [[0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 1, 1, 2, 2, 3, 3, 2, 3, 0], [1, 2, 1, 3, 2, 3, 3, 1, 2, 3], [1, 1, 1, 5, 2, 1, 4, 2, 2, 1], [3, 3, 5, 5, 2, 2, 4, 3, 2, 1], [1, 5, 5, 8, 5, 5, 4, 2, 1, 1], [1, 3, 1, 5, 2, 2, 1, 3, 2, 2], [1, 1, 1, 5, 1, 3, 3, 4, 1, 7], [2, 2, 3, 1, 3, 3, 1, 3, 1, 1]], [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 3, 0, 9, 9], [0, 0, 0, 0, 0, 3, 3, 4, 1, 1], [9, 0, 0, 0, 9, 3, 4, 4, 2, 2], [1, 9, 0, 1, 1, 1, 1, 4, 2, 2], [1, 1, 1, 1, 2, 2, 1, 1, 1, 1], ], [[9, 0, 0, 0, 0, 0, 0, 0, 0, 9], [1, 1, 1, 2, 2, 3, 3, 2, 3, 1], [1, 2, 1, 3, 2, 3, 3, 1, 1, 3], [1, 1, 1, 1, 2, 1, 2, 2, 3, 1], [3, 3, 3, 2, 2, 2, 3, 3, 3, 1], [1, 1, 1, 2, 1, 1, 3, 2, 1, 1], [1, 3, 1, 1, 2, 2, 1, 3, 2, 2], [1, 1, 1, 2, 1, 3, 3, 2, 2, 1], [3, 2, 3, 1, 3, 3, 1, 3, 1, 2]], [[0, 0, 0, 0, 9, 9, 0, 0, 0, 0], [1, 2, 1, 2, 1, 3, 3, 2, 3, 4], [1, 2, 2, 3, 2, 2, 3, 3, 2, 3], [1, 4, 3, 1, 2, 1, 2, 2, 3, 1], [3, 1, 4, 2, 4, 4, 3, 4, 4, 1], [4, 2, 3, 2, 1, 4, 3, 2, 4, 1], [4, 4, 1, 1, 2, 4, 1, 3, 4, 2], [1, 2, 1, 2, 1, 3, 3, 2, 1, 1], [3, 4, 4, 1, 3, 3, 1, 3, 2, 2]], [[3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 9, 0, 0, 3, 9], [3, 3, 3, 0, 2, 1, 3, 0, 2, 3], [5, 5, 5, 0, 2, 2, 2, 0, 2, 3], [5, 5, 5, 0, 2, 5, 2, 0, 2, 3], [5, 5, 5, 0, 5, 5, 5, 0, 4, 3], [1, 1, 1, 0, 2, 3, 2, 0, 4, 5], [1, 1, 1, 0, 3, 2, 3, 0, 4, 2], [1, 1, 1, 0, 2, 3, 2, 0, 2, 1], ], [[9, 0, 0, 0, 9, 9, 0, 0, 0, 9], [1, 2, 1, 2, 2, 3, 4, 2, 3, 1], [1, 2, 1, 3, 2, 3, 4, 1, 3, 3], [1, 1, 4, 4, 2, 1, 2, 2, 4, 1], [3, 3, 4, 4, 2, 2, 3, 3, 3, 1], [1, 2, 1, 2, 1, 1, 4, 4, 4, 1], [1, 2, 4, 1, 2, 3, 2, 2, 2, 2], [1, 1, 4, 2, 1, 3, 3, 2, 2, 1], [8, 2, 8, 3, 8, 4, 8, 4, 8, 2]], [[0, 0, 9, 0, 9, 0, 9, 0, 0, 0], [0, 0, 3, 0, 8, 0, 3, 0, 0, 0], [0, 0, 3, 0, 8, 0, 3, 0, 0, 0], [0, 0, 3, 0, 1, 0, 3, 0, 0, 0], [0, 0, 2, 0, 2, 0, 2, 0, 0, 0], [0, 0, 2, 0, 8, 0, 2, 0, 0, 0], [0, 0, 1, 0, 3, 0, 1, 0, 0, 0], [0, 0, 2, 0, 4, 0, 2, 0, 0, 0], [0, 0, 2, 0, 1, 0, 2, 0, 0, 0], ], [[9, 9, 9, 0, 0, 0, 0, 9, 9, 9], [2, 2, 1, 9, 9, 9, 9, 1, 3, 2], [3, 2, 1, 2, 3, 2, 1, 2, 1, 3], [3, 2, 1, 2, 1, 3, 1, 2, 3, 2], [3, 1, 2, 1, 3, 2, 1, 2, 3, 1], [3, 2, 3, 3, 3, 3, 1, 2, 2, 1], [2, 1, 2, 1, 3, 2, 1, 2, 2, 1], [3, 2, 2, 3, 1, 2, 3, 3, 2, 3], [1, 3, 2, 3, 1, 2, 2, 1, 2, 2], ], [[0, 0, 0, 9, 0, 0, 9, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0], [1, 4, 3, 3, 2, 1, 2, 2, 3, 1], [3, 1, 4, 3, 4, 4, 1, 4, 2, 1], [4, 3, 3, 2, 1, 4, 3, 2, 4, 1], [3, 2, 1, 1, 1, 2, 3, 3, 4, 2], [1, 2, 4, 2, 1, 3, 3, 2, 1, 1], [3, 4, 4, 3, 8, 8, 1, 3, 2, 2]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 9, 9, 9, 0, 0, 0], [7, 2, 0, 2, 2, 2, 2, 0, 0, 0], [2, 2, 0, 4, 4, 3, 4, 0, 1, 2], [3, 4, 0, 2, 1, 1, 2, 0, 2, 4], [3, 4, 0, 2, 1, 3, 2, 0, 4, 4], [3, 3, 0, 2, 3, 2, 2, 0, 2, 2], [1, 2, 0, 2, 1, 1, 2, 0, 2, 2], ], [[0, 0, 0, 0, 5, 9, 0, 0, 0, 0], [0, 0, 3, 3, 5, 2, 2, 0, 0, 0], [0, 0, 4, 4, 5, 3, 3, 3, 0, 0], [0, 0, 1, 3, 5, 4, 1, 4, 0, 0], [0, 0, 1, 2, 5, 2, 2, 3, 0, 0], [0, 0, 1, 2, 5, 3, 3, 3, 0, 0], [0, 0, 2, 3, 5, 4, 4, 1, 0, 0], [0, 3, 3, 4, 5, 4, 4, 2, 2, 0], [0, 3, 4, 3, 5, 5, 4, 1, 2, 0], ], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 9, 0, 0, 0, 0, 3], [9, 9, 0, 0, 2, 4, 0, 0, 0, 3], [1, 1, 0, 0, 3, 2, 0, 0, 2, 3], [2, 2, 0, 0, 3, 2, 0, 0, 3, 3], [2, 1, 0, 3, 4, 2, 0, 0, 2, 3], [7, 1, 0, 2, 3, 4, 0, 0, 3, 7], [1, 1, 2, 3, 4, 5, 1, 2, 3, 3], ], [[0, 0, 0, 3, 9, 0, 0, 0, 0, 0], [7, 7, 7, 3, 3, 3, 3, 7, 7, 7], [1, 5, 5, 3, 2, 5, 3, 3, 2, 1], [1, 5, 3, 3, 1, 5, 2, 5, 3, 1], [3, 1, 2, 2, 4, 4, 3, 4, 2, 1], [4, 2, 3, 2, 1, 4, 3, 2, 4, 1], [4, 4, 1, 1, 2, 4, 1, 2, 4, 2], [1, 5, 5, 5, 1, 3, 3, 3, 1, 1], [3, 5, 4, 5, 3, 2, 1, 3, 2, 2]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 9, 0, 0, 0, 0], [2, 0, 0, 0, 0, 1, 0, 0, 0, 0], [7, 0, 0, 0, 2, 2, 2, 0, 0, 0], [3, 0, 0, 3, 2, 3, 2, 2, 0, 0], [7, 0, 4, 5, 5, 4, 1, 3, 1, 0], [2, 1, 1, 1, 2, 5, 3, 2, 1, 3], [7, 2, 3, 2, 2, 4, 2, 3, 4, 5], [1, 1, 1, 2, 1, 1, 3, 3, 4, 4], ], [[0, 9, 0, 0, 0, 0, 0, 0, 9, 0], [9, 2, 2, 4, 2, 3, 1, 4, 2, 9], [3, 4, 3, 1, 2, 2, 1, 2, 3, 1], [4, 3, 4, 1, 3, 4, 2, 3, 1, 3], [4, 4, 3, 3, 2, 4, 2, 1, 2, 3], [2, 2, 3, 2, 1, 2, 1, 1, 2, 2], [4, 4, 4, 4, 4, 3, 3, 3, 3, 3], [4, 2, 2, 2, 4, 3, 1, 1, 1, 3], [4, 4, 4, 4, 4, 3, 3, 3, 3, 3], ], //1
        [[0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 1, 3, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], //2
        [[9, 0, 0, 0, 0, 0, 0, 0, 0, 9], [2, 1, 3, 3, 2, 2, 2, 3, 3, 2], [2, 1, 2, 3, 3, 1, 1, 3, 1, 2], [2, 1, 2, 1, 1, 2, 2, 2, 1, 2], [3, 2, 1, 2, 2, 1, 3, 3, 3, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 2, 2, 3, 3, 3, 2, 2, 2, 3], [4, 1, 1, 2, 2, 2, 1, 1, 1, 4], [2, 3, 3, 3, 4, 4, 4, 1, 2, 2]], //3
        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0, 0, 9, 0, 0], [0, 2, 9, 0, 0, 0, 9, 2, 0, 0], [0, 2, 2, 9, 0, 9, 2, 2, 0, 0], [0, 2, 2, 3, 9, 3, 2, 2, 0, 0], [0, 3, 3, 1, 3, 1, 3, 3, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0], [0, 1, 1, 2, 2, 2, 1, 1, 0, 0], [0, 3, 3, 1, 1, 1, 3, 3, 0, 0]], //4
        [[0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 9, 0, 0, 0, 0, 9, 0], [0, 4, 0, 2, 0, 0, 0, 0, 2, 0], [0, 1, 0, 2, 0, 0, 0, 0, 2, 0], [0, 1, 4, 2, 4, 4, 4, 4, 1, 0], [0, 1, 2, 3, 3, 3, 3, 2, 2, 0], [0, 2, 2, 2, 3, 3, 3, 2, 2, 0]], //5
        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 2, 2, 1, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 4, 4, 4, 3, 2, 2, 0, 0], [0, 2, 2, 2, 3, 3, 3, 2, 2, 0]], //6
        [[9, 9, 9, 0, 0, 0, 0, 9, 9, 9], [2, 2, 1, 0, 9, 9, 0, 1, 3, 2], [3, 2, 1, 9, 3, 2, 9, 2, 1, 3], [2, 2, 1, 2, 1, 3, 1, 2, 3, 8], [8, 1, 2, 1, 3, 2, 1, 2, 3, 1], [2, 2, 3, 3, 3, 3, 1, 2, 2, 7], [7, 1, 2, 4, 4, 4, 1, 2, 2, 2], [3, 4, 4, 4, 4, 4, 4, 4, 4, 3], [1, 3, 2, 3, 1, 2, 2, 1, 2, 2], ], //7
        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 0, 3, 9], [0, 0, 0, 0, 2, 1, 3, 0, 2, 3], [0, 0, 0, 0, 2, 1, 2, 0, 1, 3], [0, 0, 0, 0, 2, 5, 2, 0, 2, 3], [0, 0, 0, 0, 5, 5, 5, 0, 4, 3], [0, 0, 0, 0, 2, 3, 2, 0, 4, 5], [0, 7, 0, 0, 3, 2, 3, 0, 4, 2], [0, 7, 0, 0, 2, 3, 2, 0, 2, 1]], //8
        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 0, 0, 9, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0], [1, 4, 3, 3, 2, 1, 2, 2, 3, 1], [3, 1, 4, 3, 4, 4, 1, 4, 2, 1], [4, 3, 3, 2, 7, 4, 3, 2, 4, 1], [3, 2, 1, 1, 1, 7, 3, 3, 4, 2], [1, 2, 4, 2, 1, 3, 3, 2, 1, 1], [3, 4, 4, 3, 8, 8, 1, 3, 2, 2]], //9
        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 3, 3, 9, 4, 3, 3, 3, 9], [1, 1, 1, 1, 3, 2, 2, 3, 2, 3], [2, 2, 3, 3, 3, 2, 2, 2, 3, 3], [1, 1, 3, 3, 4, 2, 3, 3, 2, 3], [7, 1, 2, 2, 3, 4, 2, 2, 3, 2], [1, 1, 2, 3, 4, 1, 1, 2, 3, 3]], [[0, 9, 0, 0, 0, 0, 0, 0, 9, 0], [3, 3, 1, 2, 4, 2, 2, 3, 4, 1], [1, 3, 1, 3, 4, 5, 5, 2, 4, 2], [1, 3, 5, 4, 3, 5, 2, 1, 4, 2], [1, 3, 2, 3, 4, 5, 4, 5, 4, 4], [2, 3, 4, 3, 2, 5, 2, 2, 2, 1], [3, 5, 2, 5, 2, 3, 3, 1, 2, 3], [4, 5, 5, 5, 4, 4, 3, 4, 3, 4], [2, 3, 3, 4, 4, 3, 4, 3, 4, 4], ], [[0, 0, 0, 0, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 3, 3, 1, 0, 0, 0], [0, 0, 1, 2, 4, 4, 2, 1, 0, 0], [0, 1, 3, 2, 2, 2, 3, 1, 1, 0], [1, 3, 4, 4, 4, 1, 3, 2, 1, 1], ], [[3, 3, 3, 0, 9, 0, 0, 0, 9, 0], [2, 3, 4, 2, 3, 4, 2, 3, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 4, 3, 2, 4, 3, 3, 4, 2], [1, 2, 3, 2, 1, 4, 2, 2, 3, 3], [3, 3, 2, 4, 4, 3, 2, 1, 2, 3], [4, 3, 2, 3, 1, 3, 2, 1, 3, 1], [2, 3, 2, 3, 4, 4, 4, 4, 1, 2], [1, 1, 2, 1, 2, 2, 1, 2, 3, 4], ], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [2, 2, 3, 2, 2, 3, 3, 4, 4, 4], [4, 4, 4, 4, 3, 4, 3, 4, 3, 2], [1, 2, 3, 4, 3, 2, 1, 2, 3, 2], [3, 2, 2, 1, 1, 3, 2, 3, 3, 2], [3, 3, 3, 2, 2, 2, 3, 2, 1, 2], [2, 3, 3, 4, 4, 4, 1, 2, 2, 2], [1, 4, 4, 2, 2, 2, 3, 3, 3, 3], [4, 3, 2, 1, 4, 2, 2, 2, 2, 2]], [[9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [3, 1, 1, 3, 2, 3, 3, 3, 2, 1], [2, 1, 1, 3, 4, 4, 3, 2, 1, 2], [3, 4, 3, 2, 1, 4, 3, 2, 1, 3], [4, 2, 3, 1, 3, 2, 1, 2, 3, 3], [4, 1, 3, 3, 1, 2, 3, 4, 2, 3], [1, 2, 3, 3, 2, 3, 1, 2, 4, 1], [4, 3, 4, 4, 1, 1, 3, 3, 1, 1], [3, 2, 4, 1, 3, 2, 1, 1, 2, 1]]];
    }
    GameData.getInstance = function() {
        if (GameData.instance == null) {
            GameData.instance = new GameData();
        }
        return GameData.instance;
    }
    ;
    GameData.prototype.setGratzShowed = function() {
        this.isGratzShowed = true;
    }
    ;
    GameData.prototype.getGratzShowed = function() {
        return this.isGratzShowed;
    }
    ;
    GameData.prototype.levelsAvailable = function() {
        if (Constants.DEBUG_MODE) {
            return this.getTotalLevelCount();
        }
        return Math.min(this.levelsCompleted + 1, this.getTotalLevelCount());
    }
    ;
    GameData.prototype.getTotalLevelCount = function() {
        return this.levels.length;
    }
    ;
    GameData.prototype.getLevelDef = function(level) {
        return this.levels[level];
    }
    ;
    GameData.prototype.getChipsDef = function(level) {
        return this.chips_def[level];
    }
    ;
    GameData.prototype.save = function() {
        try {
            window.localStorage.setItem(this.COMPLETED_STR, this.levelsCompleted.toString());
            window.localStorage.setItem(this.SCORE_STR, JSON.stringify(this.scorePerLevel));
            window.localStorage.setItem(this.GRATZ_SHOWED, this.isGratzShowed.toString());
            window.localStorage.setItem(this.SCORE_STARS, JSON.stringify(this.starsPerLevel));
        } catch (e) {
            console.log("save error");
        }
    }
    ;
    GameData.prototype.load = function() {
        try {
            for (var i = 0; i < this.getTotalLevelCount(); i++) {
                this.starsPerLevel.push(0);
            }
            if (window.localStorage.getItem(this.SCORE_STARS)) {
                this.starsPerLevel = JSON.parse(window.localStorage.getItem(this.SCORE_STARS));
            }
            for (var i = 0; i < this.getTotalLevelCount(); i++) {
                this.scorePerLevel.push(0);
            }
            if (window.localStorage.getItem(this.SCORE_STR)) {
                this.scorePerLevel = JSON.parse(window.localStorage.getItem(this.SCORE_STR));
            }
            this.recalcTotalScore();
            this.isGratzShowed = (window.localStorage.getItem(this.GRATZ_SHOWED) == "true");
            this.levelsCompleted = +window.localStorage.getItem(this.COMPLETED_STR) || 0;
        } catch (e) {
            console.log("load error");
        }
    }
    ;
    GameData.prototype.getTotalScore = function() {
        return this.totalScore;
    }
    ;
    GameData.prototype.getLevelsCompleted = function() {
        return this.levelsCompleted;
    }
    ;
    GameData.prototype.onWinLevel = function(level, score, stars) {
        this.scorePerLevel[level] = Math.max(this.scorePerLevel[level], score);
        this.recalcTotalScore();
        this.starsPerLevel[level] = Math.max(this.starsPerLevel[level], stars);
        if (level == this.levelsCompleted) {
            this.levelsCompleted++;
        }
        this.save();
    }
    ;
    GameData.prototype.recalcTotalScore = function() {
        this.totalScore = 0;
        for (var i = 0; i < this.scorePerLevel.length; i++) {
            this.totalScore += this.scorePerLevel[i];
        }
    }
    ;
    GameData.prototype.getStarsInLevel = function(level_num) {
        return this.starsPerLevel[level_num];
    }
    ;
    GameData.prototype.getTotalStars = function() {
        var stars_count = 0;
        for (var i = 0; i < this.starsPerLevel.length; i++) {
            stars_count += this.starsPerLevel[i];
        }
        return stars_count;
    }
    ;
    return GameData;
}());
GameData.instance = null;
/// <reference path="references.ts" />
var AssetsManager = (function() {
    function AssetsManager(manifest, sound_manifest, athlases, localizable_images, progress_callback) {
        this.imageNameToSpriteSheetName = new Object();
        this.athlasNameToPicturesCount = new Object();
        AssetsManager.g_instance = this;
        this.athlases = athlases;
        this.localizableImages = localizable_images;
        this.manifest = manifest;
        this.soundManifest = sound_manifest;
        this.progressCallBack = progress_callback;
        this.startDownLoad();
    }
    AssetsManager.prototype.startDownLoad = function() {
        var _this = this;
        this.loader = new createjs.LoadQueue();
        this.loader.addEventListener("progress", function(e) {
            return _this.progressCallBack(e);
        });
        this.loader.addEventListener("complete", function(e) {
            return _this.handleComplete(e);
        });
        createjs.Sound.registerManifest(this.soundManifest, "assets/sound/");
        this.loader.installPlugin(createjs.SoundJS);
        this.loader.loadManifest(this.manifest);
    }
    ;
    AssetsManager.prototype.handleComplete = function(event) {
        //  handle athlases
        for (var i = 0; i < this.athlases.length; i++) {
            var obj = this.athlases[i];
            this.athlasNameToPicturesCount[obj["images"][0]] = obj["frames"].length;
            obj["images"] = [this.getBitmap(obj["images"][0]).image];
            var sprite_sheet = new createjs.SpriteSheet(obj);
            var animation_names = sprite_sheet.getAnimations();
            for (var nm = 0; nm < animation_names.length; nm++) {
                this.imageNameToSpriteSheetName[animation_names[nm]] = sprite_sheet;
            }
        }
        StateManager.g_instance.allAssetsLoaded();
    }
    ;
    AssetsManager.prototype.getAthlasFramesCount = function(name) {
        return this.athlasNameToPicturesCount[name];
    }
    ;
    AssetsManager.prototype.getResult = function(name) {
        return this.loader.getResult(name);
    }
    ;
    AssetsManager.prototype.getBitmap = function(name) {
        var bitmap = new createjs.Bitmap(this.loader.getResult(name));
        if (!bitmap.getBounds()) {
            console.log("bitmap error", name);
            //return new createjs.Bitmap();
        }
        return bitmap;
    }
    ;
    AssetsManager.prototype.getCenteredBitmap = function(name) {
        var bitmap = new createjs.Bitmap(this.loader.getResult(name));
        if (!bitmap.image) {
            console.log("ERROR HERE", name);
        }
        bitmap.x = -bitmap.image.width / 2;
        bitmap.y = -bitmap.image.height / 2;
        return bitmap;
    }
    ;
    AssetsManager.prototype.getImage = function(name) {
        if (this.localizableImages.indexOf(name) != -1) {
            name = DNStringManager.getInstance().getLanguagePrefix() + name;
        }
        if (this.imageNameToSpriteSheetName[name]) {
            return this.getSprite(name);
        }
        return this.getBitmap(name);
    }
    ;
    AssetsManager.prototype.getCenteredImage = function(name) {
        var image = this.getImage(name);
        image.x = -image.getBounds().width / 2;
        image.y = -image.getBounds().height / 2;
        return image;
    }
    ;
    AssetsManager.prototype.getCenteredImageWithProxy = function(name) {
        var proxy = new createjs.Container();
        proxy.addChild(this.getCenteredImage(name));
        return proxy;
    }
    ;
    AssetsManager.prototype.getCenteredBitmapWithProxy = function(name) {
        var proxy = new createjs.Container();
        proxy.addChild(this.getCenteredBitmap(name));
        return proxy;
    }
    ;
    AssetsManager.prototype.getSprite = function(name) {
        var sprite = new createjs.Sprite(this.imageNameToSpriteSheetName[name],name);
        sprite.stop();
        return sprite;
    }
    ;
    AssetsManager.prototype.getCenteredSprite = function(name) {
        var sprite = this.getSprite(name);
        sprite.x = -sprite.getBounds().width / 2;
        sprite.y = -sprite.getBounds().height / 2;
        return sprite;
    }
    ;
    return AssetsManager;
}());
/// <reference path="references.ts" />
var GameObject = (function(_super) {
    __extends(GameObject, _super);
    function GameObject() {
        var _this = _super.call(this) || this;
        _this.liveTime = 0;
        _this.forceLiveTime = 0;
        _this.killed = false;
        return _this;
    }
    GameObject.prototype.update = function(dt) {
        this.liveTime += dt;
    }
    ;
    GameObject.prototype.forceUpdate = function(dt) {
        this.forceLiveTime += dt;
    }
    ;
    GameObject.prototype.kill = function() {
        this.killed = true;
    }
    ;
    GameObject.prototype.isDead = function() {
        return this.killed;
    }
    ;
    GameObject.prototype.onDead = function() {
        //  cleanup here
        if (this.parent) {
            this.parent.removeChild(this);
        }
    }
    ;
    return GameObject;
}(createjs.Container));
/// <reference path="references.ts" />
var DNGUIObject = (function(_super) {
    __extends(DNGUIObject, _super);
    function DNGUIObject() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DNGUIObject.prototype.onMouseDown = function(x, y) {}
    ;
    DNGUIObject.prototype.onMouseUp = function(x, y) {}
    ;
    DNGUIObject.prototype.onMouseMove = function(x, y) {}
    ;
    DNGUIObject.prototype.setHandler = function(callback) {//  do nothing
    }
    ;
    return DNGUIObject;
}(GameObject));
DNGUIObject.wasHandlerThisFrame = false;
/// <reference path="references.ts" />
var Chip = (function(_super) {
    __extends(Chip, _super);
    function Chip(id, x_index, y_index, spawn_y_pos, spawn_delay, level_spawn) {
        if (level_spawn === void 0) {
            level_spawn = false;
        }
        var _this = _super.call(this) || this;
        _this.STATE_NORMAL = "STATE_NORMAL";
        _this.STATE_SHIFT_DOWN = "STATE_SHIFT_DOWN";
        _this.STATE_MATCH = "STATE_MATCH";
        _this.state = null;
        _this.selected = false;
        _this.stateTime = 0;
        _this.bonusType = null;
        _this.matchReason = null;
        _this.monster = false;
        _this.plus = false;
        _this.plusPic = null;
        _this.plusFrame = null;
        _this.effect = null;
        _this.jumpedCD = Utils.RandomRange(1.5, 3);
        _this.isBonusBlinking = true;
        _this.matching = false;
        _this.monsterID = 0;
        _this.spawnYPos = spawn_y_pos;
        _this.setIncexes(x_index, y_index);
        var chips_def = GameData.getInstance().getChipsDef(PlayState.level);
        if (id != 8) {
            if (id == 6 || id == 7) {
                _this.chipPicture = AssetsManager.g_instance.getCenteredImageWithProxy("cake_12");
                _this.addChild(_this.chipPicture);
            } else {
                _this.chipPicture = AssetsManager.g_instance.getCenteredImageWithProxy("cake_" + chips_def[id]);
                _this.addChild(_this.chipPicture);
            }
        }
        _this.colorID = id;
        if (level_spawn) {
            _this.speed = new createjs.Point(0,500);
            _this.acceleration = new createjs.Point(0,Constants.GRAVITY_ACC);
            _this.setState(_this.STATE_NORMAL);
            _this.y = spawn_y_pos;
            _this.x = PlayState.g_instance.getXPosByXIndex(x_index);
            _this.spawnDelay = 0;
        } else {
            _this.setState(Chip.STATE_SPAWN_NEW);
            _this.spawnDelay = spawn_delay;
        }
        _this.scaleX = _this.scaleY = 0.87;
        return _this;
    }
    Chip.prototype.isMonster = function() {
        return this.monster;
    }
    ;
    Chip.prototype.havePlus = function() {
        return this.plus;
    }
    ;
    Chip.prototype.addPlus = function() {
        this.plus = true;
        this.plusPic = AssetsManager.g_instance.getCenteredImageWithProxy("plus");
        this.plusPic.x += 9;
        this.plusPic.y += 9;
        this.addChild(this.plusPic);
        PlayState.g_instance.addConverToPlusEffect(this);
        createjs.Tween.get(this.plusPic, {
            loop: false
        }).wait(100).to({
            alpha: 1.0
        }, 350, createjs.Ease.linear);
        createjs.Tween.get(this.plusPic, {
            loop: false
        }).wait(100).to({
            scaleX: 0.75,
            scaleY: 0.75
        }, 350, createjs.Ease.backOut);
        this.plusFrame = AssetsManager.g_instance.getCenteredImageWithProxy("box_frame");
        this.plusFrame.x += 0;
        this.plusFrame.alpha = 0;
        this.plusFrame.y += 0;
        this.addChild(this.plusFrame);
        createjs.Tween.get(this.plusFrame, {
            loop: false
        }).wait(150).to({
            alpha: 0.8
        }, 350, createjs.Ease.linear);
    }
    ;
    Chip.prototype.getBonusPic = function() {
        return this.bonusPic;
    }
    ;
    Chip.prototype.blink = function(time) {}
    ;
    Chip.prototype.stopBlink = function() {}
    ;
    Chip.prototype.getBonusType = function() {
        return this.bonusType;
    }
    ;
    Chip.prototype.getColorID = function() {
        return this.colorID;
    }
    ;
    Chip.prototype.getIndeces = function() {
        return new createjs.Point(this.indexX,this.indexY);
    }
    ;
    Chip.prototype.getIndexX = function() {
        return this.indexX;
    }
    ;
    Chip.prototype.getIndexY = function() {
        return this.indexY;
    }
    ;
    Chip.prototype.setIncexes = function(x, y) {
        this.indexX = x;
        this.indexY = y;
    }
    ;
    Chip.prototype.setEffect = function(effect) {
        this.effect = effect;
    }
    ;
    Chip.prototype.jump = function() {
        PlayState.g_instance.addGameObject(new Jumper(this));
    }
    ;
    Chip.prototype.stopBlinkBonus = function() {
        this.isBonusBlinking = false;
        createjs.Tween.get(this.bonusPic).to({
            scaleX: 1,
            scaleY: 1
        }, 200);
    }
    ;
    Chip.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.stateTime += dt;
        if (this.effect) {
            this.effect.y = this.y;
            if (this.effect.isDead()) {
                this.effect = null;
            }
        }
        if (this.bonusPic && this.isBonusBlinking) {
            this.bonusPic.scaleX = this.bonusPic.scaleY = 0.85 + Math.sin(this.liveTime * 5) * 0.1;
        }
        if (this.plusPic) {
            this.plusPic.scaleX = this.plusPic.scaleY = 0.75 + Math.sin(this.liveTime * 4) * 0.08;
            this.plusFrame.alpha = 0.8 + Math.sin(this.liveTime * 9) * 0.2;
        }
        switch (this.state) {
        case this.STATE_NORMAL:
            {
                if (this.isMonster()) {
                    if (this.jumpedCD > 0) {
                        this.jumpedCD -= dt;
                    } else {
                        this.jump();
                        this.jumpedCD = Utils.RandomRange(3, 5.5);
                    }
                }
            }
            break;
        case Chip.STATE_SPAWN_NEW:
            {
                this.spawnDelay -= dt;
                if (this.spawnDelay < 0) {
                    this.speed.y += this.acceleration.y * dt;
                    this.x += dt * this.speed.x;
                    this.y += dt * this.speed.y;
                    if (this.y >= this.spawnYPos) {
                        this.y = this.spawnYPos;
                        this.setState(this.STATE_NORMAL);
                        PlayState.g_instance.onShiftEnded();
                    }
                }
            }
            break;
        case this.STATE_SHIFT_DOWN:
            {
                if (this.stateTime < 0.15) {
                    break;
                }
                this.speed.y += this.acceleration.y * dt;
                this.x += dt * this.speed.x;
                this.y += dt * this.speed.y;
                if (this.y >= this.spawnYPos) {
                    this.y = this.spawnYPos;
                    this.setState(this.STATE_NORMAL);
                    PlayState.g_instance.onShiftEnded();
                }
                //  restore form
            }
            break;
        case Chip.STATE_FALL_DOWN:
            {
                this.speed.y += this.acceleration.y * dt;
                this.x += dt * this.speed.x;
                this.y += dt * this.speed.y;
                if (this.monster) {
                    if (this.y >= 700) {
                        this.y = 700;
                        this.toyDisappear();
                        this.setState(Chip.STATE_SAVE_TOY);
                        break;
                    }
                } else {
                    if (this.y >= Constants.SCREEN_HEIGHT + this.chipPicture.getBounds().height) {
                        this.kill();
                    }
                }
            }
            break;
        case this.STATE_MATCH:
            {
                this.fallDown();
            }
            break;
        }
    }
    ;
    Chip.prototype.toyDisappear = function() {
        var _this = this;
        PlayState.g_instance.clearCell(this);
        PlayState.g_instance.checkWin();
        var delay = Utils.RandomRangeInt(50, 100);
        createjs.Tween.get(this).wait(350 + delay).call(function() {
            PlayState.g_instance.addPointsAt(_this, Chip.MATCH_LAND, 0);
            PlayState.g_instance.playFreedomSound();
            var disappear = new DNMovieClip("shuffle_",0.03,false,20);
            disappear.scaleX = disappear.scaleY = 1.1;
            disappear.x = _this.x;
            disappear.y = _this.y;
            PlayState.g_instance.addChild(disappear);
            PlayState.g_instance.addGameObject(disappear);
            createjs.Tween.get(disappear).wait(180).to({
                alpha: 0
            }, 200);
        });
        createjs.Tween.get(this).wait(350 + delay).to({
            alpha: 0
        }, 200).call(function() {
            _this.kill();
        });
    }
    ;
    Chip.prototype.setState = function(state) {
        if (state == this.state) {
            return;
        }
        this.stateTime = 0;
        this.state = state;
        switch (state) {
        case this.STATE_NORMAL:
            break;
        case this.STATE_SHIFT_DOWN:
            //  restore form
            //createjs.Tween.get(this, { loop: false }).to({ scaleX: 1.0, scaleY: 1.0 }, 170, createjs.Ease.linear);
            break;
        case Chip.STATE_SPAWN_NEW:
            {
                this.speed = new createjs.Point(0,500);
                this.acceleration = new createjs.Point(0,Constants.GRAVITY_ACC);
            }
            break;
        }
    }
    ;
    Chip.prototype.shiftDown = function(new_index_y, new_y) {
        this.speed = new createjs.Point(0,0);
        this.deselect();
        this.indexY = new_index_y;
        this.spawnYPos = new_y;
        this.setState(this.STATE_SHIFT_DOWN);
        if (this.monster && new_index_y == 8) {
            this.fallDown();
            PlayState.g_instance.clearCell(this);
            //  ??? hz need more testing
            //PlayState.g_instance.addChild(this);
        }
    }
    ;
    Chip.prototype.onMatch = function(reason, line_bonus) {
        PlayState.g_instance.underChipsLayer.addChild(this);
        this.bonusPic = null;
        if (line_bonus) {
            PlayState.g_instance.sortLineChips(this);
        }
        if (reason == Chip.MATCH_REASON_BONUS) {
            if (this.isBonus()) {//return;
            } else {
                this.kill();
            }
        }
        if (reason == Chip.MATCH_REASON_SIMPLE) {
            if (this.isBonus()) {//this.kill();
            }
        }
        this.stateTime = 0;
        this.matchReason = reason;
        this.setState(this.STATE_MATCH);
        PlayState.g_instance.clearCell(this);
        PlayState.g_instance.shiftChips();
    }
    ;
    Chip.prototype.match = function(reason, line_bonus, conf) {
        var _this = this;
        if (this.isMonster()) {
            return;
        }
        if (conf) {
            var conf_emit = new ConfettiEmitter();
            conf_emit.x = this.x;
            conf_emit.y = this.y;
            PlayState.g_instance.addGameObject(conf_emit);
            PlayState.g_instance.addChild(conf_emit);
        }
        if (this.plus) {
            this.plusPic.visible = false;
            this.plusFrame.visible = false;
            PlayState.g_instance.querySpawnNewChips(4);
            PlayState.g_instance.addGameObjectAtPos(new PlusEffect(), PlayState.g_instance, this.x, this.y);
            SoundManager.g_instance.play(SoundManager.SOUND_PLUS, 0.5);
        }
        this.matching = true;
        createjs.Tween.get(this).to({
            x: this.x - 35,
            y: this.y - 35
        }, 200, createjs.Ease.linear).call(function() {
            return _this.onMatch(reason, line_bonus);
        });
    }
    ;
    Chip.prototype.select = function() {
        this.selected = true;
    }
    ;
    Chip.prototype.deselect = function() {
        if (this.selected) {
            this.selected = false;
        }
    }
    ;
    Chip.prototype.isOutOfField = function() {
        if (this.state == this.STATE_MATCH) {
            return true;
        }
        if (this.isDead()) {
            return true;
        }
        return false;
    }
    ;
    Chip.prototype.isNormal = function() {
        return this.state == this.STATE_NORMAL;
    }
    ;
    Chip.prototype.getState = function() {
        return this.state;
    }
    ;
    Chip.prototype.isBonus = function() {
        return this.bonusType != null;
    }
    ;
    Chip.prototype.convertToMonster = function() {
        this.removeAllChildren();
        this.colorID = -1;
        this.monsterID = Utils.RandomRangeInt(0, 3);
        this.chipPicture = AssetsManager.g_instance.getCenteredImageWithProxy("toy_" + this.monsterID);
        this.addChild(this.chipPicture);
        this.monster = true;
    }
    ;
    Chip.prototype.convertToBonus = function(type) {
        this.bonusType = type;
        this.convertToBonusAnim(type);
        this.colorID = -1;
        if (this.plus) {
            PlayState.g_instance.querySpawnNewChips(3);
        }
    }
    ;
    Chip.prototype.convertToBonusAnim = function(type) {
        var _this = this;
        var cake = AssetsManager.g_instance.getCenteredImageWithProxy("cake_12");
        this.bonusPic = AssetsManager.g_instance.getCenteredImageWithProxy(type == Chip.BONUS_BOMB ? Constants.IMAGE_BOMB : Constants.IMAGE_LINE);
        cake.addChild(this.bonusPic);
        cake.x = -35;
        cake.y = -35;
        cake.alpha = 0;
        this.addChild(cake);
        this.addChild(this.bonusPic);
        this.addChild(this.chipPicture);
        var time_mult = 0.7;
        var copy = this.chipPicture;
        createjs.Tween.get(this.chipPicture).wait(200 * time_mult).to({
            x: 35,
            y: 35
        }, 500 * time_mult).to({
            y: Constants.ASSETS_HEIGHT + 100
        }, (Constants.SCREEN_HEIGHT + 100 - this.y) * 1, createjs.Ease.sineIn).call(function() {
            _this.removeChild(copy);
        });
        createjs.Tween.get(cake).to({
            x: 0,
            y: 0
        }, 500 * time_mult).call(function() {
            _this.chipPicture.alpha = 1;
            _this.chipPicture = cake;
        });
        createjs.Tween.get(cake).to({
            alpha: 1
        }, 150);
    }
    ;
    Chip.prototype.fallDown = function() {
        if (this.isMonster()) {
            this.speed = new createjs.Point(0,-500);
        } else {
            this.speed = new createjs.Point(0,0);
        }
        this.setState(Chip.STATE_FALL_DOWN);
        if (!this.isBonus()) {
            this.select();
        }
    }
    ;
    return Chip;
}(GameObject));
Chip.BONUS_BOMB = "BONUS_BOMB";
Chip.BONUS_LINE = "BONUS_LINE";
Chip.STATE_SPAWN_NEW = "STATE_SPAWN_NEW";
Chip.STATE_FALL_DOWN = "STATE_FALL_DOWN";
Chip.STATE_SAVE_TOY = "STATE_SAVE_TOY";
Chip.MATCH_REASON_SIMPLE = "MATCH_REASON_SIMPLE";
Chip.MATCH_REASON_BONUS = "MATCH_REASON_BONUS";
Chip.MATCH_LAND = "MATCH_LAND";
/// <reference path="references.ts" />
var Utils = (function() {
    function Utils() {}
    Utils.RandomRange = function(from, to) {
        return from + (to - from) * Math.random();
    }
    ;
    Utils.RandomRangeInt = function(from, to) {
        return Math.floor(Math.random() * (to - from + 1)) + from;
    }
    ;
    Utils.IntToTimeString = function(time) {
        var minutes = Math.floor(time / 60);
        var s_minutes = minutes.toString();
        var seconds = time % 60;
        var s_seconds;
        if (seconds < 10) {
            s_seconds = "0" + seconds;
        } else {
            s_seconds = seconds.toString();
        }
        return s_minutes + "d" + s_seconds;
    }
    ;
    Utils.RadToGrad = function(rad) {
        return rad * 180 / Math.PI;
    }
    ;
    Utils.GradToRad = function(grad) {
        return grad * Math.PI / 180;
    }
    ;
    Utils.IsMobileBrowser = function() {
        if (window["orientation"] != undefined) {
            return true;
        }
        var check = false;
        (function(a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                check = true;
        }
        )(navigator.userAgent || navigator.vendor || window["opera"]);
        return check;
    }
    ;
    Utils.ScaledOffset = function(val) {
        return (window.devicePixelRatio ? window.devicePixelRatio : 1) * val / Constants.SCREEN_SCALE;
    }
    ;
    Utils.AnyOf = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        return arr[Utils.RandomRangeInt(0, arr.length - 1)];
    }
    ;
    Utils.DrawRect = function(width, height, color, parent) {
        var debug_shape = new createjs.Shape();
        debug_shape.graphics.beginFill(color);
        debug_shape.graphics.drawRect(0, 0, width, height);
        debug_shape.graphics.endFill();
        if (parent) {
            parent.addChild(debug_shape);
        }
        return debug_shape;
    }
    ;
    return Utils;
}());
/// <reference path="references.ts" />
var MainMenuState = (function(_super) {
    __extends(MainMenuState, _super);
    function MainMenuState() {
        var _this = _super.call(this) || this;
        _this.someThing = true;
        _this.alignByCenter(false);
        var back = AssetsManager.g_instance.getCenteredImageWithProxy("background_2");
        back.x = Constants.ASSETS_WIDTH / 2;
        back.y = Constants.ASSETS_HEIGHT / 2;
        _this.addChild(back);
        var button_play = new DNButton(Constants.IMAGE_BUTTON_PLAY,function() {
            return _this.onPlayTouch();
        }
        );
        _this.addChild(button_play);
        _this.addGuiObject(button_play);
        button_play.x = Constants.ASSETS_WIDTH / 2;
        button_play.y = 480;
        createjs.Tween.get(button_play, {
            loop: true
        }).to({
            scaleX: 0.94,
            scaleY: 0.94
        }, 150, createjs.Ease.linear).to({
            scaleX: 1.06,
            scaleY: 1.06
        }, 300, createjs.Ease.linear).to({
            scaleX: 1,
            scaleY: 1
        }, 150, createjs.Ease.linear).wait(4000);
        _this.title = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_TITLE);
        _this.addChild(_this.title);
        _this.title.x = Constants.ASSETS_WIDTH / 2;
        _this.title.y = 250;
        var bottom_back = AssetsManager.g_instance.getCenteredImageWithProxy("main_menu_down");
        bottom_back.y = Constants.ASSETS_HEIGHT / 2 + 360;
        bottom_back.x = Constants.ASSETS_WIDTH / 2;
        _this.addChild(bottom_back);
        var conveyor_bottom = new Conveyor(true,0.6,_this,true);
        _this.addGameObjectAtPos(conveyor_bottom, _this, 0, Constants.ASSETS_HEIGHT - 130);
        // var more_games = new DNButton(Constants.IMAGE_BUTTON_MORE, function () { return _this.onMoreTouch(); });
        // _this.addChild(more_games);
        // _this.addGuiObject(more_games);
        // more_games.x = Constants.ASSETS_WIDTH / 2 - 200;
        // more_games.scaleX = more_games.scaleY = 1.05;
        // more_games.y = 490;
        try {
            analytics.menu();
        } catch (e) {}
        _this.setSoundButton();
        return _this;
    }
    MainMenuState.prototype.init = function() {
        _super.prototype.init.call(this);
    }
    ;
    MainMenuState.prototype.runJelly = function() {
        this.liveTime = 0;
    }
    ;
    MainMenuState.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
    }
    ;
    MainMenuState.prototype.onSoundTouch = function() {
        SoundManager.g_instance.calcSoundEnabled(!SoundManager.g_instance.isSoundEnabled());
        this.setSoundButton();
    }
    ;
    MainMenuState.prototype.setSoundButton = function() {
        var _this = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton);
        }
        var enabled = SoundManager.g_instance.isSoundEnabled();
        this.soundButton = new DNButton(enabled ? Constants.IMAGE_BUTTON_SOUND_ON : Constants.IMAGE_BUTTON_SOUND_OFF,function() {
            return _this.onSoundTouch();
        }
        );
        this.addChild(this.soundButton);
        this.addGuiObject(this.soundButton);
        this.soundButton.x = 80;
        this.soundButton.y = 70;
    }
    ;
    MainMenuState.prototype.onMouseDown = function(x, y) {
        _super.prototype.onMouseDown.call(this, x, y);
    }
    ;
    MainMenuState.prototype.onCreditsTouch = function() {
        StateManager.g_instance.pushState(new CreditsState());
    }
    ;
    MainMenuState.prototype.onPlayTouch = function() {
        StateManager.g_instance.pushState(new TransitionInState(new SelectLevelState()));
    }
    ;
    MainMenuState.prototype.onMoreTouch = function() {
        try {
            moregames.redirect();
        } catch (e) {}
    }
    ;
    return MainMenuState;
}(GameState));
/// <reference path="references.ts" />
var ShadeInState = (function(_super) {
    __extends(ShadeInState, _super);
    function ShadeInState(next_state) {
        var _this = _super.call(this) || this;
        _this.nextState = null;
        _this.nextState = next_state;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#ffffff");
        _this.shader.graphics.drawRect(0, -(Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        _this.shader.alpha = 0;
        createjs.Tween.get(_this.shader, {
            loop: false
        }).to({
            alpha: 1.0
        }, 400, createjs.Ease.linear).call(function() {
            return _this.onFinishShade();
        });
        return _this;
    }
    ShadeInState.prototype.onFinishShade = function() {
        StateManager.g_instance.changeState(this.nextState);
        StateManager.g_instance.pushState(new ShadeOutState());
    }
    ;
    ShadeInState.prototype.setNextState = function(state) {
        this.nextState = state;
    }
    ;
    return ShadeInState;
}(GameState));
/// <reference path="references.ts" />
var ShadeOutState = (function(_super) {
    __extends(ShadeOutState, _super);
    function ShadeOutState() {
        var _this = _super.call(this) || this;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#ffffff");
        _this.shader.graphics.drawRect(0, -(Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        createjs.Tween.get(_this.shader, {
            loop: false
        }).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function() {
            return _this.onFinishShade();
        });
        return _this;
    }
    ShadeOutState.prototype.onFinishShade = function() {
        StateManager.g_instance.popState();
    }
    ;
    return ShadeOutState;
}(GameState));
/// <reference path="MainMenuState.ts" />
var CreditsState = (function(_super) {
    __extends(CreditsState, _super);
    function CreditsState() {
        var _this = _super.call(this) || this;
        _this.hiddingNow = false;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#ffffff");
        _this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        _this.shader.alpha = 0;
        createjs.Tween.get(_this.shader, {
            loop: false
        }).to({
            alpha: 0.90
        }, 500, createjs.Ease.linear);
        _this.container = new createjs.Container();
        _this.addChild(_this.container);
        _this.container.alpha = 0;
        createjs.Tween.get(_this.container, {
            loop: false
        }).to({
            alpha: 1.0
        }, 500, createjs.Ease.linear);
        var texts = ["PROGRAMMING / GAME DESIGN:", "Konstantin Boronenkov", "", "", "ART:", "Vladimir Makarov", "Anna Turkova", "", "", "MUSIC:", "Alexander Ahura", "", "", "Hypnocat Studio 2014", "gibbetsfeedback@gmail.com", ];
        for (var i = 0; i < texts.length; i++) {
            var line = new createjs.Text(texts[i],"bold 35px Times New Roman","#222222");
            line.textAlign = "center";
            _this.container.addChild(line);
            line.x = Constants.ASSETS_WIDTH / 2;
            line.y = 100 + i * 40;
        }
        return _this;
    }
    CreditsState.prototype.onMouseDown = function(x, y) {
        this.hide();
    }
    ;
    CreditsState.prototype.hide = function() {
        if (!this.hiddingNow) {
            createjs.Tween.removeTweens(this.container);
            createjs.Tween.removeTweens(this.shader);
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0.0
            }, 400, createjs.Ease.linear).call(function() {
                StateManager.g_instance.popState();
            });
            createjs.Tween.get(this.container, {
                loop: false
            }).to({
                alpha: 0.0
            }, 400, createjs.Ease.linear);
            this.hiddingNow = true;
        }
    }
    ;
    return CreditsState;
}(GameState));
/// <reference path="references.ts" />
function init() {
    var manifest = [];
    var art = ["background_0", "background_1", "background_2"];
    var jpg = [];
    var athlases = [{
        "images": ["all"],
        "frames": [[1748, 1855, 85, 104], [1661, 1855, 85, 104], [1226, 609, 93, 93], [1052, 537, 93, 93], [1226, 704, 91, 92], [1163, 2, 156, 156], [1052, 442, 93, 93], [1052, 347, 93, 93], [1052, 252, 93, 93], [1163, 514, 93, 93], [1574, 1855, 85, 104], [1487, 1855, 85, 104], [1400, 1855, 85, 104], [1313, 1855, 85, 104], [1293, 1656, 85, 104], [1226, 1862, 85, 104], [1139, 1862, 85, 104], [1052, 1862, 85, 104], [965, 1862, 85, 104], [878, 1862, 85, 104], [791, 1862, 85, 104], [704, 1862, 85, 104], [1139, 632, 85, 104], [1125, 133, 30, 30], [1125, 101, 30, 30], [1125, 69, 30, 30], [1125, 37, 30, 30], [624, 1656, 667, 204], [2, 2, 700, 1200], [1380, 777, 421, 927], [2, 1864, 700, 167], [1326, 706, 700, 69], [1801, 1961, 79, 79], [1720, 1961, 79, 79], [1639, 1961, 79, 79], [1558, 1961, 79, 79], [1477, 1961, 79, 79], [1396, 1961, 79, 79], [1163, 299, 102, 118], [1326, 354, 700, 350], [1052, 632, 85, 104], [1267, 355, 41, 53], [624, 1204, 700, 450], [1326, 2, 700, 350], [1163, 419, 93, 93], [704, 777, 457, 399], [1313, 1961, 81, 81], [2028, 2, 18, 18], [1125, 2, 32, 33], [1163, 160, 137, 137], [704, 2, 419, 248], [2, 1204, 620, 658], [1267, 299, 55, 54], [704, 252, 324, 52], [704, 715, 324, 52], [1293, 1762, 488, 91], [965, 609, 85, 104], [878, 609, 85, 104], [791, 609, 85, 104], [704, 609, 85, 104]],
        "animations": {
            "bomb": [0],
            "box_frame": [1],
            "button_exit": [2],
            "button_next": [3],
            "button_pause": [4],
            "button_play": [5],
            "button_prev": [6],
            "button_restart": [7],
            "button_sound_off": [8],
            "button_sound_on": [9],
            "cake_0": [10],
            "cake_1": [11],
            "cake_10": [12],
            "cake_11": [13],
            "cake_12": [14],
            "cake_2": [15],
            "cake_3": [16],
            "cake_4": [17],
            "cake_5": [18],
            "cake_6": [19],
            "cake_7": [20],
            "cake_8": [21],
            "cake_9": [22],
            "conf_1": [23],
            "conf_2": [24],
            "conf_3": [25],
            "conf_4": [26],
            "conveyor": [27],
            "curtain_1": [28],
            "curtain_2": [29],
            "end_panel": [30],
            "fill": [31],
            "gear_0": [32],
            "gear_1": [33],
            "gear_2": [34],
            "gear_3": [35],
            "gear_4": [36],
            "gear_5": [37],
            "level_button": [38],
            "level_menu_up": [39],
            "line": [40],
            "lock": [41],
            "main_menu_down": [42],
            "main_menu_up": [43],
            "more_games": [44],
            "pause_window": [45],
            "plus": [46],
            "points_control_big": [47],
            "points_control_small": [48],
            "ring": [49],
            "rotate": [50],
            "select_level_back": [51],
            "star_small": [52],
            "time_panel_1": [53],
            "time_panel_2": [54],
            "title": [55],
            "toy_0": [56],
            "toy_1": [57],
            "toy_2": [58],
            "toy_3": [59]
        }
    }, {
        "images": ["disappear"],
        "frames": [[785, 124, 85, 120], [785, 2, 85, 120], [698, 124, 85, 120], [698, 2, 85, 120], [611, 124, 85, 120], [611, 2, 85, 120], [524, 124, 85, 120], [524, 2, 85, 120], [437, 124, 85, 120], [437, 2, 85, 120], [350, 124, 85, 120], [350, 2, 85, 120], [263, 124, 85, 120], [263, 2, 85, 120], [176, 124, 85, 120], [176, 2, 85, 120], [89, 124, 85, 120], [89, 2, 85, 120], [2, 124, 85, 120], [2, 2, 85, 120]],
        "animations": {
            "shuffle_0": [0],
            "shuffle_1": [1],
            "shuffle_2": [2],
            "shuffle_3": [3],
            "shuffle_4": [4],
            "shuffle_5": [5],
            "shuffle_6": [6],
            "shuffle_7": [7],
            "shuffle_8": [8],
            "shuffle_9": [9],
            "shuffle_10": [10],
            "shuffle_11": [11],
            "shuffle_12": [12],
            "shuffle_13": [13],
            "shuffle_14": [14],
            "shuffle_15": [15],
            "shuffle_16": [16],
            "shuffle_17": [17],
            "shuffle_18": [18],
            "shuffle_19": [19]
        }
    }];
    var sound = [SoundManager.SOUND_MUSIC, SoundManager.SOUND_CLICK, SoundManager.SOUND_MATCH, SoundManager.SOUND_DROP_1, SoundManager.SOUND_DROP_2, SoundManager.SOUND_DROP_3, SoundManager.SOUND_LINE, SoundManager.SOUND_WIN, SoundManager.SOUND_LOSE, SoundManager.SOUND_BOMB, SoundManager.SOUND_POPUP, SoundManager.SOUND_FREEDOM_1, SoundManager.SOUND_FREEDOM_2, SoundManager.SOUND_CLOSE, SoundManager.SOUND_OPEN, SoundManager.SOUND_PLUS, ];
    for (var i = 0; i < athlases.length; i++) {
        art.push(athlases[i]["images"][0]);
    }
    for (var i = 0; i < art.length; i++) {
        manifest.push({
            src: "assets/art/" + art[i] + ".png",
            id: art[i]
        });
    }
    for (var i = 0; i < jpg.length; i++) {
        manifest.push({
            src: "assets/art/" + jpg[i] + ".jpg",
            id: jpg[i]
        });
    }
    var sound_manifest = [];
    createjs.Sound.alternateExtensions = ["ogg"];
    for (var i = 0; i < SoundManager.ALL.length; i++) {
        sound_manifest.push({
            src: SoundManager.ALL[i] + ".mp3",
            id: SoundManager.ALL[i]
        });
    }
    Constants.g_isPC = !Utils.IsMobileBrowser();
    new StateManager(manifest,sound_manifest,athlases,[]);
}
;/// <reference path="references.ts" />
var DNButton = (function(_super) {
    __extends(DNButton, _super);
    function DNButton(name, callback) {
        var _this = _super.call(this) || this;
        _this.selected = false;
        _this.func = null;
        _this.origScale = 0;
        _this.enabled = true;
        _this.picture = AssetsManager.g_instance.getCenteredImageWithProxy(name);
        _this.addChild(_this.picture);
        _this.func = callback;
        _this.picWidth = _this.picture.getBounds().width * 1.15;
        _this.picHeight = _this.picture.getBounds().height * 1.15;
        return _this;
    }
    DNButton.prototype.select = function() {
        if (!this.selected) {
            createjs.Tween.removeTweens(this);
            this.origScale = this.scaleX;
            createjs.Tween.get(this, {
                loop: false
            }).to({
                scaleX: this.origScale + 0.15,
                scaleY: this.origScale + 0.15
            }, 150, createjs.Ease.linear);
            this.selected = true;
        }
    }
    ;
    DNButton.prototype.deselect = function() {
        if (this.selected) {
            createjs.Tween.removeTweens(this);
            createjs.Tween.get(this, {
                loop: false
            }).to({
                scaleX: this.origScale,
                scaleY: this.origScale
            }, 150, createjs.Ease.linear);
            this.selected = false;
        }
    }
    ;
    DNButton.prototype.onMouseDown = function(x, y) {
        if (this.hitTestSmart(x, y)) {
            this.liveTime = 0;
            this.select();
        }
    }
    ;
    DNButton.prototype.onMouseUp = function(x, y) {
        if (this.hitTestSmart(x, y) && this.selected) {
            if (this.func) {
                this.func();
            }
            //  run action
            SoundManager.g_instance.play(SoundManager.SOUND_CLICK);
        }
        this.deselect();
    }
    ;
    DNButton.prototype.onMouseMove = function(x, y) {
        if (!this.hitTestSmart(x, y)) {
            this.deselect();
        }
    }
    ;
    DNButton.prototype.setEnabled = function(enabled) {
        this.enabled = enabled;
    }
    ;
    DNButton.prototype.hitTestSmart = function(x, y) {
        if (!this.enabled) {
            return;
        }
        if (!this.parent || !this.visible) {
            return false;
        }
        var pos = this.picture.localToGlobal(0, 0);
        pos.x /= Constants.SCREEN_SCALE;
        pos.y /= Constants.SCREEN_SCALE;
        var w = this.picture.getBounds().width * 0.6 * this.scaleX;
        var h = (this.picture.getBounds().height || 100) * 0.6 * this.scaleY;
        return pos.x < x + w && pos.x > x - w && pos.y < y + h && pos.y > y - h;
    }
    ;
    return DNButton;
}(DNGUIObject));
/// <reference path="references.ts" />
var DNTextField = (function(_super) {
    __extends(DNTextField, _super);
    function DNTextField(text) {
        var _this = _super.call(this) || this;
        _this.textWidth = 0;
        _this.setText(text);
        return _this;
    }
    DNTextField.prototype.setText = function(text) {
        this.removeAllChildren();
        var x_offset = 0;
        for (var i = 0; i < text.length; i++) {
            var char_code = text.charAt(i);
            var ch = AssetsManager.g_instance.getImage(char_code);
            this.addChild(ch);
            ch.x = x_offset;
            x_offset += ch.getBounds().width - 4;
        }
        this.textWidth = x_offset;
    }
    ;
    DNTextField.prototype.getWidth = function() {
        return this.textWidth;
    }
    ;
    return DNTextField;
}(createjs.Container));
/// <reference path="references.ts" />
var FlyingPoints = (function(_super) {
    __extends(FlyingPoints, _super);
    function FlyingPoints(value) {
        var _this = _super.call(this) || this;
        _this.timeOffset = Math.random() * 10;
        _this.label = new DNTextField("p" + value.toString());
        _this.addChild(_this.label);
        _this.label.scaleX = _this.label.scaleY = 0.60;
        _this.label.x = -_this.label.getWidth() * 0.5 + 18;
        _this.label.y = -18;
        return _this;
    }
    FlyingPoints.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.y -= dt * 100;
        if (this.liveTime > 0.3) {
            this.alpha -= dt * 3;
        }
        if (this.liveTime >= 1.5) {
            this.kill();
        }
    }
    ;
    return FlyingPoints;
}(GameObject));
/// <reference path="references.ts" />
var ConvertToBonusEffect = (function(_super) {
    __extends(ConvertToBonusEffect, _super);
    function ConvertToBonusEffect(chip) {
        var _this = _super.call(this) || this;
        _this.chip = chip;
        //this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_SHINING));
        _this.scaleX = _this.scaleY = 2.5;
        return _this;
    }
    ConvertToBonusEffect.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.rotation += dt * Math.PI * 35;
        if (this.scaleX > 1) {
            this.scaleX -= dt * 3;
            this.scaleY -= dt * 3;
        }
        this.x = this.chip.x;
        this.y = this.chip.y - Constants.CELL_HEIGHT / 2;
        if (this.chip.isDead()) {
            this.alpha -= dt * 3;
            if (this.alpha <= 0) {
                this.kill();
            }
        }
    }
    ;
    return ConvertToBonusEffect;
}(GameObject));
/// <reference path="references.ts" />
var KillLineEffect = (function(_super) {
    __extends(KillLineEffect, _super);
    function KillLineEffect(is_left) {
        var _this = _super.call(this) || this;
        var rocket = AssetsManager.g_instance.getCenteredImageWithProxy("line");
        if (is_left) {
            _this.addChild(rocket);
            rocket.rotation = -60;
            _this.speed = -1000;
        } else {
            rocket.rotation = 120;
            _this.addChild(rocket);
            _this.speed = 1000;
        }
        var emitter_1 = new FlameEmitter(is_left);
        PlayState.g_instance.addGameObject(emitter_1);
        _this.addChild(emitter_1);
        var emitter_2 = new FlameEmitter(is_left);
        PlayState.g_instance.addGameObject(emitter_2);
        _this.addChild(emitter_2);
        var emitter_3 = new FlameEmitter(is_left);
        PlayState.g_instance.addGameObject(emitter_3);
        _this.addChild(emitter_3);
        return _this;
    }
    KillLineEffect.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.x += this.speed * dt;
        if (this.x > Constants.ASSETS_WIDTH + 100) {
            this.kill();
        }
        if (this.x < -100) {
            this.kill();
        }
    }
    ;
    return KillLineEffect;
}(GameObject));
/// <reference path="references.ts" />
var PortraitLockState = (function(_super) {
    __extends(PortraitLockState, _super);
    function PortraitLockState() {
        var _this = _super.call(this) || this;
        _this.scaleX = _this.scaleY = 1 / Constants.SCREEN_SCALE;
        var w = window.innerWidth * Constants.PIXEL_RATIO;
        var h = window.innerHeight * Constants.PIXEL_RATIO;
        //  shading
        var shader = new createjs.Shape();
        shader.graphics.beginFill("#4aa4c2");
        shader.graphics.drawRect(0, 0, w, h);
        shader.graphics.endFill();
        _this.addChild(shader);
        var bitmap = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_ROTATE);
        var proxy = new createjs.Container();
        _this.addChild(proxy);
        proxy.addChild(bitmap);
        proxy.x = w / 2;
        proxy.y = h / 2;
        return _this;
    }
    PortraitLockState.prototype.onOrientationChanged = function(landscape) {
        if (!landscape) {
            StateManager.g_instance.popState();
        }
    }
    ;
    return PortraitLockState;
}(GameState));
/// <reference path="viewporter.d.ts" />
/// <reference path="createjs/createjs.d.ts" />
/// <reference path="createjs/easeljs.d.ts" />
/// <reference path="createjs/preloadjs.d.ts" />
/// <reference path="createjs/tweenjs.d.ts" />
/// <reference path="createjs/soundjs.d.ts" />
/// <reference path="SoundManager.ts" />
/// <reference path="StateManager.ts" />
/// <reference path="GameState.ts" />
/// <reference path="Constants.ts" />
/// <reference path="GameData.ts" />
/// <reference path="AssetsManager.ts" />
/// <reference path="GameObject.ts" />
/// <reference path="GUIObject.ts" />
/// <reference path="Chip.ts" />
/// <reference path="Utils.ts" />
/// <reference path="MainMenuState.ts" />
/// <reference path="ShadeInState.ts" />
/// <reference path="ShadeOutState.ts" />
/// <reference path="CreditsState.ts" />
/// <reference path="app.ts" />
/// <reference path="DNButton.ts" />
/// <reference path="DNTextField.ts" />
/// <reference path="FlyingPoints.ts" />
/// <reference path="ConvertToBonusEffect.ts" />
/// <reference path="KillLineEffect.ts" />
/// <reference path="PortraitLockState.ts" /> 
/// <reference path="references.ts" />
var AutoreleaseEffect = (function(_super) {
    __extends(AutoreleaseEffect, _super);
    function AutoreleaseEffect(name, frames_count, frame_time) {
        var _this = _super.call(this) || this;
        _this.frames = new Array();
        _this.frame = 0;
        _this.frameTime = frame_time;
        for (var i = 0; i < frames_count; i++) {
            _this.frames.push(AssetsManager.g_instance.getCenteredImageWithProxy(name + i));
        }
        _this.update(10);
        return _this;
    }
    AutoreleaseEffect.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        if (this.liveTime > this.frameTime) {
            this.liveTime = 0;
            this.frame++;
            if (this.frame >= this.frames.length) {
                this.frame = this.frames.length - 1;
                this.kill();
            }
            this.removeAllChildren();
            this.addChild(this.frames[this.frame]);
        }
    }
    ;
    return AutoreleaseEffect;
}(GameObject));
var Confetti = (function(_super) {
    __extends(Confetti, _super);
    function Confetti() {
        var _this = _super.call(this) || this;
        _this.speedX = 0;
        _this.speedY = 0;
        _this.gravity = 405;
        _this.moveLeft = false;
        _this.lifeSpan = Utils.RandomRange(0.3, 1);
        _this.rotSpeed = 0;
        _this.dead = false;
        var pic = AssetsManager.g_instance.getCenteredImageWithProxy("conf_" + Utils.RandomRangeInt(1, 4));
        _this.addChild(pic);
        _this.speedX = Utils.RandomRangeInt(-150, 150);
        _this.moveLeft = _this.speedX < 0;
        _this.speedY = -Utils.RandomRangeInt(150, 220);
        _this.scaleX = _this.scaleY = 0.4;
        _this.rotation = Utils.RandomRange(-180, 180);
        _this.rotSpeed = (Math.random() > 0.5 ? 1 : -1) * Utils.RandomRange(150, 250);
        return _this;
    }
    Confetti.prototype.update = function(dt) {
        var _this = this;
        _super.prototype.update.call(this, dt);
        this.x += this.speedX * dt;
        this.y += this.speedY * dt;
        this.speedY += this.gravity * dt;
        if (Math.abs(this.speedX) > 10) {
            this.speedX -= (this.moveLeft ? -1 : 1) * 50 * dt;
        }
        this.rotation += dt * this.rotSpeed;
        if (!this.dead && this.liveTime > this.lifeSpan) {
            this.dead = true;
            createjs.Tween.get(this).to({
                alpha: 0
            }, 200, createjs.Ease.linear).call(function() {
                _this.kill();
            });
        }
    }
    ;
    return Confetti;
}(GameObject));
/// <reference path="references.ts" />
var ConfettiEmitter = (function(_super) {
    __extends(ConfettiEmitter, _super);
    function ConfettiEmitter() {
        var _this = _super.call(this) || this;
        _this.cofetties = new Array();
        var num = Utils.RandomRangeInt(5, 8);
        for (var i = 0; i < num; i++) {
            var conf = new Confetti();
            _this.addChild(conf);
            _this.cofetties.push(conf);
        }
        return _this;
    }
    ConfettiEmitter.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        for (var i = 0; i < this.cofetties.length; i++) {
            this.cofetties[i].update(dt);
        }
    }
    ;
    return ConfettiEmitter;
}(GameObject));
/// <reference path="references.ts" />
var Conveyor = (function(_super) {
    __extends(Conveyor, _super);
    function Conveyor(dir, prob, layer, cakes) {
        var _this = _super.call(this) || this;
        _this.parts = new Array();
        _this.speed = 0.08;
        _this.gears = new Array();
        _this.convWidth = 0;
        _this.picsNum = 0;
        if (!dir) {
            _this.speed = -_this.speed;
        }
        for (var i = 0; i < 10; i++) {
            var gear = new DNMovieClip("gear_",_this.speed,true,6);
            _this.gears.push(gear);
            layer.addGameObject(gear);
            _this.addChild(gear);
            gear.y = 75;
            gear.scaleX = gear.scaleY = 0.8;
            gear.x = i * 200 + 50;
        }
        _this.convWidth = 667 * 0.4;
        _this.picsNum = Math.ceil(Constants.ASSETS_WIDTH / _this.convWidth) + 1;
        for (var i = 0; i < _this.picsNum; i++) {
            var proxy = new createjs.Container();
            proxy.x = _this.convWidth * i;
            var img = AssetsManager.g_instance.getImage(Constants.IMAGE_CONVEYOR);
            img.scaleX = img.scaleY = 0.4;
            proxy.addChild(img);
            _this.addChild(proxy);
            _this.parts.push(proxy);
            if (Math.random() < prob && cakes) {
                var cake = AssetsManager.g_instance.getImage("cake_" + Utils.RandomRangeInt(0, 11));
                proxy.addChild(cake);
                cake.y = -60;
                cake.x = Utils.RandomRange(0, 50);
            }
        }
        return _this;
    }
    Conveyor.prototype.stopGears = function() {
        for (var i = 0; i < this.gears.length; i++) {
            this.gears[i].pause();
        }
    }
    ;
    Conveyor.prototype.startGears = function() {
        for (var i = 0; i < this.gears.length; i++) {
            this.gears[i].play();
        }
    }
    ;
    Conveyor.prototype.forceUpdate = function(dt) {
        _super.prototype.forceUpdate.call(this, dt);
        if (this.speed == 0) {
            return;
        }
        for (var i = 0; i < this.parts.length; i++) {
            this.parts[i].x += 1 / this.speed * dt * 4;
            if (this.speed > 0) {
                if (this.parts[i].x >= Constants.ASSETS_WIDTH) {
                    this.parts[i].x -= this.convWidth * this.picsNum;
                }
            } else {
                if (this.parts[i].x <= -this.convWidth) {
                    this.parts[i].x += this.convWidth * this.picsNum;
                }
            }
        }
        var rot = (this.speed > 0 ? this.forceLiveTime * 100 : -this.forceLiveTime * 100);
        for (var i = 0; i < this.gears.length; i++) {
            this.gears[i].setFrameTime(this.speed * 1.03);
        }
    }
    ;
    return Conveyor;
}(GameObject));
/// <reference path="references.ts" />
var DNButton2 = (function(_super) {
    __extends(DNButton2, _super);
    function DNButton2(name, callback) {
        var _this = _super.call(this) || this;
        _this.selected = false;
        _this.func = null;
        _this.enabled = true;
        _this.picture = AssetsManager.g_instance.getCenteredImageWithProxy(name);
        _this.addChild(_this.picture);
        _this.pictureDown = AssetsManager.g_instance.getCenteredImageWithProxy(name + "_down");
        _this.addChild(_this.pictureDown);
        _this.pictureDown.visible = false;
        _this.func = callback;
        _this.picWidth = _this.picture.getBounds().width * 1.15;
        _this.picHeight = _this.picture.getBounds().height * 1.15;
        return _this;
    }
    DNButton2.prototype.setEnabled = function(enabled) {
        this.enabled = enabled;
    }
    ;
    DNButton2.prototype.select = function() {
        if (!this.selected) {
            this.picture.visible = false;
            this.pictureDown.visible = true;
            this.selected = true;
        }
    }
    ;
    DNButton2.prototype.deselect = function() {
        if (this.selected) {
            this.selected = false;
            this.picture.visible = true;
            this.pictureDown.visible = false;
        }
    }
    ;
    DNButton2.prototype.onMouseDown = function(x, y) {
        if (this.hitTestSmart(x, y)) {
            this.liveTime = 0;
            this.select();
        }
    }
    ;
    DNButton2.prototype.onMouseUp = function(x, y) {
        if (this.hitTestSmart(x, y) && this.selected) {
            this.func();
            //  run action
            SoundManager.g_instance.play(SoundManager.SOUND_CLICK);
        }
        this.deselect();
    }
    ;
    DNButton2.prototype.onMouseMove = function(x, y) {
        if (!this.hitTestSmart(x, y)) {
            this.deselect();
        }
    }
    ;
    DNButton2.prototype.hitTestSmart = function(x, y) {
        if (!this.enabled) {
            return;
        }
        if (!this.parent || !this.visible) {
            return false;
        }
        var pos = this.picture.localToGlobal(0, 0);
        pos.x /= Constants.SCREEN_SCALE;
        pos.y /= Constants.SCREEN_SCALE;
        var w = this.picture.getBounds().width * 0.6 * this.scaleX;
        var h = (this.picture.getBounds().height || 100) * 0.6 * this.scaleY;
        return pos.x < x + w && pos.x > x - w && pos.y < y + h && pos.y > y - h;
    }
    ;
    return DNButton2;
}(DNGUIObject));
/// <reference path="references.ts" />
var DN_TEXT_ALIGN_HOR;
(function(DN_TEXT_ALIGN_HOR) {
    DN_TEXT_ALIGN_HOR[DN_TEXT_ALIGN_HOR["LEFT"] = 0] = "LEFT";
    DN_TEXT_ALIGN_HOR[DN_TEXT_ALIGN_HOR["RIGHT"] = 1] = "RIGHT";
    DN_TEXT_ALIGN_HOR[DN_TEXT_ALIGN_HOR["CENTER"] = 2] = "CENTER";
}
)(DN_TEXT_ALIGN_HOR || (DN_TEXT_ALIGN_HOR = {}));
;var DN_TEXT_ALIGN_VERT;
(function(DN_TEXT_ALIGN_VERT) {
    DN_TEXT_ALIGN_VERT[DN_TEXT_ALIGN_VERT["TOP"] = 0] = "TOP";
    DN_TEXT_ALIGN_VERT[DN_TEXT_ALIGN_VERT["MIDDLE"] = 1] = "MIDDLE";
    DN_TEXT_ALIGN_VERT[DN_TEXT_ALIGN_VERT["BOTTOM"] = 2] = "BOTTOM";
}
)(DN_TEXT_ALIGN_VERT || (DN_TEXT_ALIGN_VERT = {}));
;var DNLabel = (function(_super) {
    __extends(DNLabel, _super);
    function DNLabel(text, color, align_h, max_width, max_scale, is_shadow, is_end_eff) {
        if (color === void 0) {
            color = Fonts.mapColor;
        }
        if (align_h === void 0) {
            align_h = DN_TEXT_ALIGN_HOR.CENTER;
        }
        if (max_width === void 0) {
            max_width = 0;
        }
        if (max_scale === void 0) {
            max_scale = 1000;
        }
        if (is_shadow === void 0) {
            is_shadow = false;
        }
        if (is_end_eff === void 0) {
            is_end_eff = false;
        }
        var _this = _super.call(this) || this;
        _this.maxW = 0;
        _this.alignH = DN_TEXT_ALIGN_HOR.CENTER;
        _this.alignW = DN_TEXT_ALIGN_VERT.TOP;
        _this.font = Fonts.lobsterFont;
        _this.pic = new createjs.Text();
        _this.symbols = [];
        _this.maxScale = 1000;
        _this.color = Fonts.mapColor;
        _this.isEndEffect = false;
        _this.isEndEffect = is_end_eff;
        _this.text = text;
        _this.color = color;
        _this.alignH = align_h;
        _this.maxW = max_width;
        _this.maxScale = max_scale;
        if (is_shadow) {
            _this.shadowFont = new DNLabel(_this.text,"#000000",_this.alignH,_this.maxW,_this.maxScale,false);
            _this.shadowFont.x = _this.isEndEffect ? 3 : 2;
            _this.shadowFont.y = _this.isEndEffect ? 2 : 1;
            _this.shadowFont.alpha = 0.6;
            _this.addChild(_this.shadowFont);
        }
        _this.addChild(_this.pic);
        if (text) {
            _this.setText(text);
        }
        return _this;
        //if (false)
        //{
        //    this.debugShape = Utils.DrawRect(this.pic.getBounds().width, this.pic.getBounds().height, "#ff0000", this);
        //    this.debugShape.alpha = 0.5;
        //    this.debugShape.x = this.pic.x;
        //    this.debugShape.y = this.pic.y;
        //    this.debugShape.scaleX = this.debugShape.scaleY = this.pic.scaleX;
        //}
    }
    DNLabel.prototype.setText = function(text) {
        this.removeChild(this.pic);
        this.text = text;
        this.pic.text = text;
        this.pic = new createjs.Text(text,this.font,this.color);
        this.pic.y = 10;
        if (this.shadowFont) {
            this.removeChild(this.shadowFont);
            this.shadowFont = new DNLabel(this.text,"#000000",this.alignH,this.maxW,this.maxScale,false);
            this.shadowFont.x = this.isEndEffect ? 3 : 2;
            this.shadowFont.y = this.isEndEffect ? 2 : 1;
            this.shadowFont.alpha = 0.6;
            this.addChild(this.shadowFont);
        }
        this.addChild(this.pic);
        this.calcScale();
        this.calcAlign();
    }
    ;
    DNLabel.prototype.setMinScale = function(min_scale) {
        this.pic.scaleX = this.pic.scaleY = min_scale;
        this.calcAlign();
    }
    ;
    DNLabel.prototype.calcScale = function() {
        var scale = 1;
        if (this.maxW != 0) {
            if (this.pic.getBounds().width > this.maxW) {
                scale = this.maxW / this.pic.getBounds().width;
            }
        }
        this.pic.scaleX = this.pic.scaleY = Math.min(scale, this.maxScale);
    }
    ;
    DNLabel.prototype.calcAlign = function() {
        switch (this.alignH) {
        case DN_TEXT_ALIGN_HOR.CENTER:
            this.pic.x = -this.pic.getBounds().width * 0.5 * this.pic.scaleX;
            if (this.debugShape) {//this.debugShape.x = -this.maxW / 2;
            }
            break;
        case DN_TEXT_ALIGN_HOR.LEFT:
            this.pic.x = 0;
            if (this.debugShape) {
                this.debugShape.x = 0;
            }
            break;
        case DN_TEXT_ALIGN_HOR.RIGHT:
            this.pic.x = -this.pic.getBounds().width * this.pic.scaleX;
            if (this.debugShape) {
                this.debugShape.x = -this.maxW;
            }
            break;
        }
    }
    ;
    DNLabel.prototype.getText = function() {
        return this.text;
    }
    ;
    return DNLabel;
}(DNGUIObject));
/// <reference path="references.ts" />
var DNLoadingBar = (function(_super) {
    __extends(DNLoadingBar, _super);
    function DNLoadingBar(font_color, frame_color, fill_color) {
        var _this = _super.call(this) || this;
        _this.loadingShape = new createjs.Shape();
        _this.loadingShapeBack1 = new createjs.Shape();
        _this.loadingShapeBack2 = new createjs.Shape();
        _this.maxWidth = 300;
        _this.deltaY = 50;
        //--------------
        _this.loadingShapeBack1.graphics.beginFill(frame_color);
        _this.loadingShapeBack1.graphics.drawRect(0 - 4, 0 - 4, _this.maxWidth + 8, _this.deltaY + 8);
        _this.loadingShapeBack1.graphics.endFill();
        _this.addChild(_this.loadingShapeBack1);
        _this.loadingShape.graphics.beginFill(fill_color);
        _this.loadingShape.graphics.drawRect(0, 0, _this.maxWidth, _this.deltaY);
        _this.loadingShape.graphics.endFill();
        _this.addChild(_this.loadingShape);
        _this.loadingShape.scaleX = 0;
        _this.loadingShape.x = -_this.maxWidth / 2;
        _this.loadingShape.y = +_this.deltaY * 1.5;
        _this.loadingShapeBack1.x = _this.loadingShape.x;
        _this.loadingShapeBack1.y = _this.loadingShape.y;
        _this.labelPercentDownload = new createjs.Text("0%","bold 35px Verdana",font_color);
        _this.labelPercentDownload.textAlign = "center";
        /// need left
        _this.addChild(_this.labelPercentDownload);
        _this.labelPercentDownload.y = 75;
        return _this;
    }
    DNLoadingBar.prototype.setProgress = function(progress) {
        this.labelPercentDownload.text = (progress * 100).toFixed(0) + "%";
        this.loadingShape.scaleX = progress;
    }
    ;
    return DNLoadingBar;
}(createjs.Container));
/// <reference path="references.ts" />
var DNMovieClip = (function(_super) {
    __extends(DNMovieClip, _super);
    function DNMovieClip(name, frame_time, loop, count, stop) {
        var _this = _super.call(this) || this;
        _this.frames = [];
        _this.frame = 0;
        _this.loop = false;
        _this.paused = false;
        _this.stop = false;
        _this.frameTime = frame_time;
        if (stop) {
            _this.stop = stop;
        }
        if (!count) {
            count = AssetsManager.g_instance.getAthlasFramesCount(name);
        }
        for (var j = 0; j < count; j++) {
            _this.frames.push(AssetsManager.g_instance.getCenteredImageWithProxy(name + j));
            _this.addChild(_this.frames[j]);
        }
        if (loop) {
            _this.loop = loop;
        }
        _this.goto(0);
        return _this;
    }
    DNMovieClip.prototype.pause = function() {
        this.paused = true;
    }
    ;
    DNMovieClip.prototype.play = function() {
        this.paused = false;
        this.forceLiveTime = 0;
    }
    ;
    DNMovieClip.prototype.gotoAndStop = function(frame) {
        this.goto(frame);
        this.pause();
    }
    ;
    DNMovieClip.prototype.goto = function(frame) {
        this.frame = frame;
        for (var i = 0; i < this.frames.length; i++) {
            this.frames[i].visible = (i == frame);
        }
    }
    ;
    DNMovieClip.prototype.totalFrames = function() {
        return this.frames.length;
    }
    ;
    DNMovieClip.prototype.setLoop = function(loop) {
        this.loop = loop;
    }
    ;
    DNMovieClip.prototype.setFrameTime = function(tm) {
        this.frameTime = tm;
    }
    ;
    DNMovieClip.prototype.forceUpdate = function(dt) {
        if (this.paused) {
            return;
        }
        _super.prototype.forceUpdate.call(this, dt);
        if (this.forceLiveTime > this.frameTime) {
            this.forceLiveTime = 0;
            this.frame++;
            if (this.frame >= this.frames.length) {
                this.frame = this.frames.length - 1;
                if (this.stop) {
                    this.goto(0);
                    this.pause();
                    return;
                }
                if (this.loop) {
                    this.frame = 0;
                } else {
                    this.kill();
                }
            }
            this.goto(this.frame);
        }
    }
    ;
    return DNMovieClip;
}(GameObject));
/// <reference path="references.ts" />
var DNProgressBar = (function(_super) {
    __extends(DNProgressBar, _super);
    function DNProgressBar(back, front) {
        var _this = _super.call(this) || this;
        _this.shape = new createjs.Shape();
        _this.width = 0;
        if (back) {
            _this.addChild(AssetsManager.g_instance.getImage(back));
        }
        var front_pic = AssetsManager.g_instance.getImage(front);
        _this.addChild(front_pic);
        _this.width = front_pic.getBounds().width;
        _this.shape.graphics.beginFill("#000000");
        _this.shape.graphics.drawRect(0, 0, front_pic.getBounds().width, front_pic.getBounds().height);
        _this.shape.graphics.endFill();
        front_pic.mask = _this.shape;
        return _this;
    }
    DNProgressBar.prototype.setProgress = function(progress) {
        if (progress > 1) {
            progress = 1;
        }
        this.shape.x = (progress - 1) * this.width;
    }
    ;
    return DNProgressBar;
}(createjs.Container));
/// <reference path="references.ts" />
var DNStringManager = (function() {
    function DNStringManager() {
        this.container = new createjs.Container();
        this.strings = new Object();
        this.allStrings = null;
        this.allStrings = g_strings;
        this.setLanguage("en");
    }
    DNStringManager.getInstance = function() {
        return DNStringManager.g_instance;
    }
    ;
    DNStringManager.prototype.getString = function(string_id) {
        if (!this.strings) {
            return "!!!";
        }
        return this.strings[string_id] || "???";
    }
    ;
    DNStringManager.prototype.setLanguage = function(lang) {
        this.strings = this.allStrings[lang];
        this.language = lang;
    }
    ;
    DNStringManager.prototype.getLanguagePrefix = function() {
        if (this.language == "en") {
            return "";
        }
        return this.language + "/";
    }
    ;
    DNStringManager.prototype.getLanguage = function() {
        return this.language;
    }
    ;
    return DNStringManager;
}());
DNStringManager.g_instance = new DNStringManager();
/// <reference path="references.ts" />
var DNTextBox = (function(_super) {
    __extends(DNTextBox, _super);
    function DNTextBox(text, max_width, max_height, color, shadow) {
        if (color === void 0) {
            color = Fonts.mapColor;
        }
        if (shadow === void 0) {
            shadow = false;
        }
        var _this = _super.call(this) || this;
        _this.textScale = 0.8;
        _this.minScale = 0.1;
        _this.isFontShadow = shadow;
        _this.color = color;
        _this.maxTextWidth = max_width;
        _this.maxTextHeight = max_height;
        _this.font = Fonts.lobsterFont;
        _this.setText(text);
        return _this;
    }
    DNTextBox.prototype.setText = function(text) {
        this.removeAllChildren();
        var max_h = 0;
        var label = new DNLabel(" ",this.color,DN_TEXT_ALIGN_HOR.CENTER,0,1000,this.isFontShadow);
        var space_width = label.getBounds().width;
        var len = text.length;
        var word = "";
        var words = [];
        var max_word_width = 0;
        ////	 делим строку на слова
        for (var i = 0; i < len + 1; i++) {
            if (text.charAt(i) == ' ' || i == len) {
                if (word.length != 0) {
                    var label = new DNLabel(word,this.color,DN_TEXT_ALIGN_HOR.CENTER,0,1000,this.isFontShadow);
                    label.scaleX = label.scaleY = this.textScale;
                    words.push(label);
                    if (!label.getBounds()) {
                        console.log("text error");
                        return;
                    }
                    var word_width = label.getBounds().width;
                    if (word_width > max_word_width) {
                        max_word_width = word_width;
                    }
                }
                word = "";
            } else {
                word = word + text.charAt(i);
            }
        }
        var y = 0;
        var line = 0;
        var words_in_line = 0;
        var word_start_index = 0;
        for (var i = 0; i < words.length; i++) {
            line += (words[i].getBounds().width + space_width) * this.textScale;
            words_in_line++;
            var last_word_in_line = (i == words.length - 1);
            if (line > this.maxTextWidth || last_word_in_line) {
                if (words_in_line > 1 && line > this.maxTextWidth) {
                    line -= words[i].getBounds().width;
                    words_in_line--;
                    i--;
                }
                var cur_line = "";
                for (var w = word_start_index; w < word_start_index + words_in_line; w++) {
                    cur_line += words[w].getText();
                    cur_line += " ";
                }
                //cur_line.pop();	//	убираем лишний пробел в конце
                var line_label = new DNLabel(cur_line,this.color,DN_TEXT_ALIGN_HOR.CENTER,0,1000,this.isFontShadow);
                line_label.scaleX = line_label.scaleY = this.textScale;
                this.addChild(line_label);
                line_label.y = y;
                y += 50 * this.textScale;
                line = 0;
                word_start_index += words_in_line;
                words_in_line = 0;
                max_h = y;
            }
        }
        if ((max_h > this.maxTextHeight || max_word_width > this.maxTextWidth) && this.textScale > this.minScale) {
            this.textScale -= 0.05;
            this.setText(text);
        }
    }
    ;
    return DNTextBox;
}(DNGUIObject));
/// <reference path="references.ts" />
var EndLevelEffect = (function(_super) {
    __extends(EndLevelEffect, _super);
    function EndLevelEffect(text) {
        var _this = _super.call(this) || this;
        var panel = AssetsManager.g_instance.getCenteredImageWithProxy("end_panel");
        try {
            var parent_window = window.parent;

            setLoadingVisible(true, true, function () {
            })
        } catch (error) {
            console.error("ad", error);
        }
        panel.y = -200;
        panel.alpha = 0;
        _this.addChild(panel);
        var label = new DNLabel(text,Fonts.panelColor,DN_TEXT_ALIGN_HOR.CENTER);
        panel.addChild(label);
        label.y -= 33;
        createjs.Tween.get(panel).wait(500).to({
            y: 0,
            alpha: 1
        }, 600, createjs.Ease.backOut).wait(700).to({
            y: Constants.ASSETS_HEIGHT + 200,
            alpha: 0
        }, 400, createjs.Ease.backIn).call(function() {
            _this.kill();
        });
        return _this;
    }
    return EndLevelEffect;
}(GameObject));
/// <reference path="references.ts" />
var FallingTrash = (function(_super) {
    __extends(FallingTrash, _super);
    function FallingTrash(pic) {
        var _this = _super.call(this) || this;
        _this.rotationSpeed = Utils.RandomRange(-300, 300);
        _this.speed = 0;
        pic.x = pic.y = 0;
        _this.addChild(pic);
        return _this;
    }
    FallingTrash.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.rotation += dt * this.rotationSpeed;
        this.speed += dt * Constants.GRAVITY_ACC;
        this.y += this.speed * dt;
        if (this.y >= 900) {
            this.kill;
        }
    }
    ;
    return FallingTrash;
}(GameObject));
var FlameEmitter = (function(_super) {
    __extends(FlameEmitter, _super);
    function FlameEmitter(is_left) {
        var _this = _super.call(this) || this;
        _this.timeOut = 0.05;
        _this.particles = new Array();
        _this.isLeft = false;
        _this.offset_x = 0;
        _this.offset_y = 0;
        _this.isLeft = is_left;
        return _this;
    }
    FlameEmitter.prototype.cleanParticles = function() {
        for (var i = 0; i < this.particles.length; i++) {
            if (this.particles[i].alpha == 0) {
                this.particles.splice(i, 1);
            }
        }
    }
    ;
    FlameEmitter.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        if (this.timeOut < 0) {
            this.cleanParticles();
            var part = new FlameParticle(this.isLeft);
            this.particles.push(part);
            part.x = this.parent.x + (this.isLeft ? 30 : -30) + this.offset_x;
            part.y = this.parent.y + Utils.RandomRange(-10, 10) + (this.isLeft ? -5 : 5) + this.offset_y;
            PlayState.g_instance.addChild(part);
            this.timeOut = 0.0001;
        } else {
            this.timeOut -= dt;
        }
        for (var i = 0; i < this.particles.length; i++) {
            this.particles[i].update(dt);
        }
    }
    ;
    return FlameEmitter;
}(GameObject));
var FlameParticle = (function(_super) {
    __extends(FlameParticle, _super);
    function FlameParticle(is_left) {
        var _this = _super.call(this) || this;
        _this.speedX = 0;
        _this.speedY = 0;
        _this.grav = 130;
        var part = AssetsManager.g_instance.getCenteredImageWithProxy(Utils.AnyOf("conf_1", "conf_2", "conf_3", "conf_4"));
        _this.speedY = Utils.RandomRange(-40, 40);
        _this.speedX = is_left ? Utils.RandomRange(40, 80) : Utils.RandomRange(-80, -40);
        _this.addChild(part);
        _this.alpha = 0.8;
        _this.scaleX = _this.scaleY = 0.3;
        createjs.Tween.get(_this).wait(450).to({
            alpha: 0
        }, 150).call(function() {
            _this.kill();
        });
        return _this;
    }
    FlameParticle.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.speedY += dt * this.grav;
        this.x += dt * this.speedX;
        this.y += dt * this.speedY;
    }
    ;
    return FlameParticle;
}(GameObject));
/// <reference path="references.ts" />
var Fonts = (function() {
    function Fonts() {}
    return Fonts;
}());
Fonts.lobsterFont = "40px Janda Manatee Solid";
Fonts.panelColor = "#ffffff";
Fonts.selectColor = "#b56705";
Fonts.mapColor = "#f0f6fa";
var GratzState = (function(_super) {
    __extends(GratzState, _super);
    function GratzState() {
        var _this = _super.call(this) || this;
        _this.panel = new createjs.Container();
        _this.hiddingNow = false;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#000000");
        _this.shader.graphics.drawRect(0, -diff, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT + diff);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        _this.shader.alpha = 0;
        createjs.Tween.get(_this.shader, {
            loop: false
        }).wait(300).to({
            alpha: 0.4
        }, 800, createjs.Ease.linear);
        _this.addChild(_this.panel);
        _this.panel.x = Constants.ASSETS_WIDTH / 2;
        _this.panel.y = Constants.SCREEN_HEIGHT * 0.5;
        var panel = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_PAUSE_WINDOW);
        _this.panel.addChild(panel);
        var button_ok = new DNButton(Constants.IMAGE_BUTTON_PLAY,function() {
            return _this.hide();
        }
        );
        _this.panel.addChild(button_ok);
        _this.addGuiObject(button_ok);
        button_ok.x = 0;
        button_ok.y = 85;
        var pause_text = new DNTextBox(DNStringManager.getInstance().getString(Strings.GJ_MESSAGE),500,150);
        pause_text.y = -110;
        pause_text.x = 0;
        _this.panel.addChild(pause_text);
        _this.panel.alpha = 0.0;
        createjs.Tween.get(_this.panel, {
            loop: false
        }).to({
            alpha: 1
        }, 200, createjs.Ease.linear);
        _this.panel.y -= diff;
        _this.panel.scaleX = 0.7;
        _this.panel.scaleY = 0.7;
        createjs.Tween.get(_this.panel, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut);
        GameData.getInstance().setGratzShowed();
        GameData.getInstance().save();
        return _this;
    }
    GratzState.prototype.hide = function() {
        if (!this.hiddingNow) {
            createjs.Tween.removeTweens(this.panel);
            createjs.Tween.removeTweens(this.shader);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                alpha: 0
            }, 200, createjs.Ease.linear);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                scaleX: 0.7,
                scaleY: 0.7
            }, 400, createjs.Ease.backOut).call(function() {
                StateManager.g_instance.popState();
            });
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0.0
            }, 400, createjs.Ease.linear);
            this.hiddingNow = true;
        }
    }
    ;
    GratzState.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
    }
    ;
    return GratzState;
}(GameState));
var Jumper = (function(_super) {
    __extends(Jumper, _super);
    function Jumper(obj) {
        var _this = _super.call(this) || this;
        _this.speedY = 0;
        _this.origY = 0;
        _this.grav = 2500;
        _this.obj = obj;
        _this.origY = _this.obj.y;
        _this.speedY = -600;
        return _this;
    }
    Jumper.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.speedY += dt * this.grav;
        this.obj.y += dt * this.speedY;
        if (this.obj.y >= this.origY) {
            this.obj.y = this.origY;
            this.kill();
        }
    }
    ;
    return Jumper;
}(GameObject));
/// <reference path="MainMenuState.ts" />
var LoseState = (function(_super) {
    __extends(LoseState, _super);
    function LoseState(score) {
        var _this = _super.call(this) || this;
        _this.hiddingNow = false;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#000000");
        _this.shader.graphics.drawRect(0, -diff, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        _this.shader.alpha = 0;
        createjs.Tween.get(_this.shader, {
            loop: false
        }).wait(300).to({
            alpha: 0.5
        }, 800, createjs.Ease.linear);
        _this.panel = AssetsManager.g_instance.getCenteredImageWithProxy("pause_window");
        _this.addChild(_this.panel);
        _this.panel.y = Constants.ASSETS_HEIGHT * 0.5;
        _this.panel.scaleX = _this.panel.scaleY = 1.2;
        var button_restart = new DNButton(Constants.IMAGE_BUTTON_RESTART,function() {
            return _this.onRestartTouch();
        }
        );
        _this.panel.addChild(button_restart);
        _this.addGuiObject(button_restart);
        button_restart.x = 90;
        button_restart.y = 90;
        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT,function() {
            return _this.onExitTouch();
        }
        );
        _this.panel.addChild(button_exit);
        _this.addGuiObject(button_exit);
        button_exit.x = -90;
        button_exit.y = 90;
        var header = new DNLabel(DNStringManager.getInstance().getString(Strings.LEVEL_FAILED),Fonts.panelColor);
        header.y = -175;
        _this.panel.addChild(header);
        var sc_label = new DNLabel(DNStringManager.getInstance().getString(Strings.SCORE) + ":",Fonts.panelColor,DN_TEXT_ALIGN_HOR.RIGHT);
        sc_label.y = -77 - 5;
        sc_label.x = -10;
        sc_label.scaleX = sc_label.scaleY = 0.6;
        _this.panel.addChild(sc_label);
        var score_label = new DNLabel(score.toString(),Fonts.panelColor,DN_TEXT_ALIGN_HOR.LEFT);
        _this.panel.addChild(score_label);
        score_label.x = 15;
        score_label.y = -77 - 5;
        score_label.scaleX = score_label.scaleY = 0.6;
        var total_sc_label = new DNLabel(DNStringManager.getInstance().getString(Strings.TOTAL_SCORE) + ":",Fonts.panelColor,DN_TEXT_ALIGN_HOR.RIGHT);
        total_sc_label.y = -24 - 18;
        total_sc_label.x = -10;
        total_sc_label.scaleX = total_sc_label.scaleY = 0.6;
        _this.panel.addChild(total_sc_label);
        var total_score_label = new DNLabel(GameData.getInstance().getTotalScore().toString(),Fonts.panelColor,DN_TEXT_ALIGN_HOR.LEFT);
        _this.panel.addChild(total_score_label);
        total_score_label.x = 15;
        total_score_label.y = -24 - 18;
        total_score_label.scaleX = total_score_label.scaleY = 0.6;
        _this.panel.x = -_this.panel.getBounds().width / 2;
        createjs.Tween.get(_this.panel, {
            loop: false
        }).to({
            x: Constants.ASSETS_WIDTH / 2
        }, 400, createjs.Ease.backOut);
        SoundManager.g_instance.play(SoundManager.SOUND_POPUP);
        if (enableAds == true) {
            try {
                analytics.levelFailed(PlayState.level + 1);
                if (StateManager.g_instance.adsCD <= 0) {
                    StateManager.g_instance.restartAdsCD();
                    adSense.showAdvertising();
                }
            } catch (e) {}
        }
        _this.alignByCenter(false);
        return _this;
    }
    LoseState.prototype.hide = function() {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0.0
            }, 400, createjs.Ease.linear).call(function() {
                StateManager.g_instance.popState();
            });
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                y: -300
            }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                alpha: 0
            }, 300, createjs.Ease.linear);
            this.hiddingNow = true;
        }
    }
    ;
    LoseState.prototype.onRestartTouch = function() {
        if (enableAds == true) {
            try {
                analytics.levelFailed(PlayState.level + 1);
                if (StateManager.g_instance.adsCD <= 0) {
                    StateManager.g_instance.restartAdsCD();
                    adSense.showAdvertising();
                }
            } catch (e) {}
        }
        StateManager.g_instance.pushState(new ShadeInState(new PlayState(-1)));
    }
    ;
    LoseState.prototype.onExitTouch = function() {
        if (enableAds == true) {
            try {
                analytics.levelFailed(PlayState.level + 1);
                if (StateManager.g_instance.adsCD <= 0) {
                    StateManager.g_instance.restartAdsCD();
                    adSense.showAdvertising();
                }
            } catch (e) {}
        }
        StateManager.g_instance.pushState(new TransitionInState(new SelectLevelState()));
    }
    ;
    return LoseState;
}(GameState));
/// <reference path="references.ts" />
var PauseState = (function(_super) {
    __extends(PauseState, _super);
    function PauseState() {
        var _this = _super.call(this) || this;
        _this.panel = new createjs.Container();
        _this.hiddingNow = false;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#000000");
        _this.shader.graphics.drawRect(0, -diff, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        _this.shader.alpha = 0;
        createjs.Tween.get(_this.shader, {
            loop: false
        }).wait(300).to({
            alpha: 0.5
        }, 800, createjs.Ease.linear);
        _this.panel = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_PAUSE_WINDOW);
        _this.addChild(_this.panel);
        _this.panel.y = Constants.ASSETS_HEIGHT * 0.5;
        _this.panel.scaleX = _this.panel.scaleY = 1.2;
        var pause_label = new DNLabel(DNStringManager.getInstance().getString(Strings.PAUSE),Fonts.panelColor);
        _this.panel.addChild(pause_label);
        pause_label.y = -175;
        var button_play = new DNButton(Constants.IMAGE_BUTTON_PLAY,function() {
            return _this.hide();
        }
        );
        _this.panel.addChild(button_play);
        _this.addGuiObject(button_play);
        button_play.x = 0;
        button_play.y = 77;
        button_play.scaleX = button_play.scaleY = 0.65;
        var button_restart = new DNButton(Constants.IMAGE_BUTTON_RESTART,function() {
            return _this.onRestartTouch();
        }
        );
        _this.panel.addChild(button_restart);
        _this.addGuiObject(button_restart);
        button_restart.x = 138;
        button_restart.y = 77;
        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT,function() {
            return _this.onExitTouch();
        }
        );
        _this.panel.addChild(button_exit);
        _this.addGuiObject(button_exit);
        button_exit.x = -138;
        button_exit.y = 77;
        _this.setSoundButton();
        _this.panel.x = -_this.panel.getBounds().width / 2;
        createjs.Tween.get(_this.panel, {
            loop: false
        }).to({
            x: Constants.ASSETS_WIDTH / 2
        }, 400, createjs.Ease.backOut);
        SoundManager.g_instance.play(SoundManager.SOUND_POPUP);
        _this.alignByCenter(false);
        return _this;
    }
    PauseState.prototype.setSoundButton = function() {
        var _this = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton);
        }
        var enabled = SoundManager.g_instance.isSoundEnabled();
        this.soundButton = new DNButton(enabled ? Constants.IMAGE_BUTTON_SOUND_ON : Constants.IMAGE_BUTTON_SOUND_OFF,function() {
            return _this.onSoundTouch();
        }
        );
        this.panel.addChild(this.soundButton);
        this.addGuiObject(this.soundButton);
        // mb bug
        this.soundButton.x = 0;
        this.soundButton.y = -37;
    }
    ;
    PauseState.prototype.hide = function() {
        if (!this.hiddingNow) {
            createjs.Tween.removeTweens(this.shader);
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0.0
            }, 400, createjs.Ease.linear).call(function() {
                StateManager.g_instance.popState();
            });
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                x: Constants.ASSETS_WIDTH + this.panel.getBounds().height / 2
            }, 400, createjs.Ease.backIn);
            this.hiddingNow = true;
            SoundManager.g_instance.play(SoundManager.SOUND_POPUP);
        }
    }
    ;
    PauseState.prototype.onRestartTouch = function() {
        if (enableAds == true) {
            try {
                analytics.levelFailed(PlayState.level + 1);
                if (StateManager.g_instance.adsCD <= 0) {
                    StateManager.g_instance.restartAdsCD();
                    adSense.showAdvertising();
                }
            } catch (e) {}
        }
        StateManager.g_instance.pushState(new ShadeInState(new PlayState(-1)));
    }
    ;
    PauseState.prototype.onExitTouch = function() {
        if (enableAds == true) {
            try {
                analytics.levelFailed(PlayState.level + 1);
                if (StateManager.g_instance.adsCD <= 0) {
                    StateManager.g_instance.restartAdsCD();
                    adSense.showAdvertising();
                }
            } catch (e) {}
        }
        StateManager.g_instance.pushState(new TransitionInState(new SelectLevelState()));
    }
    ;
    PauseState.prototype.onSoundTouch = function() {
        SoundManager.g_instance.calcSoundEnabled(!SoundManager.g_instance.isSoundEnabled());
        this.setSoundButton();
    }
    ;
    return PauseState;
}(GameState));
/// <reference path="references.ts" />
var PlayState = (function(_super) {
    __extends(PlayState, _super);
    function PlayState(level) {
        var _this = _super.call(this) || this;
        _this.INPUT_STATE_WAIT_ACTION = "INPUT_STATE_WAIT_ACTION";
        _this.INPUT_STATE_LOCK = "INPUT_STATE_LOCK";
        _this.INPUT_STATE_WAIT_SPAWN = "INPUT_STATE_WAIT_SPAWN";
        _this.INPUT_STATE_SHIFT = "INPUT_STATE_SHIFT";
        _this.tutorial = null;
        _this.inputState = null;
        _this.waitWin = false;
        _this.waitWinTime = 0;
        _this.waitLose = false;
        _this.waitLoseTime = 0;
        _this.fieldWidth = 10;
        _this.fieldHeight = 9;
        _this.chipLayersContainer = new createjs.Container();
        _this.underChipsLayer = new createjs.Container();
        _this.backChipsLayer = new createjs.Container();
        _this.frontChipsLayer = new createjs.Container();
        _this.inputStateTime = 0;
        _this.score = 0;
        _this.tmpScore = 0;
        _this.scoreLabel = new DNLabel("000000",Fonts.mapColor);
        _this.chipTypes = 0;
        _this.selectedChips = new Array();
        _this.hintChips = new Array();
        _this.timeProgress = new DNProgressBar("time_panel_1","time_panel_2");
        _this.starsTime = 0;
        _this.starsMaxTime = 105;
        _this.spawnQueries = 0;
        _this.lineChips = new Array();
        _this.isFieldLocked = true;
        _this.group = new Array();
        _this.lastDropSoundTime = -10;
        _this.lastDropID = -1;
        _this.lastFreedomSoundTime = -10;
        if (level != -1) {
            PlayState.level = level;
        }
        _this.chipTypes = GameData.getInstance().getChipsDef(PlayState.level).length;
        _this.alignByCenter(false);
        var back = AssetsManager.g_instance.getCenteredImageWithProxy("background_" + (PlayState.level % 3));
        back.x = Constants.ASSETS_WIDTH / 2;
        back.y = Constants.ASSETS_HEIGHT / 2;
        _this.addChild(back);
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        var top_back = AssetsManager.g_instance.getCenteredImageWithProxy("main_menu_up");
        top_back.y = -35 - diff;
        top_back.x = Constants.ASSETS_WIDTH / 2;
        _this.addChild(top_back);
        var button_pause = new DNButton(Constants.IMAGE_BUTTON_PAUSE,function() {
            return _this.onPauseClick();
        }
        );
        top_back.addChild(button_pause);
        button_pause.x = -296;
        button_pause.y = 93;
        _this.addGuiObject(button_pause);
        var level_l = new DNLabel("Lvl.",Fonts.mapColor);
        level_l.x = 295;
        level_l.y = 49;
        top_back.addChild(level_l);
        level_l.scaleX = level_l.scaleY = 0.72;
        var level_label = new DNLabel((PlayState.level + 1).toString(),Fonts.mapColor);
        top_back.addChild(level_label);
        level_label.x = 295;
        level_label.y = 79;
        level_label.scaleX = level_label.scaleY = 0.72;
        top_back.addChild(_this.timeProgress);
        _this.timeProgress.x = -_this.timeProgress.getBounds().width * 0.75 / 2;
        _this.timeProgress.y = 80;
        _this.timeProgress.scaleX = _this.timeProgress.scaleY = 0.75;
        var score_l = new DNLabel(DNStringManager.getInstance().getString(Strings.SCORE) + ":",Fonts.mapColor);
        score_l.x = _this.timeProgress.x + 60;
        score_l.y = 35;
        top_back.addChild(score_l);
        score_l.scaleX = score_l.scaleY = 0.72;
        top_back.addChild(_this.scoreLabel);
        _this.scoreLabel.x = _this.timeProgress.x + 170;
        _this.scoreLabel.y = 35;
        _this.scoreLabel.scaleX = _this.scoreLabel.scaleY = 0.72;
        PlayState.g_instance = _this;
        //  alloc
        _this.field = new Array(_this.fieldWidth);
        for (var i = 0; i < _this.fieldWidth; i++) {
            _this.field[i] = new Array(_this.fieldHeight);
        }
        _this.chipLayersContainer.addChild(_this.underChipsLayer);
        var bottom_back = AssetsManager.g_instance.getCenteredImageWithProxy("main_menu_down");
        bottom_back.y = Constants.ASSETS_HEIGHT / 2 + 390;
        bottom_back.x = Constants.ASSETS_WIDTH / 2;
        _this.chipLayersContainer.addChild(bottom_back);
        //this.chipLayersContainer.scaleX = this.chipLayersContainer.scaleY = 1.2;
        _this.conveyor = new Conveyor(true,0.6,_this,false);
        _this.addGameObjectAtPos(_this.conveyor, _this.chipLayersContainer, 0, Constants.ASSETS_HEIGHT - 105);
        _this.addChild(_this.chipLayersContainer);
        _this.chipLayersContainer.addChild(_this.backChipsLayer);
        _this.chipLayersContainer.addChild(_this.frontChipsLayer);
        _this.spawnDefinedChips(GameData.getInstance().getLevelDef(PlayState.level));
        _this.backChipsLayer.x = -Constants.ASSETS_WIDTH;
        _this.frontChipsLayer.x = -Constants.ASSETS_WIDTH;
        _this.showField();
        if (PlayState.level == 0) {
            _this.tutorial = new Tutorial();
            _this.addGameObject(_this.tutorial);
        }
        return _this;
    }
    PlayState.prototype.querySpawnNewChips = function(count) {
        this.spawnQueries += count;
    }
    ;
    PlayState.prototype.showHint = function() {
        if (this.hintChips.length == 0) {
            for (var x = 0; x < this.fieldWidth; x++) {
                for (var y = 0; y < this.fieldHeight; y++) {
                    if (this.field[x][y] != null) {
                        this.group = new Array();
                        this.fillGroup(this.field[x][y], this.field[x][y].getColorID());
                        if (this.group.length >= 3) {
                            //  error here ????!!!! need copy
                            this.hintChips = this.group;
                            return;
                        }
                    }
                }
            }
        }
    }
    ;
    PlayState.prototype.sortLineChips = function(new_chip) {
        var all_dead = true;
        this.lineChips.push(new_chip);
        for (var i = 0; i < this.lineChips.length; i++) {
            if (this.lineChips[i] && this.lineChips[i].isDead()) {
                this.lineChips.splice(i, 1);
                i--;
            }
            if (this.lineChips[i] && !this.lineChips[i].isDead()) {
                all_dead = false;
            }
        }
        if (all_dead || this.lineChips.length == 0) {
            return;
        }
        this.lineChips.sort(function(chip_1, chip_2) {
            return (chip_2.getIndexX() - chip_1.getIndexX());
        });
        if (this.lineChips.length > 0) {
            for (var i = 0; i < this.lineChips.length; i++) {
                this.underChipsLayer.addChild(this.lineChips[i]);
            }
        }
    }
    ;
    PlayState.prototype.hideHint = function() {
        if (this.hintChips.length != 0) {
            //  for here
            for (var i = 0; i < this.hintChips.length; i++) {
                this.hintChips[i].stopBlink();
            }
            this.hintChips = new Array();
        }
    }
    ;
    PlayState.prototype.showField = function() {
        var _this = this;
        createjs.Tween.get(this.conveyor).to({
            speed: 0.0038
        }, 200, createjs.Ease.sineIn);
        createjs.Tween.get(this.backChipsLayer).wait(Constants.TRANSITION_TIME).to({
            x: 0
        }, 1000, createjs.Ease.sineIn);
        createjs.Tween.get(this.frontChipsLayer).wait(Constants.TRANSITION_TIME).to({
            x: 0
        }, 1000, createjs.Ease.sineIn).call(function() {
            _this.conveyor.speed = 0;
            _this.conveyor.stopGears();
            _this.isFieldLocked = false;
        });
    }
    ;
    PlayState.prototype.hideField = function() {
        var _this = this;
        this.conveyor.startGears();
        createjs.Tween.get(this.conveyor).to({
            speed: 0.0038
        }, 200, createjs.Ease.sineIn);
        createjs.Tween.get(this.backChipsLayer).to({
            x: Constants.ASSETS_WIDTH * 2
        }, 1000, createjs.Ease.sineIn);
        createjs.Tween.get(this.frontChipsLayer).to({
            x: Constants.ASSETS_WIDTH * 2
        }, 1000, createjs.Ease.sineIn).call(function() {
            _this.conveyor.speed = 0;
            _this.conveyor.stopGears();
        });
    }
    ;
    PlayState.prototype.onPauseClick = function() {
        StateManager.g_instance.pushState(new PauseState());
    }
    ;
    PlayState.prototype.onPause = function() {
        StateManager.g_instance.pushState(new PauseState());
    }
    ;
    PlayState.prototype.onResume = function() {}
    ;
    PlayState.prototype.createChip = function(x, y, delay) {
        var id = Utils.RandomRangeInt(0, this.chipTypes - 1);
        var chip = new Chip(id,x,y,this.getYPosByYIndex(y),delay);
        chip.setIncexes(x, y);
        this.addGameObjectAtPos(chip, this.backChipsLayer, this.getXPosByXIndex(x), -Constants.CELL_HEIGHT - (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2);
        this.backChipsLayer.addChildAt(chip, 0);
        this.field[x][y] = chip;
    }
    ;
    PlayState.prototype.createChipWithColorID = function(x, y, delay, id) {
        if (id == 0) {
            return;
        }
        var chip = new Chip(id - 1,x,y,this.getYPosByYIndex(y),delay,true);
        chip.setIncexes(x, y);
        this.addGameObjectAt(chip, this.backChipsLayer);
        this.backChipsLayer.addChildAt(chip, 0);
        this.field[x][y] = chip;
        if (id == 9) {
            chip.convertToMonster();
        }
        if (id == 8) {
            chip.convertToBonus(Chip.BONUS_BOMB);
        }
        if (id == 7) {
            chip.convertToBonus(Chip.BONUS_LINE);
        }
    }
    ;
    PlayState.prototype.getXPosByXIndex = function(x) {
        return x * Constants.CELL_WIDTH + Constants.CELL_WIDTH / 2 + Constants.FIELD_OFFSET_X;
    }
    ;
    PlayState.prototype.getYPosByYIndex = function(y) {
        return y * Constants.CELL_HEIGHT + Constants.CELL_HEIGHT / 2 + Constants.FIELD_OFFSET_Y;
    }
    ;
    PlayState.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.inputStateTime += dt;
        if (this.waitWin) {
            this.waitWinTime += dt;
            if (this.waitWinTime > 3.5) {
                var stars_percent = (this.starsMaxTime - this.starsTime) / this.starsMaxTime;
                if (stars_percent <= 0) {
                    stars_percent = 0.01;
                    //  no 0 stars
                }
                StateManager.g_instance.pushState(new WinState(this.score,PlayState.level,Math.ceil(stars_percent * 3)));
                return;
            }
        }
        if (this.waitLose) {
            this.waitLoseTime += dt;
            if (this.waitLoseTime > 3.5) {
                StateManager.g_instance.pushState(new LoseState(this.score));
                return;
            }
        }
        if (!this.tutorial) {
            this.starsTime += dt;
            this.timeProgress.setProgress((this.starsMaxTime - this.starsTime) / this.starsMaxTime);
            this.checkTimeEnd();
        }
        switch (this.inputState) {
        case this.INPUT_STATE_WAIT_ACTION:
            if (this.inputStateTime > Constants.HINT_DELAY && !this.tutorial) {
                this.showHint();
                if (this.hintChips.length != 0) {
                    for (var i = 0; i < this.hintChips.length; i++) {
                        this.hintChips[i].blink(this.inputStateTime - Constants.HINT_DELAY);
                    }
                }
            }
            break;
        case this.INPUT_STATE_WAIT_SPAWN:
            if (this.allChipsNormal()) {
                this.setInpunState(this.INPUT_STATE_WAIT_ACTION);
            }
            break;
        case this.INPUT_STATE_SHIFT:
            if (this.allChipsNormal()) {
                if (this.spawnQueries != 0) {
                    this.spawnNewChips(this.spawnQueries);
                    this.spawnQueries = 0;
                } else {
                    this.onShiftEnded();
                    this.setInpunState(this.INPUT_STATE_WAIT_ACTION);
                }
            }
            break;
        }
        //  update score label
        if (this.tmpScore < this.score) {
            this.tmpScore += 17;
            if (this.tmpScore > this.score) {
                this.tmpScore = this.score;
            }
            var str_score = this.tmpScore.toString();
            switch (str_score.length) {
            case 1:
                str_score = "00000" + str_score;
                break;
            case 2:
                str_score = "0000" + str_score;
                break;
            case 3:
                str_score = "000" + str_score;
                break;
            case 4:
                str_score = "00" + str_score;
                break;
            case 5:
                str_score = "0" + str_score;
                break;
            case 6:
                //  do nothing
                break;
            }
            this.scoreLabel.setText(str_score);
        }
    }
    ;
    PlayState.prototype.addPlusToRandomChip = function() {
        if (this.tutorial) {
            this.field[5][5].addPlus();
            return;
        }
        var all = this.collectNormalChipsToArray();
        if (all.length != 0) {
            all[Utils.RandomRangeInt(0, all.length - 1)].addPlus();
        }
    }
    ;
    PlayState.prototype.allChipsNormal = function() {
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] != null && !this.field[x][y].isNormal()) {
                    return false;
                }
            }
        }
        return true;
    }
    ;
    PlayState.prototype.needSpawn = function() {
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] == null) {
                    return true;
                }
            }
        }
        return false;
    }
    ;
    PlayState.prototype.addConverToPlusEffect = function(chip) {
        var plus_pic = AssetsManager.g_instance.getCenteredImageWithProxy("plus");
        plus_pic.scaleX = plus_pic.scaleY = 2;
        plus_pic.alpha = 0;
        plus_pic.x = (Constants.ASSETS_WIDTH - chip.x) > 150 ? chip.x + 50 : chip.x - 50;
        plus_pic.y = chip.y - 50;
        createjs.Tween.get(plus_pic).to({
            alpha: 1
        }, 200);
        createjs.Tween.get(plus_pic).wait(100).to({
            scaleX: 1,
            scaleY: 1,
            x: chip.x + 9,
            y: chip.y + 9
        }, 200).call(function() {
            plus_pic.alpha = 0;
        });
        this.addChild(plus_pic);
    }
    ;
    //  first parameter - bonus chip
    PlayState.prototype.matchBonus = function(bonus_chip) {
        switch (bonus_chip.getBonusType()) {
        case Chip.BONUS_BOMB:
            this.boom(bonus_chip);
            break;
        case Chip.BONUS_LINE:
            this.killLine(bonus_chip);
            break;
        }
    }
    ;
    PlayState.prototype.killLine = function(chip) {
        var _this = this;
        var is_left = chip.x < Constants.ASSETS_WIDTH / 2;
        var start_x = is_left ? this.fieldWidth - 1 : 0;
        var chip_y = chip.getIndexY();
        var add_delay = 700;
        if (start_x == 0) {
            var _loop_1 = function(i) {
                if (this_1.validCoords(i, chip_y) && this_1.field[i][chip_y] != null) {
                    if (this_1.field[i][chip_y]) {
                        this_1.field[i][chip_y].matching = true;
                        createjs.Tween.get(this_1).wait(110 + 70 * i + add_delay).call(function() {
                            if (_this.field[i][chip_y]) {
                                _this.field[i][chip_y].match(Chip.MATCH_REASON_SIMPLE, true, true);
                            }
                        });
                    }
                }
            };
            var this_1 = this;
            for (var i = start_x; i < this.fieldWidth; i++) {
                _loop_1(i);
            }
        } else {
            var _loop_2 = function(i) {
                if (this_2.validCoords(i, chip_y) && this_2.field[i][chip_y] != null) {
                    if (this_2.field[i][chip_y]) {
                        this_2.field[i][chip_y].matching = true;
                        createjs.Tween.get(this_2).wait(110 + 70 * (start_x - i) + add_delay).call(function() {
                            if (_this.field[i][chip_y]) {
                                _this.field[i][chip_y].match(Chip.MATCH_REASON_SIMPLE, true, true);
                            }
                        });
                    }
                }
            };
            var this_2 = this;
            for (var i = start_x; i >= 0; i--) {
                _loop_2(i);
            }
        }
        this.launchRocket(is_left, chip);
        SoundManager.g_instance.play(SoundManager.SOUND_LINE, 0.6);
    }
    ;
    PlayState.prototype.launchRocket = function(is_left, chip) {
        var _this = this;
        var rocket = chip.getBonusPic();
        chip.stopBlinkBonus();
        rocket.x += rocket.parent.x;
        rocket.y += rocket.parent.y;
        this.addChild(rocket);
        var offset_x = is_left ? 300 : -300;
        var offset_y = chip.y > 150 ? -150 : 150;
        var rot = is_left ? 90 : -30;
        var path = [rocket.x, rocket.y, rocket.x + offset_x, rocket.y + offset_y, rocket.x + offset_x * 2, rocket.y + offset_y, rocket.x + offset_x * 2, rocket.y + offset_y, rocket.x + offset_x * 3, rocket.y + offset_y];
        createjs.Tween.get(this).wait(1800).call(function() {
            if (chip) {
                chip.match(Chip.MATCH_REASON_SIMPLE);
            }
        });
        createjs.Tween.get(rocket).to({
            rotation: rot
        }, 150).call(function() {
            for (var i = 0; i < 3; i++) {
                var emitter_1 = new FlameEmitter(is_left);
                PlayState.g_instance.addGameObject(emitter_1);
                emitter_1.offset_x = is_left ? -62 : 62;
                emitter_1.offset_y = is_left ? 13 : 0;
                rocket.addChild(emitter_1);
            }
            createjs.Tween.get(rocket).to({
                guide: {
                    path: path,
                    orient: "fixed"
                }
            }, 700);
            var chip_y = chip.y;
            createjs.Tween.get(_this).wait(500).call(function() {
                _this.addGameObjectAtPos(new KillLineEffect(is_left), _this, is_left ? Constants.ASSETS_WIDTH + 100 : -100, chip_y);
            });
        });
    }
    ;
    PlayState.prototype.boom = function(chip) {
        SoundManager.g_instance.play(SoundManager.SOUND_BOMB, 0.4);
        this.addGameObject(new Shaker(this.chipLayersContainer));
        var chip_x = chip.getIndexX();
        var chip_y = chip.getIndexY();
        var damage_zone = [[0, 0, 1, 0, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 0, 1, 0, 0], ];
        var radius = 1;
        for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
                if (damage_zone[x][y] != 0) {
                    var new_x = chip_x + x - 2;
                    var new_y = chip_y + y - 2;
                    if (this.validCoords(new_x, new_y) && this.field[new_x][new_y] != null) {
                        this.field[new_x][new_y].match(Chip.MATCH_REASON_SIMPLE, false, true);
                    }
                }
            }
        }
        this.addGameObjectAtPos(new RingEffect(), this, chip.x, chip.y);
    }
    ;
    PlayState.prototype.validCoords = function(x, y) {
        return x >= 0 && x < this.fieldWidth && y >= 0 && y < this.fieldHeight;
    }
    ;
    PlayState.prototype.onMouseUp = function(x, y) {
        _super.prototype.onMouseUp.call(this, x, y);
    }
    ;
    PlayState.prototype.collectNormalChipsToArray = function() {
        var all = new Array();
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] != null && !this.field[x][y].isBonus() && !this.field[x][y].isMonster() && !this.field[x][y].havePlus() && !this.field[x][y].matching) {
                    all.push(this.field[x][y]);
                }
            }
        }
        return all;
    }
    ;
    PlayState.prototype.checkWin = function() {
        var _this = this;
        if (this.waitWin || this.waitLose) {
            return;
        }
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] != null && this.field[x][y].isMonster()) {
                    return;
                }
            }
        }
        createjs.Tween.get(this).wait(1500).call(function() {
            return _this.hideField();
        });
        SoundManager.g_instance.play(SoundManager.SOUND_WIN, 0.2);
        this.waitWin = true;
        this.setInpunState(this.INPUT_STATE_LOCK);
        this.addGameObjectAtPos(new EndLevelEffect(DNStringManager.getInstance().getString(Strings.LEVEL_COMPLETED)), this, Constants.ASSETS_WIDTH / 2, Constants.ASSETS_HEIGHT / 2);
    }
    ;
    PlayState.prototype.checkTimeEnd = function() {
        var _this = this;
        if (this.waitLose || this.waitLose) {
            return;
        }
        if ((this.starsMaxTime - this.starsTime) <= 0) {
            SoundManager.g_instance.play(SoundManager.SOUND_LOSE, 0.2);
            createjs.Tween.get(this).wait(1500).call(function() {
                return _this.hideField();
            });
            this.waitLose = true;
            this.setInpunState(this.INPUT_STATE_LOCK);
            this.addGameObjectAtPos(new EndLevelEffect(DNStringManager.getInstance().getString(Strings.LEVEL_FAILED)), this, Constants.ASSETS_WIDTH / 2, Constants.ASSETS_HEIGHT / 2);
            return;
        }
    }
    ;
    //  move to match func
    PlayState.prototype.checkLose = function() {
        var _this = this;
        if (!this.allChipsNormal()) {
            return;
        }
        if (this.waitWin || this.waitLose) {
            return;
        }
        if (this.spawnQueries != 0) {
            return;
        }
        var monsters_count = 0;
        for (var x = 0; x < this.fieldWidth; x++) {
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] != null) {
                    if (this.field[x][y].isBonus()) {
                        return;
                    }
                    if (this.field[x][y].isMonster()) {
                        monsters_count++;
                    }
                    this.group = new Array();
                    this.fillGroup(this.field[x][y], this.field[x][y].getColorID());
                    if (this.group.length >= 3) {
                        return;
                    }
                }
            }
        }
        if (monsters_count != 0) {
            SoundManager.g_instance.play(SoundManager.SOUND_LOSE, 0.2);
            createjs.Tween.get(this).wait(1500).call(function() {
                return _this.hideField();
            });
            this.waitLose = true;
            this.setInpunState(this.INPUT_STATE_LOCK);
            this.addGameObjectAtPos(new EndLevelEffect(DNStringManager.getInstance().getString(Strings.LEVEL_FAILED)), this, Constants.ASSETS_WIDTH / 2, Constants.ASSETS_HEIGHT / 2);
        }
    }
    ;
    PlayState.prototype.findRightInGroup = function(array) {
        var max_sum = -1;
        var chip;
        for (var i = 0; i < array.length; i++) {
            if ((array[i].getIndexX() + array[i].getIndexY()) > max_sum) {
                chip = array[i];
                max_sum = array[i].getIndexX() + array[i].getIndexY();
            }
        }
        return chip;
    }
    ;
    PlayState.prototype.sortGroup = function(chips) {
        var group = new Array();
        var length = chips.length;
        for (var i = 0; i < length; i++) {
            var chip = this.findRightInGroup(chips);
            group.push(chip);
            chips.splice(chips.indexOf(chip), 1);
        }
        return group;
    }
    ;
    PlayState.prototype.onMouseDown = function(x, y) {
        _super.prototype.onMouseDown.call(this, x, y);
        y -= this.y;
        if (this.isFieldLocked) {
            return;
        }
        if (this.inputState != this.INPUT_STATE_WAIT_ACTION) {
            return;
        }
        if (this.tutorial && this.tutorial.getStageNum() == -1) {
            return;
        }
        if (this.tutorial) {
            if (this.tutorial.onTap()) {
                return;
            }
        }
        var new_group = this.getMatchGroupAt(x, y);
        if (new_group && new_group.length > 0) {
            if (new_group[0].isBonus()) {
                this.matchBonus(new_group[0]);
                this.shiftChips();
                if (this.tutorial) {
                    this.tutorial.onMatch();
                }
                return;
            }
        }
        if (new_group && new_group.length >= 3) {
            SoundManager.g_instance.play(SoundManager.SOUND_MATCH, 0.8);
            var need_add_plus = false;
            if (new_group && new_group.length >= 10) {
                if (this.tutorial) {
                    this.field[4][8].convertToBonus(Chip.BONUS_BOMB);
                } else {
                    new_group[Utils.RandomRangeInt(0, new_group.length - 1)].convertToBonus(Chip.BONUS_BOMB);
                }
            } else if (new_group && new_group.length >= 8) {
                new_group[Utils.RandomRangeInt(0, new_group.length - 1)].convertToBonus(Chip.BONUS_LINE);
            } else if (new_group && new_group.length >= 5) {
                need_add_plus = true;
            }
            new_group = this.sortGroup(new_group);
            for (var i = new_group.length - 1; i >= 0; i--) {
                if (new_group && !new_group[i].isBonus()) {
                    new_group[i].match(Chip.MATCH_REASON_SIMPLE);
                    this.addPointsAt(new_group[i], Chip.MATCH_REASON_SIMPLE, new_group.length);
                }
            }
            if (need_add_plus) {
                this.addPlusToRandomChip();
            }
            this.shiftChips();
            if (this.tutorial) {
                this.tutorial.onMatch();
            }
        } else {//  alsert here
        //for (var i: number = 0; i < this.selectedChips.length; i++)
        //{
        //    this.selectedChips[i].deselect();
        //}
        }
    }
    ;
    PlayState.prototype.compareGroups = function(group_1, group_2) {
        if (group_1.length != group_2.length) {
            return false;
        }
        if (group_1.length == 0) {
            return false;
        }
        var chip = group_1[0];
        for (var i = 0; i < group_2.length; i++) {
            if (chip == group_2[i]) {
                return true;
            }
        }
        return false;
    }
    ;
    PlayState.prototype.findChipAt = function(x, y) {
        for (var x_ind = 0; x_ind < this.fieldWidth; x_ind++) {
            for (var y_ind = 0; y_ind < this.fieldHeight; y_ind++) {
                var chip = this.field[x_ind][y_ind];
                if (chip != null && !chip.matching) {
                    if (x >= chip.x - 85 * chip.scaleX / 2 && x <= chip.x + 85 * chip.scaleX / 2 && y >= chip.y - 104 * chip.scaleY / 2 && y <= chip.y + 104 * chip.scaleY / 2) {
                        return chip;
                    }
                }
            }
        }
        return null;
    }
    ;
    PlayState.prototype.getMatchGroupAt = function(x, y) {
        this.group = new Array();
        var first_chip = this.findChipAt(x, y);
        if (this.tutorial) {
            if (first_chip && !this.tutorial.isAccessibleChip(first_chip)) {
                return;
            }
        }
        if (first_chip) {
            this.fillGroup(first_chip, first_chip.getColorID());
        }
        return this.group;
    }
    ;
    PlayState.prototype.fillGroup = function(chip, color) {
        if (this.group.indexOf(chip) != -1) {
            return;
        }
        this.group.push(chip);
        var x = chip.getIndexX();
        var y = chip.getIndexY();
        if (color == -1) {
            //  only 1 chip in group
            return;
        }
        //  left
        if (x > 0) {
            if (this.field[x - 1][y] && this.field[x - 1][y].getColorID() == color) {
                this.fillGroup(this.field[x - 1][y], color);
            }
        }
        //  right
        if (x < this.fieldWidth - 1) {
            if (this.field[x + 1][y] && this.field[x + 1][y].getColorID() == color) {
                this.fillGroup(this.field[x + 1][y], color);
            }
        }
        //  top
        if (y > 0) {
            if (this.field[x][y - 1] && this.field[x][y - 1].getColorID() == color) {
                this.fillGroup(this.field[x][y - 1], color);
            }
        }
        //  right
        if (y < this.fieldHeight - 1) {
            if (this.field[x][y + 1] && this.field[x][y + 1].getColorID() == color) {
                this.fillGroup(this.field[x][y + 1], color);
            }
        }
    }
    ;
    PlayState.prototype.shiftChips = function() {
        for (var x_index = 0; x_index < this.fieldWidth; x_index++) {
            var holes_count = 0;
            for (var y_index = this.fieldHeight - 1; y_index >= 0; y_index--) {
                if (this.field[x_index][y_index] == null) {
                    holes_count++;
                } else if (holes_count != 0) {
                    var new_y_index = y_index + holes_count;
                    this.field[x_index][y_index].shiftDown(new_y_index, this.getYPosByYIndex(new_y_index));
                    this.field[x_index][new_y_index] = this.field[x_index][y_index];
                    this.field[x_index][y_index] = null;
                }
            }
        }
        this.setInpunState(this.INPUT_STATE_SHIFT);
    }
    ;
    PlayState.prototype.spawnDefinedChips = function(defines) {
        var spawned_count = 0;
        for (var x = 0; x < this.fieldWidth; x++) {
            var count = -1;
            for (var y = 0; y < this.fieldHeight; y++) {
                if (this.field[x][y] == null) {
                    if (count == -1) {
                        count = y;
                    }
                    spawned_count++;
                    this.createChipWithColorID(x, y, (count - y) * 0.13, defines[y][x]);
                }
            }
        }
        this.setInpunState(this.INPUT_STATE_WAIT_SPAWN);
    }
    ;
    PlayState.prototype.spawnNewChips = function(max_count) {
        var spawned_count = 0;
        for (var x = 0; x < this.fieldWidth; x++) {
            var count = -1;
            var count_in_column = 0;
            //  check monster
            var was_monster = false;
            for (var i = 0; i < this.fieldHeight; i++) {
                if (this.field[x][i] != null && this.field[x][i].isMonster()) {
                    was_monster = true;
                    break;
                }
            }
            if (was_monster) {
                continue;
            }
            for (var y = this.fieldHeight - 1; y >= 0; y--) {
                if (this.field[x][y] == null) {
                    if (count == -1) {
                        count = y;
                    }
                    spawned_count++;
                    this.createChip(x, y, (count - y) * 0.13);
                    if (++count_in_column >= max_count) {
                        break;
                    }
                }
            }
        }
        this.sortChipsZ();
        this.setInpunState(this.INPUT_STATE_WAIT_SPAWN);
    }
    ;
    PlayState.prototype.sortChipsZ = function() {
        for (var x = this.fieldWidth - 1; x >= 0; x--) {
            for (var y = this.fieldHeight - 1; y >= 0; y--) {
                if (this.field[x][y]) {
                    this.backChipsLayer.addChild(this.field[x][y]);
                }
            }
        }
    }
    ;
    PlayState.prototype.setInpunState = function(state) {
        if (this.inputState == this.INPUT_STATE_WAIT_SPAWN && this.tutorial) {
            this.tutorial.onSpawnEnded();
        }
        this.inputState = state;
        this.inputStateTime = 0.0;
        if (state != this.INPUT_STATE_WAIT_ACTION) {
            this.hideHint();
        }
    }
    ;
    PlayState.prototype.clearCell = function(chip) {
        var x = chip.getIndexX();
        var y = chip.getIndexY();
        if (this.field[x][y] == chip) {
            this.field[x][y] = null;
        }
    }
    ;
    PlayState.prototype.addPointsAt = function(chip, match_reason, count) {
        var score = Math.min(90, Math.max(40, count * 10));
        if (match_reason == Chip.MATCH_LAND) {
            score = 500;
        }
        this.score += score;
    }
    ;
    PlayState.prototype.tryShowSuperb = function(x, y) {
        return true;
    }
    ;
    PlayState.prototype.getColorAt = function(x, y) {
        if (x < 0 || y < 0 || x >= this.fieldWidth || y >= this.fieldHeight || !this.field[x][y]) {
            return -1;
        }
        return this.field[x][y].getColorID();
    }
    ;
    PlayState.prototype.onShiftEnded = function() {
        if (this.liveTime != this.lastDropSoundTime) {
            this.lastDropSoundTime = this.liveTime;
            var id = Utils.RandomRangeInt(0, 2);
            while (id == this.lastDropID) {
                id = Utils.RandomRangeInt(0, 2);
            }
            this.lastDropID = id;
            switch (id) {
            case 0:
                SoundManager.g_instance.play(SoundManager.SOUND_DROP_1, 0.15);
                break;
            case 1:
                SoundManager.g_instance.play(SoundManager.SOUND_DROP_2, 0.15);
                break;
            case 2:
                SoundManager.g_instance.play(SoundManager.SOUND_DROP_3, 0.15);
                break;
            }
        }
        this.checkLose();
    }
    ;
    PlayState.prototype.playFreedomSound = function() {
        if (this.liveTime != this.lastFreedomSoundTime) {
            this.lastFreedomSoundTime = this.liveTime;
            if (Math.random() < 0.5) {
                SoundManager.g_instance.play(SoundManager.SOUND_FREEDOM_2, 0.5);
            } else {
                SoundManager.g_instance.play(SoundManager.SOUND_FREEDOM_1, 0.5);
            }
        }
    }
    ;
    PlayState.prototype.configureYAlign = function() {
        if (Constants.g_isPC) {
            return;
        }
        if (Constants.SCREEN_HEIGHT < Constants.ASSETS_HEIGHT) {
            this.y = Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT;
        } else if (Constants.SCREEN_HEIGHT > Constants.ASSETS_HEIGHT) {
            this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        }
    }
    ;
    PlayState.prototype.moveChipFront = function(chip) {
        this.frontChipsLayer.addChild(chip);
    }
    ;
    PlayState.prototype.highlightArea = function(left, top, right, bottom, x_offset, y_offset) {
        if (x_offset === void 0) {
            x_offset = 0;
        }
        if (y_offset === void 0) {
            y_offset = 0;
        }
        var highlighter = new TutorialHighlighter(this.getXPosByXIndex(left) - (Constants.CELL_WIDTH / 2 + 10) + x_offset,this.getYPosByYIndex(top) - (Constants.CELL_HEIGHT / 2 + 10) + y_offset,this.getXPosByXIndex(right) - (Constants.CELL_WIDTH / 2 - 10) + x_offset,this.getYPosByYIndex(bottom) - (Constants.CELL_HEIGHT / 2 - 10) + y_offset);
        this.addGameObjectAt(highlighter, this);
        return highlighter;
    }
    ;
    return PlayState;
}(GameState));
PlayState.level = -1;
/// <reference path="references.ts" />
var PlusEffect = (function(_super) {
    __extends(PlusEffect, _super);
    function PlusEffect() {
        var _this = _super.call(this) || this;
        _this.addChild(AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_PLUS));
        createjs.Tween.get(_this, {
            loop: false
        }).to({
            scaleX: 1.9,
            scaleY: 1.9
        }, 400, createjs.Ease.backOut);
        createjs.Tween.get(_this, {
            loop: false
        }).wait(400).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function() {
            return _this.kill();
        });
        return _this;
    }
    return PlusEffect;
}(GameObject));
/// <reference path="references.ts" />
var PreloaderState = (function(_super) {
    __extends(PreloaderState, _super);
    function PreloaderState(manifest, sound_manifest, athlases, localizable_images) {
        var _this = _super.call(this) || this;
        _this.loadingBar = new DNLoadingBar("#4d9dbe","#444444","#ffffff");
        new AssetsManager(manifest,sound_manifest,athlases,localizable_images,function(e) {
            return _this.handleProgress(e);
        }
        );
        _this.addChild(_this.loadingBar);
        _this.loadingBar.x = Constants.ASSETS_WIDTH / 2;
        _this.loadingBar.y = Constants.ASSETS_HEIGHT / 2;
        return _this;
    }
    PreloaderState.prototype.handleProgress = function(e) {
        this.loadingBar.setProgress(e.loaded);
    }
    ;
    PreloaderState.prototype.onOrientationChanged = function(is_landscape) {//  do nothing
    }
    ;
    return PreloaderState;
}(GameState));
/// <reference path="references.ts" />
var RingEffect = (function(_super) {
    __extends(RingEffect, _super);
    function RingEffect() {
        var _this = _super.call(this) || this;
        _this.addChild(AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_RING));
        _this.update(0);
        return _this;
    }
    RingEffect.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        this.scaleX = this.scaleY = this.liveTime * 15;
        this.alpha -= dt * 3.5;
        if (this.alpha <= 0) {
            this.kill();
        }
    }
    ;
    return RingEffect;
}(GameObject));
/// <reference path="references.ts" />
var SelectLevelButton = (function(_super) {
    __extends(SelectLevelButton, _super);
    function SelectLevelButton(num) {
        var _this = _super.call(this, Constants.IMAGE_LEVEL_BUTTON, function() {
            num < GameData.getInstance().levelsAvailable() ? StateManager.g_instance.pushState(new TransitionInState(new PlayState(this.levelNum))) : null;
        }) || this;
        _this.locked = false;
        var unlocked = num < GameData.getInstance().levelsAvailable();
        _this.levelNum = num;
        var stars_count = GameData.getInstance().getStarsInLevel(num);
        if (!unlocked) {
            _this.setEnabled(false);
            var lock = AssetsManager.g_instance.getCenteredImageWithProxy("lock");
            lock.y += 5;
            _this.addChild(lock);
        } else {
            _this.stars = new createjs.Container();
            _this.text = new DNLabel((num + 1).toString(),Fonts.selectColor,DN_TEXT_ALIGN_HOR.LEFT);
            _this.addChild(_this.text);
            _this.text.x = -_this.text.getBounds().width / 2;
            _this.text.y = -_this.text.getBounds().height / 2 - 18 + (StateManager.g_instance.isFirefoxBrowser() ? 12 : 0);
            for (var i = 0; i < 3; i++) {
                if (i < stars_count) {
                    var star = AssetsManager.g_instance.getCenteredImageWithProxy("star_small");
                    star.scaleX = star.scaleY = 0.5;
                    star.x = -33 + 31 * i;
                    _this.stars.addChild(star);
                    _this.addChild(_this.stars);
                    _this.stars.y = 32;
                }
            }
        }
        return _this;
    }
    SelectLevelButton.prototype.onMouseDown = function(x, y) {
        if (this.locked) {
            return;
        }
        _super.prototype.onMouseDown.call(this, x, y);
        this.touchX = x;
    }
    ;
    SelectLevelButton.prototype.onMouseUp = function(x, y) {
        if (Math.abs(x - this.touchX) > 30) {
            this.deselect();
            return;
        }
        _super.prototype.onMouseUp.call(this, x, y);
    }
    ;
    SelectLevelButton.prototype.select = function() {
        _super.prototype.select.call(this);
    }
    ;
    SelectLevelButton.prototype.deselect = function() {
        _super.prototype.deselect.call(this);
    }
    ;
    return SelectLevelButton;
}(DNButton));
/// <reference path="references.ts" />
var SelectLevelState = (function(_super) {
    __extends(SelectLevelState, _super);
    function SelectLevelState() {
        var _this = _super.call(this) || this;
        _this.touchPoint = 0;
        _this.pointsControl = new StatusPointsControl(4,0);
        _this.layer = new createjs.Container();
        _this.backs = new Array();
        _this.currentBox = 0;
        _this.currentBoxesCount = 4;
        _this.tween = null;
        _this.needShowGratz = false;
        _this.gratzTimer = 0.3;
        _this.alignByCenter(false);
        var back = AssetsManager.g_instance.getCenteredImageWithProxy("background_1");
        back.x = Constants.ASSETS_WIDTH / 2;
        back.y = Constants.ASSETS_HEIGHT / 2;
        _this.addChild(back);
        var select_back = AssetsManager.g_instance.getCenteredImageWithProxy("level_menu_up");
        select_back.x = Constants.ASSETS_WIDTH / 2;
        select_back.y = -40 - (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        _this.addChild(select_back);
        for (var i = 0; i < _this.currentBoxesCount; i++) {
            var back_1 = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_SELECT_LEVEL_BACK);
            back_1.x = Constants.ASSETS_WIDTH / 2 + Constants.ASSETS_WIDTH * i;
            back_1.y = Constants.ASSETS_HEIGHT / 2 + 15;
            back_1.scaleX = back_1.scaleY = 0.95;
            _this.layer.addChild(back_1);
            _this.backs.push(back_1);
        }
        _this.addChild(_this.layer);
        _this.addChild(_this.pointsControl);
        _this.pointsControl.x = Constants.ASSETS_WIDTH / 2;
        _this.pointsControl.y = Constants.ASSETS_HEIGHT - 30;
        var screens_count = 4;
        var buttons_offset_x = 180;
        var buttons_offset_y = 150;
        for (var screen = 0; screen < screens_count; screen++) {
            for (var x = 0; x < 3; x++) {
                for (var y = 0; y < 3; y++) {
                    var num = screen * 9 + y * 3 + x;
                    var x_pos = x * buttons_offset_x - buttons_offset_x;
                    var y_pos = y * buttons_offset_y - 3 * buttons_offset_y / 2 + 50;
                    var level_button = new SelectLevelButton(num);
                    level_button.x = x_pos;
                    level_button.y = y_pos;
                    _this.backs[screen].addChild(level_button);
                    _this.addGuiObject(level_button);
                }
            }
        }
        var total_sc_text = new DNLabel(DNStringManager.getInstance().getString(Strings.TOTAL_SCORE) + " :",Fonts.panelColor);
        total_sc_text.x = -120;
        total_sc_text.y = 60;
        total_sc_text.scaleX = total_sc_text.scaleY = 0.7;
        select_back.addChild(total_sc_text);
        var total_sc_val = new DNLabel(GameData.getInstance().getTotalScore().toString(),Fonts.panelColor);
        total_sc_val.x = 30;
        total_sc_val.y = 60;
        total_sc_val.scaleX = total_sc_val.scaleY = 0.7;
        select_back.addChild(total_sc_val);
        var star_pic = AssetsManager.g_instance.getCenteredImageWithProxy("star_small");
        star_pic.scaleX = star_pic.scaleY = 1;
        star_pic.y = 84;
        star_pic.x = 157;
        select_back.addChild(star_pic);
        var stars_text = new DNLabel(GameData.getInstance().getTotalStars() + " / " + (3 * GameData.getInstance().getTotalLevelCount()).toString(),Fonts.panelColor);
        stars_text.x = 255;
        stars_text.y = 60;
        stars_text.scaleX = stars_text.scaleY = 0.7;
        select_back.addChild(stars_text);
        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT,function() {
            return _this.onExitTouch();
        }
        );
        _this.addGuiObject(button_exit);
        select_back.addChild(button_exit);
        button_exit.x = -291;
        button_exit.scaleX = button_exit.scaleY = 1.05;
        button_exit.y = 94;
        _this.alignByCenter(false);
        var box_to_show = Math.floor((GameData.getInstance().levelsAvailable() - 1) / 9);
        _this.setCurrentBox(box_to_show);
        _this.tween = createjs.Tween.get(_this.layer, {
            loop: false
        }).to({
            x: -_this.currentBox * Constants.ASSETS_WIDTH
        }, 800, createjs.Ease.quintOut);
        _this.pointsControl.setActiveElement(_this.currentBox);
        _this.needShowGratz = (GameData.getInstance().getTotalLevelCount() == GameData.getInstance().getLevelsCompleted()) && !GameData.getInstance().getGratzShowed();
        return _this;
    }
    SelectLevelState.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        if (this.needShowGratz) {
            if (this.gratzTimer > 0) {
                this.gratzTimer -= dt;
            } else {
                this.needShowGratz = false;
                StateManager.g_instance.pushState(new GratzState());
            }
        }
    }
    ;
    SelectLevelState.prototype.onExitTouch = function() {
        StateManager.g_instance.pushState(new TransitionInState(new MainMenuState()));
    }
    ;
    SelectLevelState.prototype.onMouseDown = function(x, y) {
        if (this.tween) {
            createjs.Tween.removeTweens(this.layer);
            this.tween = null;
        }
        _super.prototype.onMouseDown.call(this, x, y);
        this.touchPoint = x;
        this.liveTime = 0;
    }
    ;
    SelectLevelState.prototype.onMouseMove = function(x, y) {
        _super.prototype.onMouseMove.call(this, x, y);
        var W_3 = Constants.ASSETS_WIDTH * 0.2;
        var delta_x = this.touchPoint - x;
        if (delta_x > W_3) {
            this.pointsControl.setActiveElement(this.currentBox + 1);
        } else if (delta_x < -W_3) {
            this.pointsControl.setActiveElement(this.currentBox - 1);
        } else {
            this.pointsControl.setActiveElement(this.currentBox);
        }
        if (this.currentBox == 0 && delta_x < 0) {
            delta_x *= 0.5;
        } else if (this.currentBox == this.currentBoxesCount - 1 && delta_x > 0) {
            delta_x *= 0.5;
        } else if (delta_x > W_3) {
            delta_x = +W_3 + (delta_x - W_3) * 0.5;
        } else if (delta_x < -W_3) {
            delta_x = -W_3 + (delta_x + W_3) * 0.5;
        }
        this.layer.x = -delta_x - this.currentBox * Constants.ASSETS_WIDTH;
    }
    ;
    SelectLevelState.prototype.onMouseUp = function(x, y) {
        _super.prototype.onMouseUp.call(this, x, y);
        if (this.currentBox != this.pointsControl.getActiveElement()) {
            this.setCurrentBox(this.pointsControl.getActiveElement());
        }
        this.tween = createjs.Tween.get(this.layer, {
            loop: false
        }).to({
            x: -this.currentBox * Constants.ASSETS_WIDTH
        }, 800, createjs.Ease.quintOut);
    }
    ;
    SelectLevelState.prototype.setCurrentBox = function(box) {
        this.currentBox = box;
    }
    ;
    return SelectLevelState;
}(GameState));
/// <reference path="references.ts" />
var Shaker = (function(_super) {
    __extends(Shaker, _super);
    function Shaker(layer) {
        var _this = _super.call(this) || this;
        _this.counter = 0;
        _this.deltaTime = 0.07;
        _this.distance = 7;
        _this.layerForShake = layer;
        _this.startX = layer.x;
        _this.startY = layer.y;
        return _this;
    }
    Shaker.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        if (this.liveTime >= this.deltaTime) {
            this.layerForShake.x = this.startX + Utils.RandomRangeInt(-this.distance, this.distance);
            this.layerForShake.y = this.startY + Utils.RandomRangeInt(-this.distance, this.distance);
            this.liveTime = 0;
            if (++this.counter == 7) {
                this.kill();
            }
        }
    }
    ;
    Shaker.prototype.onDead = function() {
        _super.prototype.onDead.call(this);
        this.layerForShake.x = this.startX;
        this.layerForShake.y = this.startY;
    }
    ;
    return Shaker;
}(GameObject));
/// <reference path="references.ts" />
var StatusPointsControl = (function(_super) {
    __extends(StatusPointsControl, _super);
    function StatusPointsControl(count, current) {
        var _this = _super.call(this) || this;
        _this.smallPoints = new Array();
        _this.offset = 50;
        var width = _this.offset * (count - 1);
        for (var i = 0; i < count; i++) {
            var small_point = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_POINTS_CONTROL_SMALL);
            _this.smallPoints.push(small_point);
            _this.addChild(small_point);
            small_point.x = i * _this.offset - width / 2;
        }
        _this.bigPoint = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_POINTS_CONTROL_BIG);
        _this.addChild(_this.bigPoint);
        _this.setActiveElement(current);
        return _this;
    }
    StatusPointsControl.prototype.setActiveElement = function(element) {
        if (this.curElement != element && element >= 0 && element < this.smallPoints.length) {} else {
            return;
        }
        for (var i = 0; i < this.smallPoints.length; i++) {
            this.smallPoints[i].visible = true;
        }
        this.curElement = element;
        if (this.curElement < 0) {
            this.curElement = 0;
        }
        if (this.curElement > this.smallPoints.length - 1) {
            this.curElement = this.smallPoints.length - 1;
        }
        this.bigPoint.x = this.smallPoints[this.curElement].x + 3;
        this.bigPoint.y = this.smallPoints[this.curElement].y - 5;
    }
    ;
    StatusPointsControl.prototype.getActiveElement = function() {
        return this.curElement;
    }
    ;
    return StatusPointsControl;
}(createjs.Container));
;var Strings = (function() {
    function Strings() {}
    return Strings;
}());
Strings.PAUSE = "PAUSE";
Strings.TAP_TO_CONTINUE = "TAP_TO_CONTINUE";
Strings.TUTORIAL_1 = "TUTORIAL_1";
Strings.TUTORIAL_2 = "TUTORIAL_2";
Strings.TUTORIAL_3 = "TUTORIAL_3";
Strings.TUTORIAL_4 = "TUTORIAL_4";
Strings.TUTORIAL_5 = "TUTORIAL_5";
Strings.TUTORIAL_6 = "TUTORIAL_6";
Strings.LEVEL_COMPLETED = "LEVEL_COMPLETED";
Strings.LEVEL_FAILED = "LEVEL_FAILED";
Strings.SCORE = "SCORE";
Strings.TOTAL_SCORE = "TOTAL_SCORE";
Strings.LEVEL = "LEVEL";
Strings.GJ_MESSAGE = "GJ_MESSAGE";
/// <reference path="references.ts" />
var TransitionInState = (function(_super) {
    __extends(TransitionInState, _super);
    function TransitionInState(next_state) {
        var _this = _super.call(this) || this;
        _this.nextState = null;
        _this.nextState = next_state;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        var center_part = AssetsManager.g_instance.getCenteredImageWithProxy("curtain_1");
        center_part.x = Constants.ASSETS_WIDTH / 2;
        center_part.y = -Constants.SCREEN_HEIGHT / 2 - 250;
        _this.addChild(center_part);
        var left_part = AssetsManager.g_instance.getCenteredImageWithProxy("curtain_2");
        left_part.x = -200;
        left_part.y = -Constants.ASSETS_HEIGHT / 2 - 250;
        _this.addChild(left_part);
        var right_part = AssetsManager.g_instance.getCenteredImageWithProxy("curtain_2");
        right_part.scaleX = -1;
        right_part.x = Constants.ASSETS_WIDTH + 200;
        right_part.y = -Constants.ASSETS_HEIGHT / 2 - 250;
        _this.addChild(right_part);
        createjs.Tween.get(center_part).wait(100).to({
            y: Constants.ASSETS_HEIGHT / 2
        }, 3 * Constants.TRANSITION_TIME / 4).call(function() {
            StateManager.g_instance.changeState(_this.nextState);
            StateManager.g_instance.pushState(new TransitionOutState());
        });
        createjs.Tween.get(left_part).to({
            x: Constants.ASSETS_WIDTH / 2 - 140,
            y: Constants.ASSETS_HEIGHT / 2 - diff
        }, 3 * Constants.TRANSITION_TIME / 4);
        createjs.Tween.get(right_part).to({
            x: Constants.ASSETS_WIDTH / 2 + 140,
            y: Constants.ASSETS_HEIGHT / 2 - diff
        }, 3 * Constants.TRANSITION_TIME / 4);
        SoundManager.g_instance.play(SoundManager.SOUND_CLOSE);
        return _this;
    }
    return TransitionInState;
}(GameState));
/// <reference path="references.ts" />
var TransitionOutState = (function(_super) {
    __extends(TransitionOutState, _super);
    function TransitionOutState() {
        var _this = _super.call(this) || this;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        var center_part = AssetsManager.g_instance.getCenteredImageWithProxy("curtain_1");
        center_part.x = Constants.ASSETS_WIDTH / 2;
        center_part.y = Constants.ASSETS_HEIGHT / 2;
        _this.addChild(center_part);
        var left_part = AssetsManager.g_instance.getCenteredImageWithProxy("curtain_2");
        left_part.x = Constants.ASSETS_WIDTH / 2 - 140;
        left_part.y = Constants.ASSETS_HEIGHT / 2 - diff;
        _this.addChild(left_part);
        var right_part = AssetsManager.g_instance.getCenteredImageWithProxy("curtain_2");
        right_part.scaleX = -1;
        right_part.x = Constants.ASSETS_WIDTH / 2 + 140;
        right_part.y = Constants.ASSETS_HEIGHT / 2 - diff;
        _this.addChild(right_part);
        createjs.Tween.get(center_part).wait(250).to({
            y: -Constants.SCREEN_HEIGHT / 2 - 250
        }, Constants.TRANSITION_TIME).call(function() {
            return _this.onFinishShade();
        });
        createjs.Tween.get(left_part).wait(150).to({
            x: -200,
            y: -Constants.ASSETS_HEIGHT / 2 - 250
        }, 3 * Constants.TRANSITION_TIME / 4);
        createjs.Tween.get(right_part).wait(150).to({
            x: Constants.ASSETS_WIDTH + 200,
            y: -Constants.ASSETS_HEIGHT / 2 - 350
        }, 3 * Constants.TRANSITION_TIME / 4);
        SoundManager.g_instance.play(SoundManager.SOUND_OPEN);
        return _this;
    }
    TransitionOutState.prototype.onFinishShade = function() {
        StateManager.g_instance.popState();
    }
    ;
    return TransitionOutState;
}(GameState));
/// <reference path="references.ts" />
var Tutorial = (function(_super) {
    __extends(Tutorial, _super);
    function Tutorial() {
        var _this = _super.call(this) || this;
        _this.stage = -1;
        _this.text = null;
        _this.stage1LayoutAccessible = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ];
        _this.stage2LayoutAccessible = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ];
        _this.stage3LayoutAccessible = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ];
        _this.stage4LayoutAccessible = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], ];
        _this.stage5LayoutAccessible = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ];
        _this.tapShowed = false;
        return _this;
    }
    Tutorial.prototype.onSpawnEnded = function() {
        var _this = this;
        createjs.Tween.get(this).wait(400).call(function() {
            if (_this.stage == -1) {
                _this.onMatch();
            }
        });
    }
    ;
    Tutorial.prototype.getStageNum = function() {
        return this.stage;
    }
    ;
    Tutorial.prototype.onTap = function() {
        if (this.stage == 0) {
            this.onMatch();
            return true;
        }
        return false;
    }
    ;
    Tutorial.prototype.onMatch = function() {
        this.stage++;
        if (this.highlighter) {
            this.highlighter.hide();
            this.highlighter = null;
        }
        if (this.text) {
            this.text.parent.removeChild(this.text);
            this.text = null;
        }
        this.killTap();
        if (this.stage == 0) {
            this.highlighter = PlayState.g_instance.highlightArea(4, 1, 5, 2);
            this.text = new DNTextBox(DNStringManager.getInstance().getString(Strings.TUTORIAL_1),400,500,"#ffffff");
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 250;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(500).to({
                alpha: 1.0
            }, 600, createjs.Ease.linear);
            this.startTapToContinue();
        }
        if (this.stage == 1) {
            this.highlighter = PlayState.g_instance.highlightArea(4, 2, 6, 4);
            this.text = new DNTextBox(DNStringManager.getInstance().getString(Strings.TUTORIAL_2),500,500,"#ffffff");
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 400;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(500).to({
                alpha: 1.0
            }, 600, createjs.Ease.linear);
        }
        if (this.stage == 2) {
            this.highlighter = PlayState.g_instance.highlightArea(3, 3, 7, 5);
            this.text = new DNTextBox(DNStringManager.getInstance().getString(Strings.TUTORIAL_3),500,500,"#ffffff");
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 500;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(500).to({
                alpha: 1.0
            }, 600, createjs.Ease.linear);
        }
        if (this.stage == 3) {
            this.highlighter = PlayState.g_instance.highlightArea(3, 5, 7, 6);
            this.text = new DNTextBox(DNStringManager.getInstance().getString(Strings.TUTORIAL_4),500,500,"#ffffff");
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 300;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(500).to({
                alpha: 1.0
            }, 600, createjs.Ease.linear);
        }
        if (this.stage == 4) {
            this.highlighter = PlayState.g_instance.highlightArea(3, 6, 7, 9, 8, 7);
            this.text = new DNTextBox(DNStringManager.getInstance().getString(Strings.TUTORIAL_5),500,500,"#ffffff");
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 350;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(500).to({
                alpha: 1.0
            }, 600, createjs.Ease.linear);
        }
        if (this.stage == 5) {
            this.highlighter = PlayState.g_instance.highlightArea(4, 8, 5, 9, 8, 7);
            this.text = new DNTextBox(DNStringManager.getInstance().getString(Strings.TUTORIAL_6),500,500,"#ffffff");
            this.text.x = Constants.ASSETS_WIDTH / 2 - 30;
            this.text.y = 500;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(500).to({
                alpha: 1.0
            }, 600, createjs.Ease.linear);
        }
    }
    ;
    Tutorial.prototype.isAccessibleChip = function(chip) {
        if (!this.highlighter) {
            return true;
        }
        if (this.stage == 0) {
            return false;
        }
        if (this.stage == 1) {
            return this.stage1LayoutAccessible[chip.getIndexY()][chip.getIndexX()] != 0;
        }
        if (this.stage == 2) {
            return this.stage2LayoutAccessible[chip.getIndexY()][chip.getIndexX()] != 0;
        }
        if (this.stage == 3) {
            return this.stage3LayoutAccessible[chip.getIndexY()][chip.getIndexX()] != 0;
        }
        if (this.stage == 4) {
            return this.stage4LayoutAccessible[chip.getIndexY()][chip.getIndexX()] != 0;
        }
        if (this.stage == 5) {
            return this.stage5LayoutAccessible[chip.getIndexY()][chip.getIndexX()] != 0;
        }
        return true;
    }
    ;
    Tutorial.prototype.startTapToContinue = function() {
        var _this = this;
        this.liveTime = 0;
        this.tapToContinue = new DNTextBox(DNStringManager.getInstance().getString(Strings.TAP_TO_CONTINUE),400,400);
        this.tapToContinue.x = 350;
        this.tapToContinue.y = 550 - (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        this.tapToContinue.scaleX = this.tapToContinue.scaleY = 1.35;
        this.tapToContinue.alpha = 0;
        PlayState.g_instance.addChild(this.tapToContinue);
        createjs.Tween.get(this.tapToContinue).wait(600).to({
            alpha: 0.5
        }, 600, createjs.Ease.linear).call(function() {
            _this.liveTime = 0;
            _this.tapShowed = true;
        });
    }
    ;
    Tutorial.prototype.killTap = function() {
        this.tapShowed = false;
        if (this.tapToContinue) {
            this.tapToContinue.parent.removeChild(this.tapToContinue);
            this.tapToContinue = null;
        }
    }
    ;
    Tutorial.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
        if (this.tapToContinue && this.tapShowed) {
            this.tapToContinue.alpha = 0.5 + Math.sin(this.liveTime * 5.5) * 0.5;
        }
    }
    ;
    Tutorial.prototype.onDead = function() {
        _super.prototype.onDead.call(this);
        this.highlighter.hide();
        if (this.text) {
            this.text.parent.removeChild(this.text);
            this.text = null;
        }
    }
    ;
    return Tutorial;
}(GameObject));
/// <reference path="references.ts" />
var TutorialHighlighter = (function(_super) {
    __extends(TutorialHighlighter, _super);
    function TutorialHighlighter(left, top, right, bottom) {
        var _this = _super.call(this) || this;
        _this.right = 0;
        _this.bottom = 0;
        _this.top = 0;
        _this.left = 0;
        _this.right_2 = 0;
        _this.bottom_2 = 0;
        _this.top_2 = 0;
        _this.left_2 = 0;
        _this.isShow = false;
        _this.left = left;
        _this.top = top;
        _this.right = right;
        _this.bottom = bottom;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        var shape = new createjs.Shape();
        shape.graphics.beginFill("#000000");
        shape.graphics.drawRoundRect(0, -diff - 60, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT + diff + 100, 7);
        shape.graphics.endFill();
        _this.addChild(shape);
        var hole = new createjs.Shape();
        hole.graphics.beginFill("#000000");
        hole.graphics.drawRoundRect(left, top, right - left, bottom - top, 7);
        hole.graphics.endFill();
        _this.addChild(hole);
        hole.compositeOperation = "destination-out";
        //shape.mask = hole;
        _this.cache(0, -diff - 60, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT + diff + 100);
        _this.alpha = 0.0;
        createjs.Tween.get(_this).wait(300).to({
            alpha: 0.65
        }, 600, createjs.Ease.linear).call(function() {
            _this.isShow = true;
        });
        ;return _this;
    }
    TutorialHighlighter.prototype.isAppeared = function() {
        return this.isShow;
    }
    ;
    TutorialHighlighter.prototype.hide = function() {
        var _this = this;
        this.isShow = false;
        createjs.Tween.get(this).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function() {
            return _this.kill();
        });
    }
    ;
    TutorialHighlighter.prototype.hitTextMouse = function(x, y) {
        return (x > this.left && x < this.right && y > this.top && y < this.bottom) || (x > this.left_2 && x < this.right_2 && y > this.top_2 && y < this.bottom_2);
    }
    ;
    return TutorialHighlighter;
}(GameObject));
/// <reference path="MainMenuState.ts" />
var WinState = (function(_super) {
    __extends(WinState, _super);
    function WinState(score, level, stars_count) {
        var _this = _super.call(this) || this;
        _this.hiddingNow = false;
        GameData.getInstance().onWinLevel(level, score, stars_count);
        _this.level = level;
        var diff = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
        //  shading
        _this.shader = new createjs.Shape();
        _this.shader.graphics.beginFill("#000000");
        _this.shader.graphics.drawRect(0, -diff, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        _this.shader.graphics.endFill();
        _this.addChild(_this.shader);
        _this.shader.alpha = 0;
        createjs.Tween.get(_this.shader, {
            loop: false
        }).wait(300).to({
            alpha: 0.5
        }, 800, createjs.Ease.linear);
        _this.panel = AssetsManager.g_instance.getCenteredImageWithProxy("pause_window");
        _this.addChild(_this.panel);
        _this.panel.y = Constants.ASSETS_HEIGHT * 0.5;
        _this.panel.scaleX = _this.panel.scaleY = 1.2;
        var button_play = new DNButton(Constants.IMAGE_BUTTON_PLAY,function() {
            return _this.onPlayTouch();
        }
        );
        _this.panel.addChild(button_play);
        _this.addGuiObject(button_play);
        button_play.x = 0;
        button_play.y = 105;
        button_play.scaleX = button_play.scaleY = 0.65;
        var button_restart = new DNButton(Constants.IMAGE_BUTTON_RESTART,function() {
            return _this.onRestartTouch();
        }
        );
        _this.panel.addChild(button_restart);
        _this.addGuiObject(button_restart);
        button_restart.x = 140;
        button_restart.y = 105;
        var button_exit = new DNButton(Constants.IMAGE_BUTTON_EXIT,function() {
            return _this.onExitTouch();
        }
        );
        _this.panel.addChild(button_exit);
        _this.addGuiObject(button_exit);
        button_exit.x = -140;
        button_exit.y = 105;
        var header = new DNLabel(DNStringManager.getInstance().getString(Strings.LEVEL_COMPLETED),Fonts.panelColor);
        header.y = -175;
        _this.panel.addChild(header);
        var sc_label = new DNLabel(DNStringManager.getInstance().getString(Strings.SCORE) + ":",Fonts.panelColor,DN_TEXT_ALIGN_HOR.RIGHT);
        sc_label.y = -77 + 35;
        sc_label.x = -20;
        sc_label.scaleX = sc_label.scaleY = 0.6;
        _this.panel.addChild(sc_label);
        var total_sc_label = new DNLabel(DNStringManager.getInstance().getString(Strings.TOTAL_SCORE) + ":",Fonts.panelColor,DN_TEXT_ALIGN_HOR.RIGHT);
        total_sc_label.y = -24 + 22;
        total_sc_label.x = -20;
        total_sc_label.scaleX = total_sc_label.scaleY = 0.6;
        _this.panel.addChild(total_sc_label);
        var score_label = new DNLabel(score.toString(),Fonts.panelColor,DN_TEXT_ALIGN_HOR.LEFT);
        _this.panel.addChild(score_label);
        score_label.x = 5;
        score_label.y = -77 + 35;
        score_label.scaleX = score_label.scaleY = 0.6;
        var total_score_label = new DNLabel(GameData.getInstance().getTotalScore().toString(),Fonts.panelColor,DN_TEXT_ALIGN_HOR.LEFT);
        _this.panel.addChild(total_score_label);
        total_score_label.x = 5;
        total_score_label.y = -24 + 22;
        total_score_label.scaleX = total_score_label.scaleY = 0.6;
        for (var i = 0; i < 3; i++) {
            if (i < stars_count) {
                var star = AssetsManager.g_instance.getCenteredImageWithProxy("star_small");
                _this.panel.addChild(star);
                star.x = -60 + i * 60;
                star.y = -85;
            }
        }
        _this.panel.x = -_this.panel.getBounds().width / 2;
        createjs.Tween.get(_this.panel, {
            loop: false
        }).to({
            x: Constants.ASSETS_WIDTH / 2
        }, 400, createjs.Ease.backOut);
        SoundManager.g_instance.play(SoundManager.SOUND_POPUP);
        try {
            analytics.level(PlayState.level + 1);
            analytics.score(GameData.getInstance().getTotalScore());
            community.submitScore({
                score: GameData.getInstance().getTotalScore(),
                callback: function() {
                    if (enableAds == true) {
                        if (StateManager.g_instance.adsCD <= 0) {
                            StateManager.g_instance.restartAdsCD();
                            adSense.showAdvertising();
                        }
                    }
                }
            });
        } catch (e) {}
        _this.alignByCenter(false);
        return _this;
    }
    WinState.prototype.update = function(dt) {
        _super.prototype.update.call(this, dt);
    }
    ;
    WinState.prototype.hide = function() {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0.0
            }, 400, createjs.Ease.linear).call(function() {
                StateManager.g_instance.popState();
            });
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                y: -300
            }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                alpha: 0
            }, 300, createjs.Ease.linear);
            this.hiddingNow = true;
        }
    }
    ;
    WinState.prototype.onRestartTouch = function() {
       setLoadingVisible(true, true, function () {
					StateManager.g_instance.pushState(new ShadeInState(new PlayState(-1)));
				})

        
    }
    ;
    WinState.prototype.onExitTouch = function() {
        if (enableAds == true) {
            try {
                if (StateManager.g_instance.adsCD <= 0) {
                    StateManager.g_instance.restartAdsCD();
                    adSense.showAdvertising();
                }
            } catch (e) {}
        }
        StateManager.g_instance.pushState(new TransitionInState(new SelectLevelState()));
    }
    ;
    WinState.prototype.onPlayTouch = function() {
        if (this.level + 1 >= GameData.getInstance().getTotalLevelCount()) {
            StateManager.g_instance.pushState(new TransitionInState(new SelectLevelState()));
        } else {
            StateManager.g_instance.pushState(new TransitionInState(new PlayState(this.level + 1)));
        }
    }
    ;
    return WinState;
}(GameState));
